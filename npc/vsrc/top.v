// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

module IFU(	// <stdin>:2:10
  input         clock,
                reset,
  input  [63:0] io_IF_npc,
  output [63:0] io_IF_pc);

  reg [63:0] pcReg;	// IFU.scala:9:24
  reg [63:0] pcReg_REG;	// IFU.scala:10:21
  always @(posedge clock) begin
    if (reset)
      pcReg <= 64'h0;	// IFU.scala:9:24
    else
      pcReg <= pcReg_REG;	// IFU.scala:9:24, :10:21
    pcReg_REG <= io_IF_npc;	// IFU.scala:10:21
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2:10
        pcReg = {_RANDOM_0, _RANDOM_1};	// IFU.scala:9:24
        pcReg_REG = {_RANDOM_2, _RANDOM_3};	// IFU.scala:10:21
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_IF_pc = pcReg;	// <stdin>:2:10, IFU.scala:9:24
endmodule

module InstDecoder(	// <stdin>:15:10
  input  [31:0] io_inst,
  output [2:0]  io_instType);

  assign io_instType = io_inst[5:0] == 6'h13 | io_inst[5:0] == 6'h3 ? 3'h0 : io_inst[5:0] == 6'h33 | io_inst[5:0]
                == 6'h3B ? 3'h1 : io_inst[5:0] == 6'h17 | io_inst[5:0] == 6'h37 ? 3'h2 : io_inst[5:0] ==
                6'h23 ? 3'h3 : 3'h0;	// <stdin>:15:10, Mux.scala:101:16, inst_decode.scala:19:22, :22:{17,34,44}, :23:{17,34,44}, :24:{17,34,44}, :25:17
endmodule

module IDU(	// <stdin>:62:10
  input  [31:0] io_IF_Inst,
  input  [63:0] io_IF_pc,
  output [63:0] io_ID_npc);

  wire [2:0] _inst_decoder_io_instType;	// IDU.scala:44:30
  InstDecoder inst_decoder (	// IDU.scala:44:30
    .io_inst     (io_IF_Inst),
    .io_instType (_inst_decoder_io_instType)
  );
  assign io_ID_npc = _inst_decoder_io_instType == 3'h4 ? io_IF_pc + {31'h0, {13{io_IF_Inst[31]}},
                io_IF_Inst[19:12], io_IF_Inst[20], io_IF_Inst[30:21], 1'h0} : _inst_decoder_io_instType ==
                3'h5 ? io_IF_pc + {31'h0, {21{io_IF_Inst[31]}}, io_IF_Inst[7], io_IF_Inst[30:25],
                io_IF_Inst[11:8], 1'h0} : {32'h0, io_IF_pc[31:0] + 32'h4};	// <stdin>:62:10, Cat.scala:33:92, IDU.scala:44:30, :58:36, :61:{80,107,115,128}, :62:{54,76,101}, :67:25, :69:{19,40,47}, :70:{19,40}, Mux.scala:101:16
endmodule

module top(	// <stdin>:248:10
  input         clock,
                reset,
                io_clock,
                io_reset,
  input  [31:0] io_inst,
  output [63:0] io_IF_pc);

  wire [63:0] _inst_decode_unit_io_ID_npc;	// top.scala:13:34
  wire [63:0] _inst_fetch_unit_io_IF_pc;	// top.scala:12:33
  IFU inst_fetch_unit (	// top.scala:12:33
    .clock     (clock),
    .reset     (reset),
    .io_IF_npc (_inst_decode_unit_io_ID_npc),	// top.scala:13:34
    .io_IF_pc  (_inst_fetch_unit_io_IF_pc)
  );
  IDU inst_decode_unit (	// top.scala:13:34
    .io_IF_Inst (io_inst),
    .io_IF_pc   (_inst_fetch_unit_io_IF_pc),	// top.scala:12:33
    .io_ID_npc  (_inst_decode_unit_io_ID_npc)
  );
  assign io_IF_pc = _inst_fetch_unit_io_IF_pc;	// <stdin>:248:10, top.scala:12:33
endmodule

