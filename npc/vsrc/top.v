// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

module MaxPeriodFibonacciLFSR(	// <stdin>:2:10
  input  clock,
         reset,
  output io_out_0,
         io_out_1,
         io_out_2,
         io_out_3,
         io_out_4,
         io_out_5,
         io_out_6,
         io_out_7,
         io_out_8,
         io_out_9,
         io_out_10,
         io_out_11,
         io_out_12,
         io_out_13,
         io_out_14,
         io_out_15);

  reg state_0;	// PRNG.scala:55:49
  reg state_1;	// PRNG.scala:55:49
  reg state_2;	// PRNG.scala:55:49
  reg state_3;	// PRNG.scala:55:49
  reg state_4;	// PRNG.scala:55:49
  reg state_5;	// PRNG.scala:55:49
  reg state_6;	// PRNG.scala:55:49
  reg state_7;	// PRNG.scala:55:49
  reg state_8;	// PRNG.scala:55:49
  reg state_9;	// PRNG.scala:55:49
  reg state_10;	// PRNG.scala:55:49
  reg state_11;	// PRNG.scala:55:49
  reg state_12;	// PRNG.scala:55:49
  reg state_13;	// PRNG.scala:55:49
  reg state_14;	// PRNG.scala:55:49
  reg state_15;	// PRNG.scala:55:49
  always @(posedge clock) begin
    if (reset) begin
      state_0 <= 1'h1;	// <stdin>:2:10, PRNG.scala:55:49
      state_1 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_2 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_3 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_4 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_5 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_6 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_7 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_8 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_9 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_10 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_11 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_12 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_13 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_14 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
      state_15 <= 1'h0;	// <stdin>:2:10, PRNG.scala:55:49
    end
    else begin
      state_0 <= state_15 ^ state_13 ^ state_12 ^ state_10;	// LFSR.scala:15:41, PRNG.scala:55:49
      state_1 <= state_0;	// PRNG.scala:55:49
      state_2 <= state_1;	// PRNG.scala:55:49
      state_3 <= state_2;	// PRNG.scala:55:49
      state_4 <= state_3;	// PRNG.scala:55:49
      state_5 <= state_4;	// PRNG.scala:55:49
      state_6 <= state_5;	// PRNG.scala:55:49
      state_7 <= state_6;	// PRNG.scala:55:49
      state_8 <= state_7;	// PRNG.scala:55:49
      state_9 <= state_8;	// PRNG.scala:55:49
      state_10 <= state_9;	// PRNG.scala:55:49
      state_11 <= state_10;	// PRNG.scala:55:49
      state_12 <= state_11;	// PRNG.scala:55:49
      state_13 <= state_12;	// PRNG.scala:55:49
      state_14 <= state_13;	// PRNG.scala:55:49
      state_15 <= state_14;	// PRNG.scala:55:49
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2:10
        state_0 = _RANDOM_0[0];	// PRNG.scala:55:49
        state_1 = _RANDOM_0[1];	// PRNG.scala:55:49
        state_2 = _RANDOM_0[2];	// PRNG.scala:55:49
        state_3 = _RANDOM_0[3];	// PRNG.scala:55:49
        state_4 = _RANDOM_0[4];	// PRNG.scala:55:49
        state_5 = _RANDOM_0[5];	// PRNG.scala:55:49
        state_6 = _RANDOM_0[6];	// PRNG.scala:55:49
        state_7 = _RANDOM_0[7];	// PRNG.scala:55:49
        state_8 = _RANDOM_0[8];	// PRNG.scala:55:49
        state_9 = _RANDOM_0[9];	// PRNG.scala:55:49
        state_10 = _RANDOM_0[10];	// PRNG.scala:55:49
        state_11 = _RANDOM_0[11];	// PRNG.scala:55:49
        state_12 = _RANDOM_0[12];	// PRNG.scala:55:49
        state_13 = _RANDOM_0[13];	// PRNG.scala:55:49
        state_14 = _RANDOM_0[14];	// PRNG.scala:55:49
        state_15 = _RANDOM_0[15];	// PRNG.scala:55:49
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_out_0 = state_0;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_1 = state_1;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_2 = state_2;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_3 = state_3;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_4 = state_4;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_5 = state_5;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_6 = state_6;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_7 = state_7;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_8 = state_8;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_9 = state_9;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_10 = state_10;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_11 = state_11;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_12 = state_12;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_13 = state_13;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_14 = state_14;	// <stdin>:2:10, PRNG.scala:55:49
  assign io_out_15 = state_15;	// <stdin>:2:10, PRNG.scala:55:49
endmodule

module BPU_Cache(	// <stdin>:65:10
  input         clock,
                reset,
  input  [63:0] io_raddr,
                io_waddr,
                io_writeData,
  input         io_writeEn,
  output [63:0] io_readData,
  output        io_hit,
  output [2:0]  io_wset,
  output [15:0] io_wtag,
  output [2:0]  io_rset,
  output [15:0] io_rtag);

  wire             _writeIDX_prng_io_out_0;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_1;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_2;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_3;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_4;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_5;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_6;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_7;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_8;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_9;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_10;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_11;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_12;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_13;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_14;	// PRNG.scala:91:22
  wire             _writeIDX_prng_io_out_15;	// PRNG.scala:91:22
  reg  [15:0]      cache_0_0_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_0_0_data;	// bpu.scala:40:24
  reg              cache_0_0_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_0_1_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_0_1_data;	// bpu.scala:40:24
  reg              cache_0_1_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_0_2_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_0_2_data;	// bpu.scala:40:24
  reg              cache_0_2_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_0_3_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_0_3_data;	// bpu.scala:40:24
  reg              cache_0_3_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_0_4_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_0_4_data;	// bpu.scala:40:24
  reg              cache_0_4_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_0_5_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_0_5_data;	// bpu.scala:40:24
  reg              cache_0_5_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_0_6_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_0_6_data;	// bpu.scala:40:24
  reg              cache_0_6_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_1_0_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_1_0_data;	// bpu.scala:40:24
  reg              cache_1_0_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_1_1_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_1_1_data;	// bpu.scala:40:24
  reg              cache_1_1_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_1_2_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_1_2_data;	// bpu.scala:40:24
  reg              cache_1_2_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_1_3_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_1_3_data;	// bpu.scala:40:24
  reg              cache_1_3_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_1_4_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_1_4_data;	// bpu.scala:40:24
  reg              cache_1_4_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_1_5_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_1_5_data;	// bpu.scala:40:24
  reg              cache_1_5_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_1_6_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_1_6_data;	// bpu.scala:40:24
  reg              cache_1_6_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_2_0_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_2_0_data;	// bpu.scala:40:24
  reg              cache_2_0_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_2_1_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_2_1_data;	// bpu.scala:40:24
  reg              cache_2_1_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_2_2_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_2_2_data;	// bpu.scala:40:24
  reg              cache_2_2_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_2_3_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_2_3_data;	// bpu.scala:40:24
  reg              cache_2_3_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_2_4_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_2_4_data;	// bpu.scala:40:24
  reg              cache_2_4_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_2_5_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_2_5_data;	// bpu.scala:40:24
  reg              cache_2_5_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_2_6_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_2_6_data;	// bpu.scala:40:24
  reg              cache_2_6_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_3_0_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_3_0_data;	// bpu.scala:40:24
  reg              cache_3_0_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_3_1_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_3_1_data;	// bpu.scala:40:24
  reg              cache_3_1_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_3_2_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_3_2_data;	// bpu.scala:40:24
  reg              cache_3_2_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_3_3_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_3_3_data;	// bpu.scala:40:24
  reg              cache_3_3_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_3_4_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_3_4_data;	// bpu.scala:40:24
  reg              cache_3_4_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_3_5_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_3_5_data;	// bpu.scala:40:24
  reg              cache_3_5_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_3_6_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_3_6_data;	// bpu.scala:40:24
  reg              cache_3_6_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_4_0_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_4_0_data;	// bpu.scala:40:24
  reg              cache_4_0_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_4_1_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_4_1_data;	// bpu.scala:40:24
  reg              cache_4_1_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_4_2_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_4_2_data;	// bpu.scala:40:24
  reg              cache_4_2_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_4_3_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_4_3_data;	// bpu.scala:40:24
  reg              cache_4_3_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_4_4_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_4_4_data;	// bpu.scala:40:24
  reg              cache_4_4_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_4_5_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_4_5_data;	// bpu.scala:40:24
  reg              cache_4_5_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_4_6_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_4_6_data;	// bpu.scala:40:24
  reg              cache_4_6_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_5_0_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_5_0_data;	// bpu.scala:40:24
  reg              cache_5_0_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_5_1_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_5_1_data;	// bpu.scala:40:24
  reg              cache_5_1_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_5_2_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_5_2_data;	// bpu.scala:40:24
  reg              cache_5_2_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_5_3_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_5_3_data;	// bpu.scala:40:24
  reg              cache_5_3_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_5_4_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_5_4_data;	// bpu.scala:40:24
  reg              cache_5_4_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_5_5_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_5_5_data;	// bpu.scala:40:24
  reg              cache_5_5_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_5_6_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_5_6_data;	// bpu.scala:40:24
  reg              cache_5_6_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_6_0_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_6_0_data;	// bpu.scala:40:24
  reg              cache_6_0_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_6_1_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_6_1_data;	// bpu.scala:40:24
  reg              cache_6_1_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_6_2_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_6_2_data;	// bpu.scala:40:24
  reg              cache_6_2_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_6_3_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_6_3_data;	// bpu.scala:40:24
  reg              cache_6_3_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_6_4_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_6_4_data;	// bpu.scala:40:24
  reg              cache_6_4_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_6_5_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_6_5_data;	// bpu.scala:40:24
  reg              cache_6_5_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_6_6_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_6_6_data;	// bpu.scala:40:24
  reg              cache_6_6_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_7_0_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_7_0_data;	// bpu.scala:40:24
  reg              cache_7_0_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_7_1_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_7_1_data;	// bpu.scala:40:24
  reg              cache_7_1_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_7_2_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_7_2_data;	// bpu.scala:40:24
  reg              cache_7_2_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_7_3_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_7_3_data;	// bpu.scala:40:24
  reg              cache_7_3_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_7_4_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_7_4_data;	// bpu.scala:40:24
  reg              cache_7_4_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_7_5_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_7_5_data;	// bpu.scala:40:24
  reg              cache_7_5_valid;	// bpu.scala:40:24
  reg  [15:0]      cache_7_6_tag;	// bpu.scala:40:24
  reg  [63:0]      cache_7_6_data;	// bpu.scala:40:24
  reg              cache_7_6_valid;	// bpu.scala:40:24
  wire [7:0][15:0] _GEN = {{cache_7_0_tag}, {cache_6_0_tag}, {cache_5_0_tag}, {cache_4_0_tag}, {cache_3_0_tag},
                {cache_2_0_tag}, {cache_1_0_tag}, {cache_0_0_tag}};	// bpu.scala:40:24, :52:19
  wire [15:0]      _GEN_0;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_0 = _GEN[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][63:0] _GEN_1 = {{cache_7_0_data}, {cache_6_0_data}, {cache_5_0_data}, {cache_4_0_data}, {cache_3_0_data},
                {cache_2_0_data}, {cache_1_0_data}, {cache_0_0_data}};	// bpu.scala:40:24, :52:19
  wire [63:0]      _GEN_2;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_2 = _GEN_1[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0]       _GEN_3 = {{cache_7_0_valid}, {cache_6_0_valid}, {cache_5_0_valid}, {cache_4_0_valid},
                {cache_3_0_valid}, {cache_2_0_valid}, {cache_1_0_valid}, {cache_0_0_valid}};	// bpu.scala:40:24, :52:19
  wire             _GEN_4;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_4 = _GEN_3[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][15:0] _GEN_5 = {{cache_7_1_tag}, {cache_6_1_tag}, {cache_5_1_tag}, {cache_4_1_tag}, {cache_3_1_tag},
                {cache_2_1_tag}, {cache_1_1_tag}, {cache_0_1_tag}};	// bpu.scala:40:24, :52:19
  wire [15:0]      _GEN_6;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_6 = _GEN_5[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][63:0] _GEN_7 = {{cache_7_1_data}, {cache_6_1_data}, {cache_5_1_data}, {cache_4_1_data}, {cache_3_1_data},
                {cache_2_1_data}, {cache_1_1_data}, {cache_0_1_data}};	// bpu.scala:40:24, :52:19
  wire [63:0]      _GEN_8;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_8 = _GEN_7[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0]       _GEN_9 = {{cache_7_1_valid}, {cache_6_1_valid}, {cache_5_1_valid}, {cache_4_1_valid},
                {cache_3_1_valid}, {cache_2_1_valid}, {cache_1_1_valid}, {cache_0_1_valid}};	// bpu.scala:40:24, :52:19
  wire             _GEN_10;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_10 = _GEN_9[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][15:0] _GEN_11 = {{cache_7_2_tag}, {cache_6_2_tag}, {cache_5_2_tag}, {cache_4_2_tag}, {cache_3_2_tag},
                {cache_2_2_tag}, {cache_1_2_tag}, {cache_0_2_tag}};	// bpu.scala:40:24, :52:19
  wire [15:0]      _GEN_12;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_12 = _GEN_11[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][63:0] _GEN_13 = {{cache_7_2_data}, {cache_6_2_data}, {cache_5_2_data}, {cache_4_2_data}, {cache_3_2_data},
                {cache_2_2_data}, {cache_1_2_data}, {cache_0_2_data}};	// bpu.scala:40:24, :52:19
  wire [63:0]      _GEN_14;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_14 = _GEN_13[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0]       _GEN_15 = {{cache_7_2_valid}, {cache_6_2_valid}, {cache_5_2_valid}, {cache_4_2_valid},
                {cache_3_2_valid}, {cache_2_2_valid}, {cache_1_2_valid}, {cache_0_2_valid}};	// bpu.scala:40:24, :52:19
  wire             _GEN_16;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_16 = _GEN_15[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][15:0] _GEN_17 = {{cache_7_3_tag}, {cache_6_3_tag}, {cache_5_3_tag}, {cache_4_3_tag}, {cache_3_3_tag},
                {cache_2_3_tag}, {cache_1_3_tag}, {cache_0_3_tag}};	// bpu.scala:40:24, :52:19
  wire [15:0]      _GEN_18;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_18 = _GEN_17[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][63:0] _GEN_19 = {{cache_7_3_data}, {cache_6_3_data}, {cache_5_3_data}, {cache_4_3_data}, {cache_3_3_data},
                {cache_2_3_data}, {cache_1_3_data}, {cache_0_3_data}};	// bpu.scala:40:24, :52:19
  wire [63:0]      _GEN_20;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_20 = _GEN_19[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0]       _GEN_21 = {{cache_7_3_valid}, {cache_6_3_valid}, {cache_5_3_valid}, {cache_4_3_valid},
                {cache_3_3_valid}, {cache_2_3_valid}, {cache_1_3_valid}, {cache_0_3_valid}};	// bpu.scala:40:24, :52:19
  wire             _GEN_22;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_22 = _GEN_21[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][15:0] _GEN_23 = {{cache_7_4_tag}, {cache_6_4_tag}, {cache_5_4_tag}, {cache_4_4_tag}, {cache_3_4_tag},
                {cache_2_4_tag}, {cache_1_4_tag}, {cache_0_4_tag}};	// bpu.scala:40:24, :52:19
  wire [15:0]      _GEN_24;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_24 = _GEN_23[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][63:0] _GEN_25 = {{cache_7_4_data}, {cache_6_4_data}, {cache_5_4_data}, {cache_4_4_data}, {cache_3_4_data},
                {cache_2_4_data}, {cache_1_4_data}, {cache_0_4_data}};	// bpu.scala:40:24, :52:19
  wire [63:0]      _GEN_26;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_26 = _GEN_25[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0]       _GEN_27 = {{cache_7_4_valid}, {cache_6_4_valid}, {cache_5_4_valid}, {cache_4_4_valid},
                {cache_3_4_valid}, {cache_2_4_valid}, {cache_1_4_valid}, {cache_0_4_valid}};	// bpu.scala:40:24, :52:19
  wire             _GEN_28;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_28 = _GEN_27[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][15:0] _GEN_29 = {{cache_7_5_tag}, {cache_6_5_tag}, {cache_5_5_tag}, {cache_4_5_tag}, {cache_3_5_tag},
                {cache_2_5_tag}, {cache_1_5_tag}, {cache_0_5_tag}};	// bpu.scala:40:24, :52:19
  wire [15:0]      _GEN_30;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_30 = _GEN_29[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][63:0] _GEN_31 = {{cache_7_5_data}, {cache_6_5_data}, {cache_5_5_data}, {cache_4_5_data}, {cache_3_5_data},
                {cache_2_5_data}, {cache_1_5_data}, {cache_0_5_data}};	// bpu.scala:40:24, :52:19
  wire [63:0]      _GEN_32;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_32 = _GEN_31[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0]       _GEN_33 = {{cache_7_5_valid}, {cache_6_5_valid}, {cache_5_5_valid}, {cache_4_5_valid},
                {cache_3_5_valid}, {cache_2_5_valid}, {cache_1_5_valid}, {cache_0_5_valid}};	// bpu.scala:40:24, :52:19
  wire             _GEN_34;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_34 = _GEN_33[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][15:0] _GEN_35 = {{cache_7_6_tag}, {cache_6_6_tag}, {cache_5_6_tag}, {cache_4_6_tag}, {cache_3_6_tag},
                {cache_2_6_tag}, {cache_1_6_tag}, {cache_0_6_tag}};	// bpu.scala:40:24, :52:19
  wire [15:0]      _GEN_36;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_36 = _GEN_35[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0][63:0] _GEN_37 = {{cache_7_6_data}, {cache_6_6_data}, {cache_5_6_data}, {cache_4_6_data}, {cache_3_6_data},
                {cache_2_6_data}, {cache_1_6_data}, {cache_0_6_data}};	// bpu.scala:40:24, :52:19
  wire [63:0]      _GEN_38;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_38 = _GEN_37[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire [7:0]       _GEN_39 = {{cache_7_6_valid}, {cache_6_6_valid}, {cache_5_6_valid}, {cache_4_6_valid},
                {cache_3_6_valid}, {cache_2_6_valid}, {cache_1_6_valid}, {cache_0_6_valid}};	// bpu.scala:40:24, :52:19
  wire             _GEN_40;	// bpu.scala:52:19
  /* synopsys infer_mux_override */
  assign _GEN_40 = _GEN_39[io_raddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:46:24, :52:19
  wire             _T_1 = io_raddr[18:3] == _GEN_0 & _GEN_4;	// bpu.scala:45:24, :52:{19,42}
  wire             _T_3 = io_raddr[18:3] == _GEN_6 & _GEN_10;	// bpu.scala:45:24, :52:{19,42}
  wire             _T_5 = io_raddr[18:3] == _GEN_12 & _GEN_16;	// bpu.scala:45:24, :52:{19,42}
  wire             _T_7 = io_raddr[18:3] == _GEN_18 & _GEN_22;	// bpu.scala:45:24, :52:{19,42}
  wire             _T_9 = io_raddr[18:3] == _GEN_24 & _GEN_28;	// bpu.scala:45:24, :52:{19,42}
  wire             _T_11 = io_raddr[18:3] == _GEN_30 & _GEN_34;	// bpu.scala:45:24, :52:{19,42}
  wire             _T_13 = io_raddr[18:3] == _GEN_36 & _GEN_40;	// bpu.scala:45:24, :52:{19,42}
  wire [15:0]      _GEN_41;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_41 = _GEN[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire             _GEN_42;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_42 = _GEN_3[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire [15:0]      _GEN_43;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_43 = _GEN_5[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire             _GEN_44;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_44 = _GEN_9[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire [15:0]      _GEN_45;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_45 = _GEN_11[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire             _GEN_46;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_46 = _GEN_15[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire [15:0]      _GEN_47;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_47 = _GEN_17[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire             _GEN_48;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_48 = _GEN_21[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire [15:0]      _GEN_49;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_49 = _GEN_23[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire             _GEN_50;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_50 = _GEN_27[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire [15:0]      _GEN_51;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_51 = _GEN_29[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire             _GEN_52;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_52 = _GEN_33[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire [15:0]      _GEN_53;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_53 = _GEN_35[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  wire             _GEN_54;	// bpu.scala:66:14
  /* synopsys infer_mux_override */
  assign _GEN_54 = _GEN_39[io_waddr[2:0]] /* cadence map_to_mux */;	// bpu.scala:52:19, :60:24, :66:14
  always @(posedge clock) begin
    if (reset) begin
      cache_0_0_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_0_0_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_0_0_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_0_1_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_0_1_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_0_1_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_0_2_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_0_2_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_0_2_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_0_3_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_0_3_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_0_3_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_0_4_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_0_4_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_0_4_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_0_5_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_0_5_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_0_5_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_0_6_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_0_6_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_0_6_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_1_0_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_1_0_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_1_0_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_1_1_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_1_1_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_1_1_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_1_2_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_1_2_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_1_2_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_1_3_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_1_3_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_1_3_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_1_4_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_1_4_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_1_4_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_1_5_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_1_5_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_1_5_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_1_6_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_1_6_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_1_6_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_2_0_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_2_0_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_2_0_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_2_1_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_2_1_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_2_1_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_2_2_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_2_2_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_2_2_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_2_3_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_2_3_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_2_3_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_2_4_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_2_4_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_2_4_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_2_5_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_2_5_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_2_5_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_2_6_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_2_6_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_2_6_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_3_0_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_3_0_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_3_0_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_3_1_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_3_1_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_3_1_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_3_2_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_3_2_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_3_2_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_3_3_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_3_3_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_3_3_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_3_4_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_3_4_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_3_4_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_3_5_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_3_5_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_3_5_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_3_6_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_3_6_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_3_6_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_4_0_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_4_0_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_4_0_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_4_1_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_4_1_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_4_1_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_4_2_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_4_2_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_4_2_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_4_3_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_4_3_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_4_3_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_4_4_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_4_4_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_4_4_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_4_5_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_4_5_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_4_5_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_4_6_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_4_6_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_4_6_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_5_0_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_5_0_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_5_0_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_5_1_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_5_1_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_5_1_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_5_2_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_5_2_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_5_2_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_5_3_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_5_3_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_5_3_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_5_4_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_5_4_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_5_4_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_5_5_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_5_5_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_5_5_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_5_6_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_5_6_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_5_6_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_6_0_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_6_0_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_6_0_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_6_1_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_6_1_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_6_1_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_6_2_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_6_2_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_6_2_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_6_3_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_6_3_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_6_3_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_6_4_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_6_4_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_6_4_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_6_5_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_6_5_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_6_5_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_6_6_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_6_6_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_6_6_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_7_0_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_7_0_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_7_0_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_7_1_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_7_1_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_7_1_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_7_2_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_7_2_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_7_2_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_7_3_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_7_3_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_7_3_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_7_4_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_7_4_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_7_4_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_7_5_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_7_5_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_7_5_valid <= 1'h0;	// bpu.scala:37:19, :40:24
      cache_7_6_tag <= 16'h0;	// bpu.scala:37:19, :40:24
      cache_7_6_data <= 64'h0;	// bpu.scala:38:20, :40:24
      cache_7_6_valid <= 1'h0;	// bpu.scala:37:19, :40:24
    end
    else begin
      automatic logic       _T_21 = io_waddr[18:3] == _GEN_41;	// bpu.scala:59:24, :66:14, :72:19
      automatic logic       _T_22 = io_waddr[18:3] == _GEN_43;	// bpu.scala:59:24, :66:14, :72:19
      automatic logic       _T_23 = io_waddr[18:3] == _GEN_45;	// bpu.scala:59:24, :66:14, :72:19
      automatic logic       _T_24 = io_waddr[18:3] == _GEN_47;	// bpu.scala:59:24, :66:14, :72:19
      automatic logic       _T_25 = io_waddr[18:3] == _GEN_49;	// bpu.scala:59:24, :66:14, :72:19
      automatic logic       _T_26 = io_waddr[18:3] == _GEN_51;	// bpu.scala:59:24, :66:14, :72:19
      automatic logic       _T_27 = io_waddr[18:3] == _GEN_53;	// bpu.scala:59:24, :66:14, :72:19
      automatic logic [2:0] _GEN_55 = ~io_writeEn | _T_27 | _T_26 | _T_25 | _T_24 | _T_23 | _T_22 | _T_21 | ~_GEN_54 | ~_GEN_52 |
                                                ~_GEN_50 | ~_GEN_48 | ~_GEN_46 | ~_GEN_44 | ~_GEN_42 ? (_T_27 ? 3'h6 : _T_26 ? 3'h5 : _T_25
                                                ? 3'h4 : _T_24 ? 3'h3 : _T_23 ? 3'h2 : _T_22 ? 3'h1 : _T_21 ? 3'h0 : _GEN_54 ? (_GEN_52 ?
                                                (_GEN_50 ? (_GEN_48 ? (_GEN_46 ? {2'h0, ~_GEN_44} : 3'h2) : 3'h3) : 3'h4) : 3'h5) : 3'h6) :
                                                {_writeIDX_prng_io_out_2, _writeIDX_prng_io_out_1, _writeIDX_prng_io_out_0};	// PRNG.scala:91:22, bpu.scala:66:{14,36}, :67:22, :72:{19,42}, :73:22, :77:21, :78:24, :79:22, :81:37
      automatic logic       _GEN_56 = io_waddr[2:0] == 3'h0;	// bpu.scala:60:24, :81:37
      automatic logic       _GEN_57 = _GEN_55 == 3'h0;	// bpu.scala:72:42, :77:21, :78:24, :81:37
      automatic logic       _GEN_58 = io_writeEn & _GEN_56 & _GEN_57;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_59 = _GEN_55 == 3'h1;	// bpu.scala:72:42, :77:21, :78:24, :81:37
      automatic logic       _GEN_60 = io_writeEn & _GEN_56 & _GEN_59;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_61 = _GEN_55 == 3'h2;	// bpu.scala:72:42, :77:21, :78:24, :81:37
      automatic logic       _GEN_62 = io_writeEn & _GEN_56 & _GEN_61;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_63 = _GEN_55 == 3'h3;	// bpu.scala:72:42, :77:21, :78:24, :81:37
      automatic logic       _GEN_64 = io_writeEn & _GEN_56 & _GEN_63;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_65 = _GEN_55 == 3'h4;	// bpu.scala:67:22, :72:42, :77:21, :78:24, :81:37
      automatic logic       _GEN_66 = io_writeEn & _GEN_56 & _GEN_65;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_67 = _GEN_55 == 3'h5;	// bpu.scala:67:22, :72:42, :77:21, :78:24, :81:37
      automatic logic       _GEN_68 = io_writeEn & _GEN_56 & _GEN_67;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_69 = _GEN_55 == 3'h6;	// bpu.scala:67:22, :72:42, :77:21, :78:24, :81:37
      automatic logic       _GEN_70 = io_writeEn & _GEN_56 & _GEN_69;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_71 = io_waddr[2:0] == 3'h1;	// bpu.scala:60:24, :81:37
      automatic logic       _GEN_72 = io_writeEn & _GEN_71 & _GEN_57;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_73 = io_writeEn & _GEN_71 & _GEN_59;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_74 = io_writeEn & _GEN_71 & _GEN_61;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_75 = io_writeEn & _GEN_71 & _GEN_63;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_76 = io_writeEn & _GEN_71 & _GEN_65;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_77 = io_writeEn & _GEN_71 & _GEN_67;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_78 = io_writeEn & _GEN_71 & _GEN_69;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_79 = io_waddr[2:0] == 3'h2;	// bpu.scala:60:24, :81:37
      automatic logic       _GEN_80 = io_writeEn & _GEN_79 & _GEN_57;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_81 = io_writeEn & _GEN_79 & _GEN_59;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_82 = io_writeEn & _GEN_79 & _GEN_61;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_83 = io_writeEn & _GEN_79 & _GEN_63;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_84 = io_writeEn & _GEN_79 & _GEN_65;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_85 = io_writeEn & _GEN_79 & _GEN_67;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_86 = io_writeEn & _GEN_79 & _GEN_69;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_87 = io_waddr[2:0] == 3'h3;	// bpu.scala:60:24, :81:37
      automatic logic       _GEN_88 = io_writeEn & _GEN_87 & _GEN_57;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_89 = io_writeEn & _GEN_87 & _GEN_59;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_90 = io_writeEn & _GEN_87 & _GEN_61;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_91 = io_writeEn & _GEN_87 & _GEN_63;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_92 = io_writeEn & _GEN_87 & _GEN_65;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_93 = io_writeEn & _GEN_87 & _GEN_67;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_94 = io_writeEn & _GEN_87 & _GEN_69;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_95 = io_waddr[2:0] == 3'h4;	// bpu.scala:60:24, :67:22, :81:37
      automatic logic       _GEN_96 = io_writeEn & _GEN_95 & _GEN_57;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_97 = io_writeEn & _GEN_95 & _GEN_59;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_98 = io_writeEn & _GEN_95 & _GEN_61;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_99 = io_writeEn & _GEN_95 & _GEN_63;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_100 = io_writeEn & _GEN_95 & _GEN_65;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_101 = io_writeEn & _GEN_95 & _GEN_67;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_102 = io_writeEn & _GEN_95 & _GEN_69;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_103 = io_waddr[2:0] == 3'h5;	// bpu.scala:60:24, :67:22, :81:37
      automatic logic       _GEN_104 = io_writeEn & _GEN_103 & _GEN_57;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_105 = io_writeEn & _GEN_103 & _GEN_59;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_106 = io_writeEn & _GEN_103 & _GEN_61;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_107 = io_writeEn & _GEN_103 & _GEN_63;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_108 = io_writeEn & _GEN_103 & _GEN_65;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_109 = io_writeEn & _GEN_103 & _GEN_67;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_110 = io_writeEn & _GEN_103 & _GEN_69;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_111 = io_waddr[2:0] == 3'h6;	// bpu.scala:60:24, :67:22, :81:37
      automatic logic       _GEN_112 = io_writeEn & _GEN_111 & _GEN_57;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_113 = io_writeEn & _GEN_111 & _GEN_59;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_114 = io_writeEn & _GEN_111 & _GEN_61;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_115 = io_writeEn & _GEN_111 & _GEN_63;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_116 = io_writeEn & _GEN_111 & _GEN_65;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_117 = io_writeEn & _GEN_111 & _GEN_67;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_118 = io_writeEn & _GEN_111 & _GEN_69;	// bpu.scala:40:24, :77:21, :81:37
      automatic logic       _GEN_119 = io_writeEn & (&(io_waddr[2:0])) & _GEN_57;	// bpu.scala:40:24, :60:24, :77:21, :81:37
      automatic logic       _GEN_120 = io_writeEn & (&(io_waddr[2:0])) & _GEN_59;	// bpu.scala:40:24, :60:24, :77:21, :81:37
      automatic logic       _GEN_121 = io_writeEn & (&(io_waddr[2:0])) & _GEN_61;	// bpu.scala:40:24, :60:24, :77:21, :81:37
      automatic logic       _GEN_122 = io_writeEn & (&(io_waddr[2:0])) & _GEN_63;	// bpu.scala:40:24, :60:24, :77:21, :81:37
      automatic logic       _GEN_123 = io_writeEn & (&(io_waddr[2:0])) & _GEN_65;	// bpu.scala:40:24, :60:24, :77:21, :81:37
      automatic logic       _GEN_124 = io_writeEn & (&(io_waddr[2:0])) & _GEN_67;	// bpu.scala:40:24, :60:24, :77:21, :81:37
      automatic logic       _GEN_125 = io_writeEn & (&(io_waddr[2:0])) & _GEN_69;	// bpu.scala:40:24, :60:24, :77:21, :81:37
      if (_GEN_58) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_0_0_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_0_0_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_0_0_valid <= _GEN_58 | cache_0_0_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_60) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_0_1_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_0_1_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_0_1_valid <= _GEN_60 | cache_0_1_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_62) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_0_2_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_0_2_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_0_2_valid <= _GEN_62 | cache_0_2_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_64) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_0_3_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_0_3_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_0_3_valid <= _GEN_64 | cache_0_3_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_66) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_0_4_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_0_4_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_0_4_valid <= _GEN_66 | cache_0_4_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_68) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_0_5_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_0_5_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_0_5_valid <= _GEN_68 | cache_0_5_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_70) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_0_6_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_0_6_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_0_6_valid <= _GEN_70 | cache_0_6_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_72) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_1_0_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_1_0_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_1_0_valid <= _GEN_72 | cache_1_0_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_73) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_1_1_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_1_1_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_1_1_valid <= _GEN_73 | cache_1_1_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_74) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_1_2_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_1_2_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_1_2_valid <= _GEN_74 | cache_1_2_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_75) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_1_3_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_1_3_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_1_3_valid <= _GEN_75 | cache_1_3_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_76) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_1_4_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_1_4_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_1_4_valid <= _GEN_76 | cache_1_4_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_77) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_1_5_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_1_5_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_1_5_valid <= _GEN_77 | cache_1_5_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_78) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_1_6_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_1_6_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_1_6_valid <= _GEN_78 | cache_1_6_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_80) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_2_0_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_2_0_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_2_0_valid <= _GEN_80 | cache_2_0_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_81) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_2_1_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_2_1_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_2_1_valid <= _GEN_81 | cache_2_1_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_82) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_2_2_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_2_2_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_2_2_valid <= _GEN_82 | cache_2_2_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_83) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_2_3_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_2_3_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_2_3_valid <= _GEN_83 | cache_2_3_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_84) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_2_4_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_2_4_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_2_4_valid <= _GEN_84 | cache_2_4_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_85) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_2_5_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_2_5_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_2_5_valid <= _GEN_85 | cache_2_5_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_86) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_2_6_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_2_6_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_2_6_valid <= _GEN_86 | cache_2_6_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_88) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_3_0_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_3_0_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_3_0_valid <= _GEN_88 | cache_3_0_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_89) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_3_1_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_3_1_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_3_1_valid <= _GEN_89 | cache_3_1_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_90) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_3_2_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_3_2_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_3_2_valid <= _GEN_90 | cache_3_2_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_91) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_3_3_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_3_3_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_3_3_valid <= _GEN_91 | cache_3_3_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_92) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_3_4_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_3_4_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_3_4_valid <= _GEN_92 | cache_3_4_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_93) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_3_5_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_3_5_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_3_5_valid <= _GEN_93 | cache_3_5_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_94) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_3_6_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_3_6_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_3_6_valid <= _GEN_94 | cache_3_6_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_96) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_4_0_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_4_0_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_4_0_valid <= _GEN_96 | cache_4_0_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_97) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_4_1_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_4_1_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_4_1_valid <= _GEN_97 | cache_4_1_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_98) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_4_2_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_4_2_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_4_2_valid <= _GEN_98 | cache_4_2_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_99) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_4_3_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_4_3_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_4_3_valid <= _GEN_99 | cache_4_3_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_100) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_4_4_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_4_4_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_4_4_valid <= _GEN_100 | cache_4_4_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_101) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_4_5_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_4_5_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_4_5_valid <= _GEN_101 | cache_4_5_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_102) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_4_6_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_4_6_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_4_6_valid <= _GEN_102 | cache_4_6_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_104) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_5_0_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_5_0_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_5_0_valid <= _GEN_104 | cache_5_0_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_105) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_5_1_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_5_1_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_5_1_valid <= _GEN_105 | cache_5_1_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_106) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_5_2_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_5_2_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_5_2_valid <= _GEN_106 | cache_5_2_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_107) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_5_3_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_5_3_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_5_3_valid <= _GEN_107 | cache_5_3_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_108) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_5_4_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_5_4_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_5_4_valid <= _GEN_108 | cache_5_4_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_109) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_5_5_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_5_5_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_5_5_valid <= _GEN_109 | cache_5_5_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_110) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_5_6_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_5_6_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_5_6_valid <= _GEN_110 | cache_5_6_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_112) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_6_0_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_6_0_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_6_0_valid <= _GEN_112 | cache_6_0_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_113) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_6_1_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_6_1_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_6_1_valid <= _GEN_113 | cache_6_1_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_114) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_6_2_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_6_2_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_6_2_valid <= _GEN_114 | cache_6_2_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_115) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_6_3_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_6_3_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_6_3_valid <= _GEN_115 | cache_6_3_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_116) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_6_4_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_6_4_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_6_4_valid <= _GEN_116 | cache_6_4_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_117) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_6_5_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_6_5_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_6_5_valid <= _GEN_117 | cache_6_5_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_118) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_6_6_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_6_6_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_6_6_valid <= _GEN_118 | cache_6_6_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_119) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_7_0_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_7_0_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_7_0_valid <= _GEN_119 | cache_7_0_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_120) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_7_1_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_7_1_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_7_1_valid <= _GEN_120 | cache_7_1_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_121) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_7_2_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_7_2_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_7_2_valid <= _GEN_121 | cache_7_2_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_122) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_7_3_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_7_3_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_7_3_valid <= _GEN_122 | cache_7_3_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_123) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_7_4_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_7_4_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_7_4_valid <= _GEN_123 | cache_7_4_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_124) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_7_5_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_7_5_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_7_5_valid <= _GEN_124 | cache_7_5_valid;	// bpu.scala:40:24, :77:21, :81:37
      if (_GEN_125) begin	// bpu.scala:40:24, :77:21, :81:37
        cache_7_6_tag <= io_waddr[18:3];	// bpu.scala:40:24, :59:24
        cache_7_6_data <= io_writeData;	// bpu.scala:40:24
      end
      cache_7_6_valid <= _GEN_125 | cache_7_6_valid;	// bpu.scala:40:24, :77:21, :81:37
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:65:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:65:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:65:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_20;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_21;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_22;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_23;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_24;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_25;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_26;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_27;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_28;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_29;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_30;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_31;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_32;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_33;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_34;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_35;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_36;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_37;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_38;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_39;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_40;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_41;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_42;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_43;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_44;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_45;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_46;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_47;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_48;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_49;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_50;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_51;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_52;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_53;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_54;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_55;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_56;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_57;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_58;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_59;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_60;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_61;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_62;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_63;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_64;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_65;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_66;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_67;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_68;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_69;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_70;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_71;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_72;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_73;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_74;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_75;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_76;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_77;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_78;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_79;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_80;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_81;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_82;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_83;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_84;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_85;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_86;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_87;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_88;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_89;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_90;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_91;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_92;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_93;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_94;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_95;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_96;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_97;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_98;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_99;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_100;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_101;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_102;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_103;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_104;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_105;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_106;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_107;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_108;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_109;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_110;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_111;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_112;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_113;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_114;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_115;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_116;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_117;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_118;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_119;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_120;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_121;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_122;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_123;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_124;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_125;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_126;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_127;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_128;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_129;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_130;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_131;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_132;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_133;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_134;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_135;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_136;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_137;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_138;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_139;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_140;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_141;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_142;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_143;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_144;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_145;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_146;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_147;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_148;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_149;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_150;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_151;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_152;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_153;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_154;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_155;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_156;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_157;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_158;	// <stdin>:65:10
      automatic logic [31:0] _RANDOM_159;	// <stdin>:65:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:65:10
        `INIT_RANDOM_PROLOG_	// <stdin>:65:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:65:10
        _RANDOM_0 = `RANDOM;	// <stdin>:65:10
        _RANDOM_1 = `RANDOM;	// <stdin>:65:10
        _RANDOM_2 = `RANDOM;	// <stdin>:65:10
        _RANDOM_3 = `RANDOM;	// <stdin>:65:10
        _RANDOM_4 = `RANDOM;	// <stdin>:65:10
        _RANDOM_5 = `RANDOM;	// <stdin>:65:10
        _RANDOM_6 = `RANDOM;	// <stdin>:65:10
        _RANDOM_7 = `RANDOM;	// <stdin>:65:10
        _RANDOM_8 = `RANDOM;	// <stdin>:65:10
        _RANDOM_9 = `RANDOM;	// <stdin>:65:10
        _RANDOM_10 = `RANDOM;	// <stdin>:65:10
        _RANDOM_11 = `RANDOM;	// <stdin>:65:10
        _RANDOM_12 = `RANDOM;	// <stdin>:65:10
        _RANDOM_13 = `RANDOM;	// <stdin>:65:10
        _RANDOM_14 = `RANDOM;	// <stdin>:65:10
        _RANDOM_15 = `RANDOM;	// <stdin>:65:10
        _RANDOM_16 = `RANDOM;	// <stdin>:65:10
        _RANDOM_17 = `RANDOM;	// <stdin>:65:10
        _RANDOM_18 = `RANDOM;	// <stdin>:65:10
        _RANDOM_19 = `RANDOM;	// <stdin>:65:10
        _RANDOM_20 = `RANDOM;	// <stdin>:65:10
        _RANDOM_21 = `RANDOM;	// <stdin>:65:10
        _RANDOM_22 = `RANDOM;	// <stdin>:65:10
        _RANDOM_23 = `RANDOM;	// <stdin>:65:10
        _RANDOM_24 = `RANDOM;	// <stdin>:65:10
        _RANDOM_25 = `RANDOM;	// <stdin>:65:10
        _RANDOM_26 = `RANDOM;	// <stdin>:65:10
        _RANDOM_27 = `RANDOM;	// <stdin>:65:10
        _RANDOM_28 = `RANDOM;	// <stdin>:65:10
        _RANDOM_29 = `RANDOM;	// <stdin>:65:10
        _RANDOM_30 = `RANDOM;	// <stdin>:65:10
        _RANDOM_31 = `RANDOM;	// <stdin>:65:10
        _RANDOM_32 = `RANDOM;	// <stdin>:65:10
        _RANDOM_33 = `RANDOM;	// <stdin>:65:10
        _RANDOM_34 = `RANDOM;	// <stdin>:65:10
        _RANDOM_35 = `RANDOM;	// <stdin>:65:10
        _RANDOM_36 = `RANDOM;	// <stdin>:65:10
        _RANDOM_37 = `RANDOM;	// <stdin>:65:10
        _RANDOM_38 = `RANDOM;	// <stdin>:65:10
        _RANDOM_39 = `RANDOM;	// <stdin>:65:10
        _RANDOM_40 = `RANDOM;	// <stdin>:65:10
        _RANDOM_41 = `RANDOM;	// <stdin>:65:10
        _RANDOM_42 = `RANDOM;	// <stdin>:65:10
        _RANDOM_43 = `RANDOM;	// <stdin>:65:10
        _RANDOM_44 = `RANDOM;	// <stdin>:65:10
        _RANDOM_45 = `RANDOM;	// <stdin>:65:10
        _RANDOM_46 = `RANDOM;	// <stdin>:65:10
        _RANDOM_47 = `RANDOM;	// <stdin>:65:10
        _RANDOM_48 = `RANDOM;	// <stdin>:65:10
        _RANDOM_49 = `RANDOM;	// <stdin>:65:10
        _RANDOM_50 = `RANDOM;	// <stdin>:65:10
        _RANDOM_51 = `RANDOM;	// <stdin>:65:10
        _RANDOM_52 = `RANDOM;	// <stdin>:65:10
        _RANDOM_53 = `RANDOM;	// <stdin>:65:10
        _RANDOM_54 = `RANDOM;	// <stdin>:65:10
        _RANDOM_55 = `RANDOM;	// <stdin>:65:10
        _RANDOM_56 = `RANDOM;	// <stdin>:65:10
        _RANDOM_57 = `RANDOM;	// <stdin>:65:10
        _RANDOM_58 = `RANDOM;	// <stdin>:65:10
        _RANDOM_59 = `RANDOM;	// <stdin>:65:10
        _RANDOM_60 = `RANDOM;	// <stdin>:65:10
        _RANDOM_61 = `RANDOM;	// <stdin>:65:10
        _RANDOM_62 = `RANDOM;	// <stdin>:65:10
        _RANDOM_63 = `RANDOM;	// <stdin>:65:10
        _RANDOM_64 = `RANDOM;	// <stdin>:65:10
        _RANDOM_65 = `RANDOM;	// <stdin>:65:10
        _RANDOM_66 = `RANDOM;	// <stdin>:65:10
        _RANDOM_67 = `RANDOM;	// <stdin>:65:10
        _RANDOM_68 = `RANDOM;	// <stdin>:65:10
        _RANDOM_69 = `RANDOM;	// <stdin>:65:10
        _RANDOM_70 = `RANDOM;	// <stdin>:65:10
        _RANDOM_71 = `RANDOM;	// <stdin>:65:10
        _RANDOM_72 = `RANDOM;	// <stdin>:65:10
        _RANDOM_73 = `RANDOM;	// <stdin>:65:10
        _RANDOM_74 = `RANDOM;	// <stdin>:65:10
        _RANDOM_75 = `RANDOM;	// <stdin>:65:10
        _RANDOM_76 = `RANDOM;	// <stdin>:65:10
        _RANDOM_77 = `RANDOM;	// <stdin>:65:10
        _RANDOM_78 = `RANDOM;	// <stdin>:65:10
        _RANDOM_79 = `RANDOM;	// <stdin>:65:10
        _RANDOM_80 = `RANDOM;	// <stdin>:65:10
        _RANDOM_81 = `RANDOM;	// <stdin>:65:10
        _RANDOM_82 = `RANDOM;	// <stdin>:65:10
        _RANDOM_83 = `RANDOM;	// <stdin>:65:10
        _RANDOM_84 = `RANDOM;	// <stdin>:65:10
        _RANDOM_85 = `RANDOM;	// <stdin>:65:10
        _RANDOM_86 = `RANDOM;	// <stdin>:65:10
        _RANDOM_87 = `RANDOM;	// <stdin>:65:10
        _RANDOM_88 = `RANDOM;	// <stdin>:65:10
        _RANDOM_89 = `RANDOM;	// <stdin>:65:10
        _RANDOM_90 = `RANDOM;	// <stdin>:65:10
        _RANDOM_91 = `RANDOM;	// <stdin>:65:10
        _RANDOM_92 = `RANDOM;	// <stdin>:65:10
        _RANDOM_93 = `RANDOM;	// <stdin>:65:10
        _RANDOM_94 = `RANDOM;	// <stdin>:65:10
        _RANDOM_95 = `RANDOM;	// <stdin>:65:10
        _RANDOM_96 = `RANDOM;	// <stdin>:65:10
        _RANDOM_97 = `RANDOM;	// <stdin>:65:10
        _RANDOM_98 = `RANDOM;	// <stdin>:65:10
        _RANDOM_99 = `RANDOM;	// <stdin>:65:10
        _RANDOM_100 = `RANDOM;	// <stdin>:65:10
        _RANDOM_101 = `RANDOM;	// <stdin>:65:10
        _RANDOM_102 = `RANDOM;	// <stdin>:65:10
        _RANDOM_103 = `RANDOM;	// <stdin>:65:10
        _RANDOM_104 = `RANDOM;	// <stdin>:65:10
        _RANDOM_105 = `RANDOM;	// <stdin>:65:10
        _RANDOM_106 = `RANDOM;	// <stdin>:65:10
        _RANDOM_107 = `RANDOM;	// <stdin>:65:10
        _RANDOM_108 = `RANDOM;	// <stdin>:65:10
        _RANDOM_109 = `RANDOM;	// <stdin>:65:10
        _RANDOM_110 = `RANDOM;	// <stdin>:65:10
        _RANDOM_111 = `RANDOM;	// <stdin>:65:10
        _RANDOM_112 = `RANDOM;	// <stdin>:65:10
        _RANDOM_113 = `RANDOM;	// <stdin>:65:10
        _RANDOM_114 = `RANDOM;	// <stdin>:65:10
        _RANDOM_115 = `RANDOM;	// <stdin>:65:10
        _RANDOM_116 = `RANDOM;	// <stdin>:65:10
        _RANDOM_117 = `RANDOM;	// <stdin>:65:10
        _RANDOM_118 = `RANDOM;	// <stdin>:65:10
        _RANDOM_119 = `RANDOM;	// <stdin>:65:10
        _RANDOM_120 = `RANDOM;	// <stdin>:65:10
        _RANDOM_121 = `RANDOM;	// <stdin>:65:10
        _RANDOM_122 = `RANDOM;	// <stdin>:65:10
        _RANDOM_123 = `RANDOM;	// <stdin>:65:10
        _RANDOM_124 = `RANDOM;	// <stdin>:65:10
        _RANDOM_125 = `RANDOM;	// <stdin>:65:10
        _RANDOM_126 = `RANDOM;	// <stdin>:65:10
        _RANDOM_127 = `RANDOM;	// <stdin>:65:10
        _RANDOM_128 = `RANDOM;	// <stdin>:65:10
        _RANDOM_129 = `RANDOM;	// <stdin>:65:10
        _RANDOM_130 = `RANDOM;	// <stdin>:65:10
        _RANDOM_131 = `RANDOM;	// <stdin>:65:10
        _RANDOM_132 = `RANDOM;	// <stdin>:65:10
        _RANDOM_133 = `RANDOM;	// <stdin>:65:10
        _RANDOM_134 = `RANDOM;	// <stdin>:65:10
        _RANDOM_135 = `RANDOM;	// <stdin>:65:10
        _RANDOM_136 = `RANDOM;	// <stdin>:65:10
        _RANDOM_137 = `RANDOM;	// <stdin>:65:10
        _RANDOM_138 = `RANDOM;	// <stdin>:65:10
        _RANDOM_139 = `RANDOM;	// <stdin>:65:10
        _RANDOM_140 = `RANDOM;	// <stdin>:65:10
        _RANDOM_141 = `RANDOM;	// <stdin>:65:10
        _RANDOM_142 = `RANDOM;	// <stdin>:65:10
        _RANDOM_143 = `RANDOM;	// <stdin>:65:10
        _RANDOM_144 = `RANDOM;	// <stdin>:65:10
        _RANDOM_145 = `RANDOM;	// <stdin>:65:10
        _RANDOM_146 = `RANDOM;	// <stdin>:65:10
        _RANDOM_147 = `RANDOM;	// <stdin>:65:10
        _RANDOM_148 = `RANDOM;	// <stdin>:65:10
        _RANDOM_149 = `RANDOM;	// <stdin>:65:10
        _RANDOM_150 = `RANDOM;	// <stdin>:65:10
        _RANDOM_151 = `RANDOM;	// <stdin>:65:10
        _RANDOM_152 = `RANDOM;	// <stdin>:65:10
        _RANDOM_153 = `RANDOM;	// <stdin>:65:10
        _RANDOM_154 = `RANDOM;	// <stdin>:65:10
        _RANDOM_155 = `RANDOM;	// <stdin>:65:10
        _RANDOM_156 = `RANDOM;	// <stdin>:65:10
        _RANDOM_157 = `RANDOM;	// <stdin>:65:10
        _RANDOM_158 = `RANDOM;	// <stdin>:65:10
        _RANDOM_159 = `RANDOM;	// <stdin>:65:10
        cache_0_0_tag = _RANDOM_0[15:0];	// bpu.scala:40:24
        cache_0_0_data = {_RANDOM_0[31:16], _RANDOM_1, _RANDOM_2[15:0]};	// bpu.scala:40:24
        cache_0_0_valid = _RANDOM_2[16];	// bpu.scala:40:24
        cache_0_1_tag = {_RANDOM_2[31:17], _RANDOM_3[0]};	// bpu.scala:40:24
        cache_0_1_data = {_RANDOM_3[31:1], _RANDOM_4, _RANDOM_5[0]};	// bpu.scala:40:24
        cache_0_1_valid = _RANDOM_5[1];	// bpu.scala:40:24
        cache_0_2_tag = _RANDOM_5[17:2];	// bpu.scala:40:24
        cache_0_2_data = {_RANDOM_5[31:18], _RANDOM_6, _RANDOM_7[17:0]};	// bpu.scala:40:24
        cache_0_2_valid = _RANDOM_7[18];	// bpu.scala:40:24
        cache_0_3_tag = {_RANDOM_7[31:19], _RANDOM_8[2:0]};	// bpu.scala:40:24
        cache_0_3_data = {_RANDOM_8[31:3], _RANDOM_9, _RANDOM_10[2:0]};	// bpu.scala:40:24
        cache_0_3_valid = _RANDOM_10[3];	// bpu.scala:40:24
        cache_0_4_tag = _RANDOM_10[19:4];	// bpu.scala:40:24
        cache_0_4_data = {_RANDOM_10[31:20], _RANDOM_11, _RANDOM_12[19:0]};	// bpu.scala:40:24
        cache_0_4_valid = _RANDOM_12[20];	// bpu.scala:40:24
        cache_0_5_tag = {_RANDOM_12[31:21], _RANDOM_13[4:0]};	// bpu.scala:40:24
        cache_0_5_data = {_RANDOM_13[31:5], _RANDOM_14, _RANDOM_15[4:0]};	// bpu.scala:40:24
        cache_0_5_valid = _RANDOM_15[5];	// bpu.scala:40:24
        cache_0_6_tag = _RANDOM_15[21:6];	// bpu.scala:40:24
        cache_0_6_data = {_RANDOM_15[31:22], _RANDOM_16, _RANDOM_17[21:0]};	// bpu.scala:40:24
        cache_0_6_valid = _RANDOM_17[22];	// bpu.scala:40:24
        cache_1_0_tag = _RANDOM_20[23:8];	// bpu.scala:40:24
        cache_1_0_data = {_RANDOM_20[31:24], _RANDOM_21, _RANDOM_22[23:0]};	// bpu.scala:40:24
        cache_1_0_valid = _RANDOM_22[24];	// bpu.scala:40:24
        cache_1_1_tag = {_RANDOM_22[31:25], _RANDOM_23[8:0]};	// bpu.scala:40:24
        cache_1_1_data = {_RANDOM_23[31:9], _RANDOM_24, _RANDOM_25[8:0]};	// bpu.scala:40:24
        cache_1_1_valid = _RANDOM_25[9];	// bpu.scala:40:24
        cache_1_2_tag = _RANDOM_25[25:10];	// bpu.scala:40:24
        cache_1_2_data = {_RANDOM_25[31:26], _RANDOM_26, _RANDOM_27[25:0]};	// bpu.scala:40:24
        cache_1_2_valid = _RANDOM_27[26];	// bpu.scala:40:24
        cache_1_3_tag = {_RANDOM_27[31:27], _RANDOM_28[10:0]};	// bpu.scala:40:24
        cache_1_3_data = {_RANDOM_28[31:11], _RANDOM_29, _RANDOM_30[10:0]};	// bpu.scala:40:24
        cache_1_3_valid = _RANDOM_30[11];	// bpu.scala:40:24
        cache_1_4_tag = _RANDOM_30[27:12];	// bpu.scala:40:24
        cache_1_4_data = {_RANDOM_30[31:28], _RANDOM_31, _RANDOM_32[27:0]};	// bpu.scala:40:24
        cache_1_4_valid = _RANDOM_32[28];	// bpu.scala:40:24
        cache_1_5_tag = {_RANDOM_32[31:29], _RANDOM_33[12:0]};	// bpu.scala:40:24
        cache_1_5_data = {_RANDOM_33[31:13], _RANDOM_34, _RANDOM_35[12:0]};	// bpu.scala:40:24
        cache_1_5_valid = _RANDOM_35[13];	// bpu.scala:40:24
        cache_1_6_tag = _RANDOM_35[29:14];	// bpu.scala:40:24
        cache_1_6_data = {_RANDOM_35[31:30], _RANDOM_36, _RANDOM_37[29:0]};	// bpu.scala:40:24
        cache_1_6_valid = _RANDOM_37[30];	// bpu.scala:40:24
        cache_2_0_tag = _RANDOM_40[31:16];	// bpu.scala:40:24
        cache_2_0_data = {_RANDOM_41, _RANDOM_42};	// bpu.scala:40:24
        cache_2_0_valid = _RANDOM_43[0];	// bpu.scala:40:24
        cache_2_1_tag = _RANDOM_43[16:1];	// bpu.scala:40:24
        cache_2_1_data = {_RANDOM_43[31:17], _RANDOM_44, _RANDOM_45[16:0]};	// bpu.scala:40:24
        cache_2_1_valid = _RANDOM_45[17];	// bpu.scala:40:24
        cache_2_2_tag = {_RANDOM_45[31:18], _RANDOM_46[1:0]};	// bpu.scala:40:24
        cache_2_2_data = {_RANDOM_46[31:2], _RANDOM_47, _RANDOM_48[1:0]};	// bpu.scala:40:24
        cache_2_2_valid = _RANDOM_48[2];	// bpu.scala:40:24
        cache_2_3_tag = _RANDOM_48[18:3];	// bpu.scala:40:24
        cache_2_3_data = {_RANDOM_48[31:19], _RANDOM_49, _RANDOM_50[18:0]};	// bpu.scala:40:24
        cache_2_3_valid = _RANDOM_50[19];	// bpu.scala:40:24
        cache_2_4_tag = {_RANDOM_50[31:20], _RANDOM_51[3:0]};	// bpu.scala:40:24
        cache_2_4_data = {_RANDOM_51[31:4], _RANDOM_52, _RANDOM_53[3:0]};	// bpu.scala:40:24
        cache_2_4_valid = _RANDOM_53[4];	// bpu.scala:40:24
        cache_2_5_tag = _RANDOM_53[20:5];	// bpu.scala:40:24
        cache_2_5_data = {_RANDOM_53[31:21], _RANDOM_54, _RANDOM_55[20:0]};	// bpu.scala:40:24
        cache_2_5_valid = _RANDOM_55[21];	// bpu.scala:40:24
        cache_2_6_tag = {_RANDOM_55[31:22], _RANDOM_56[5:0]};	// bpu.scala:40:24
        cache_2_6_data = {_RANDOM_56[31:6], _RANDOM_57, _RANDOM_58[5:0]};	// bpu.scala:40:24
        cache_2_6_valid = _RANDOM_58[6];	// bpu.scala:40:24
        cache_3_0_tag = {_RANDOM_60[31:24], _RANDOM_61[7:0]};	// bpu.scala:40:24
        cache_3_0_data = {_RANDOM_61[31:8], _RANDOM_62, _RANDOM_63[7:0]};	// bpu.scala:40:24
        cache_3_0_valid = _RANDOM_63[8];	// bpu.scala:40:24
        cache_3_1_tag = _RANDOM_63[24:9];	// bpu.scala:40:24
        cache_3_1_data = {_RANDOM_63[31:25], _RANDOM_64, _RANDOM_65[24:0]};	// bpu.scala:40:24
        cache_3_1_valid = _RANDOM_65[25];	// bpu.scala:40:24
        cache_3_2_tag = {_RANDOM_65[31:26], _RANDOM_66[9:0]};	// bpu.scala:40:24
        cache_3_2_data = {_RANDOM_66[31:10], _RANDOM_67, _RANDOM_68[9:0]};	// bpu.scala:40:24
        cache_3_2_valid = _RANDOM_68[10];	// bpu.scala:40:24
        cache_3_3_tag = _RANDOM_68[26:11];	// bpu.scala:40:24
        cache_3_3_data = {_RANDOM_68[31:27], _RANDOM_69, _RANDOM_70[26:0]};	// bpu.scala:40:24
        cache_3_3_valid = _RANDOM_70[27];	// bpu.scala:40:24
        cache_3_4_tag = {_RANDOM_70[31:28], _RANDOM_71[11:0]};	// bpu.scala:40:24
        cache_3_4_data = {_RANDOM_71[31:12], _RANDOM_72, _RANDOM_73[11:0]};	// bpu.scala:40:24
        cache_3_4_valid = _RANDOM_73[12];	// bpu.scala:40:24
        cache_3_5_tag = _RANDOM_73[28:13];	// bpu.scala:40:24
        cache_3_5_data = {_RANDOM_73[31:29], _RANDOM_74, _RANDOM_75[28:0]};	// bpu.scala:40:24
        cache_3_5_valid = _RANDOM_75[29];	// bpu.scala:40:24
        cache_3_6_tag = {_RANDOM_75[31:30], _RANDOM_76[13:0]};	// bpu.scala:40:24
        cache_3_6_data = {_RANDOM_76[31:14], _RANDOM_77, _RANDOM_78[13:0]};	// bpu.scala:40:24
        cache_3_6_valid = _RANDOM_78[14];	// bpu.scala:40:24
        cache_4_0_tag = _RANDOM_81[15:0];	// bpu.scala:40:24
        cache_4_0_data = {_RANDOM_81[31:16], _RANDOM_82, _RANDOM_83[15:0]};	// bpu.scala:40:24
        cache_4_0_valid = _RANDOM_83[16];	// bpu.scala:40:24
        cache_4_1_tag = {_RANDOM_83[31:17], _RANDOM_84[0]};	// bpu.scala:40:24
        cache_4_1_data = {_RANDOM_84[31:1], _RANDOM_85, _RANDOM_86[0]};	// bpu.scala:40:24
        cache_4_1_valid = _RANDOM_86[1];	// bpu.scala:40:24
        cache_4_2_tag = _RANDOM_86[17:2];	// bpu.scala:40:24
        cache_4_2_data = {_RANDOM_86[31:18], _RANDOM_87, _RANDOM_88[17:0]};	// bpu.scala:40:24
        cache_4_2_valid = _RANDOM_88[18];	// bpu.scala:40:24
        cache_4_3_tag = {_RANDOM_88[31:19], _RANDOM_89[2:0]};	// bpu.scala:40:24
        cache_4_3_data = {_RANDOM_89[31:3], _RANDOM_90, _RANDOM_91[2:0]};	// bpu.scala:40:24
        cache_4_3_valid = _RANDOM_91[3];	// bpu.scala:40:24
        cache_4_4_tag = _RANDOM_91[19:4];	// bpu.scala:40:24
        cache_4_4_data = {_RANDOM_91[31:20], _RANDOM_92, _RANDOM_93[19:0]};	// bpu.scala:40:24
        cache_4_4_valid = _RANDOM_93[20];	// bpu.scala:40:24
        cache_4_5_tag = {_RANDOM_93[31:21], _RANDOM_94[4:0]};	// bpu.scala:40:24
        cache_4_5_data = {_RANDOM_94[31:5], _RANDOM_95, _RANDOM_96[4:0]};	// bpu.scala:40:24
        cache_4_5_valid = _RANDOM_96[5];	// bpu.scala:40:24
        cache_4_6_tag = _RANDOM_96[21:6];	// bpu.scala:40:24
        cache_4_6_data = {_RANDOM_96[31:22], _RANDOM_97, _RANDOM_98[21:0]};	// bpu.scala:40:24
        cache_4_6_valid = _RANDOM_98[22];	// bpu.scala:40:24
        cache_5_0_tag = _RANDOM_101[23:8];	// bpu.scala:40:24
        cache_5_0_data = {_RANDOM_101[31:24], _RANDOM_102, _RANDOM_103[23:0]};	// bpu.scala:40:24
        cache_5_0_valid = _RANDOM_103[24];	// bpu.scala:40:24
        cache_5_1_tag = {_RANDOM_103[31:25], _RANDOM_104[8:0]};	// bpu.scala:40:24
        cache_5_1_data = {_RANDOM_104[31:9], _RANDOM_105, _RANDOM_106[8:0]};	// bpu.scala:40:24
        cache_5_1_valid = _RANDOM_106[9];	// bpu.scala:40:24
        cache_5_2_tag = _RANDOM_106[25:10];	// bpu.scala:40:24
        cache_5_2_data = {_RANDOM_106[31:26], _RANDOM_107, _RANDOM_108[25:0]};	// bpu.scala:40:24
        cache_5_2_valid = _RANDOM_108[26];	// bpu.scala:40:24
        cache_5_3_tag = {_RANDOM_108[31:27], _RANDOM_109[10:0]};	// bpu.scala:40:24
        cache_5_3_data = {_RANDOM_109[31:11], _RANDOM_110, _RANDOM_111[10:0]};	// bpu.scala:40:24
        cache_5_3_valid = _RANDOM_111[11];	// bpu.scala:40:24
        cache_5_4_tag = _RANDOM_111[27:12];	// bpu.scala:40:24
        cache_5_4_data = {_RANDOM_111[31:28], _RANDOM_112, _RANDOM_113[27:0]};	// bpu.scala:40:24
        cache_5_4_valid = _RANDOM_113[28];	// bpu.scala:40:24
        cache_5_5_tag = {_RANDOM_113[31:29], _RANDOM_114[12:0]};	// bpu.scala:40:24
        cache_5_5_data = {_RANDOM_114[31:13], _RANDOM_115, _RANDOM_116[12:0]};	// bpu.scala:40:24
        cache_5_5_valid = _RANDOM_116[13];	// bpu.scala:40:24
        cache_5_6_tag = _RANDOM_116[29:14];	// bpu.scala:40:24
        cache_5_6_data = {_RANDOM_116[31:30], _RANDOM_117, _RANDOM_118[29:0]};	// bpu.scala:40:24
        cache_5_6_valid = _RANDOM_118[30];	// bpu.scala:40:24
        cache_6_0_tag = _RANDOM_121[31:16];	// bpu.scala:40:24
        cache_6_0_data = {_RANDOM_122, _RANDOM_123};	// bpu.scala:40:24
        cache_6_0_valid = _RANDOM_124[0];	// bpu.scala:40:24
        cache_6_1_tag = _RANDOM_124[16:1];	// bpu.scala:40:24
        cache_6_1_data = {_RANDOM_124[31:17], _RANDOM_125, _RANDOM_126[16:0]};	// bpu.scala:40:24
        cache_6_1_valid = _RANDOM_126[17];	// bpu.scala:40:24
        cache_6_2_tag = {_RANDOM_126[31:18], _RANDOM_127[1:0]};	// bpu.scala:40:24
        cache_6_2_data = {_RANDOM_127[31:2], _RANDOM_128, _RANDOM_129[1:0]};	// bpu.scala:40:24
        cache_6_2_valid = _RANDOM_129[2];	// bpu.scala:40:24
        cache_6_3_tag = _RANDOM_129[18:3];	// bpu.scala:40:24
        cache_6_3_data = {_RANDOM_129[31:19], _RANDOM_130, _RANDOM_131[18:0]};	// bpu.scala:40:24
        cache_6_3_valid = _RANDOM_131[19];	// bpu.scala:40:24
        cache_6_4_tag = {_RANDOM_131[31:20], _RANDOM_132[3:0]};	// bpu.scala:40:24
        cache_6_4_data = {_RANDOM_132[31:4], _RANDOM_133, _RANDOM_134[3:0]};	// bpu.scala:40:24
        cache_6_4_valid = _RANDOM_134[4];	// bpu.scala:40:24
        cache_6_5_tag = _RANDOM_134[20:5];	// bpu.scala:40:24
        cache_6_5_data = {_RANDOM_134[31:21], _RANDOM_135, _RANDOM_136[20:0]};	// bpu.scala:40:24
        cache_6_5_valid = _RANDOM_136[21];	// bpu.scala:40:24
        cache_6_6_tag = {_RANDOM_136[31:22], _RANDOM_137[5:0]};	// bpu.scala:40:24
        cache_6_6_data = {_RANDOM_137[31:6], _RANDOM_138, _RANDOM_139[5:0]};	// bpu.scala:40:24
        cache_6_6_valid = _RANDOM_139[6];	// bpu.scala:40:24
        cache_7_0_tag = {_RANDOM_141[31:24], _RANDOM_142[7:0]};	// bpu.scala:40:24
        cache_7_0_data = {_RANDOM_142[31:8], _RANDOM_143, _RANDOM_144[7:0]};	// bpu.scala:40:24
        cache_7_0_valid = _RANDOM_144[8];	// bpu.scala:40:24
        cache_7_1_tag = _RANDOM_144[24:9];	// bpu.scala:40:24
        cache_7_1_data = {_RANDOM_144[31:25], _RANDOM_145, _RANDOM_146[24:0]};	// bpu.scala:40:24
        cache_7_1_valid = _RANDOM_146[25];	// bpu.scala:40:24
        cache_7_2_tag = {_RANDOM_146[31:26], _RANDOM_147[9:0]};	// bpu.scala:40:24
        cache_7_2_data = {_RANDOM_147[31:10], _RANDOM_148, _RANDOM_149[9:0]};	// bpu.scala:40:24
        cache_7_2_valid = _RANDOM_149[10];	// bpu.scala:40:24
        cache_7_3_tag = _RANDOM_149[26:11];	// bpu.scala:40:24
        cache_7_3_data = {_RANDOM_149[31:27], _RANDOM_150, _RANDOM_151[26:0]};	// bpu.scala:40:24
        cache_7_3_valid = _RANDOM_151[27];	// bpu.scala:40:24
        cache_7_4_tag = {_RANDOM_151[31:28], _RANDOM_152[11:0]};	// bpu.scala:40:24
        cache_7_4_data = {_RANDOM_152[31:12], _RANDOM_153, _RANDOM_154[11:0]};	// bpu.scala:40:24
        cache_7_4_valid = _RANDOM_154[12];	// bpu.scala:40:24
        cache_7_5_tag = _RANDOM_154[28:13];	// bpu.scala:40:24
        cache_7_5_data = {_RANDOM_154[31:29], _RANDOM_155, _RANDOM_156[28:0]};	// bpu.scala:40:24
        cache_7_5_valid = _RANDOM_156[29];	// bpu.scala:40:24
        cache_7_6_tag = {_RANDOM_156[31:30], _RANDOM_157[13:0]};	// bpu.scala:40:24
        cache_7_6_data = {_RANDOM_157[31:14], _RANDOM_158, _RANDOM_159[13:0]};	// bpu.scala:40:24
        cache_7_6_valid = _RANDOM_159[14];	// bpu.scala:40:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:65:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:65:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  MaxPeriodFibonacciLFSR writeIDX_prng (	// PRNG.scala:91:22
    .clock     (clock),
    .reset     (reset),
    .io_out_0  (_writeIDX_prng_io_out_0),
    .io_out_1  (_writeIDX_prng_io_out_1),
    .io_out_2  (_writeIDX_prng_io_out_2),
    .io_out_3  (_writeIDX_prng_io_out_3),
    .io_out_4  (_writeIDX_prng_io_out_4),
    .io_out_5  (_writeIDX_prng_io_out_5),
    .io_out_6  (_writeIDX_prng_io_out_6),
    .io_out_7  (_writeIDX_prng_io_out_7),
    .io_out_8  (_writeIDX_prng_io_out_8),
    .io_out_9  (_writeIDX_prng_io_out_9),
    .io_out_10 (_writeIDX_prng_io_out_10),
    .io_out_11 (_writeIDX_prng_io_out_11),
    .io_out_12 (_writeIDX_prng_io_out_12),
    .io_out_13 (_writeIDX_prng_io_out_13),
    .io_out_14 (_writeIDX_prng_io_out_14),
    .io_out_15 (_writeIDX_prng_io_out_15)
  );
  assign io_readData = _T_13 ? _GEN_38 : _T_11 ? _GEN_32 : _T_9 ? _GEN_26 : _T_7 ? _GEN_20 : _T_5 ? _GEN_14 : _T_3
                ? _GEN_8 : _T_1 ? _GEN_2 : 64'h7777;	// <stdin>:65:10, bpu.scala:49:17, :52:{19,42,66}, :54:25
  assign io_hit = _T_13 | _T_11 | _T_9 | _T_7 | _T_5 | _T_3 | _T_1;	// <stdin>:65:10, bpu.scala:52:{42,66}, :53:20
  assign io_wset = io_waddr[2:0];	// <stdin>:65:10, bpu.scala:60:24
  assign io_wtag = io_waddr[18:3];	// <stdin>:65:10, bpu.scala:59:24
  assign io_rset = io_raddr[2:0];	// <stdin>:65:10, bpu.scala:46:24
  assign io_rtag = io_raddr[18:3];	// <stdin>:65:10, bpu.scala:45:24
endmodule

module BPU(	// <stdin>:291:10
  input         clock,
                reset,
  input  [63:0] io_PF_pc,
  input  [31:0] io_PF_inst,
  input         io_PF_valid,
                io_ID_to_BPU_bus_valid,
  input  [63:0] io_ID_to_BPU_bus_bits_PC,
  input         io_ID_to_BPU_bus_bits_taken,
  input  [63:0] io_ID_to_BPU_bus_bits_br_target,
  input         io_ID_to_BPU_bus_bits_load_use_stall,
  input  [1:0]  io_ID_to_BPU_bus_bits_Type,
  output        io_bp_taken,
                io_bp_flush,
  output [63:0] io_bp_npc,
  output [2:0]  io_BTB_wset,
  output [15:0] io_BTB_wtag,
  output [2:0]  io_BTB_rset,
  output [15:0] io_BTB_rtag,
  output [63:0] io_BTB_rdata,
                io_BTB_wdata,
  output        io_BTB_hit,
  output [31:0] io_btype_cnt,
                io_jal_cnt,
                io_jalr_cnt,
                io_btype_fail,
                io_jal_fail,
                io_jalr_fail,
                io_hit_cnt);

  wire        _T_5;	// bpu.scala:195:35
  wire [63:0] _BTB_io_readData;	// bpu.scala:162:21
  wire        _BTB_io_hit;	// bpu.scala:162:21
  wire        _B_type_T = io_PF_inst[6:0] == 7'h63;	// bpu.scala:137:28, :141:24
  wire        _T_8 = io_PF_inst[6:0] == 7'h6F;	// bpu.scala:137:28, :142:24
  wire        _T_12 = io_PF_inst[6:0] == 7'h67;	// bpu.scala:137:28, :142:53
  reg  [63:0] bp_target;	// bpu.scala:146:28
  wire        _T_32 = _B_type_T | _T_8 | _T_12;	// bpu.scala:141:24, :142:{24,53}, :148:18
  wire        _io_bp_flush_T_1 = io_ID_to_BPU_bus_valid & bp_target != io_ID_to_BPU_bus_bits_br_target;	// bpu.scala:146:28, :180:{49,62}
  wire [63:0] _io_bp_npc_T_1 = io_PF_pc + 64'h4;	// bpu.scala:181:43
  wire        _T_31 = _BTB_io_hit & io_PF_valid;	// bpu.scala:162:21, :195:21
  assign _T_5 = _T_31 & _T_32;	// bpu.scala:148:18, :195:{21,35}
  reg  [31:0] jal_cnt;	// bpu.scala:220:27
  reg  [31:0] jalr_cnt;	// bpu.scala:221:27
  reg  [31:0] btype_cnt;	// bpu.scala:222:29
  reg  [31:0] btype_fail;	// bpu.scala:223:29
  reg  [31:0] jal_fail;	// bpu.scala:224:27
  reg  [31:0] jalr_fail;	// bpu.scala:225:28
  reg  [31:0] hit_cnt;	// bpu.scala:226:26
  always @(posedge clock) begin
    if (reset) begin
      bp_target <= 64'h0;	// bpu.scala:146:28
      jal_cnt <= 32'h0;	// bpu.scala:220:27
      jalr_cnt <= 32'h0;	// bpu.scala:220:27, :221:27
      btype_cnt <= 32'h0;	// bpu.scala:220:27, :222:29
      btype_fail <= 32'h0;	// bpu.scala:220:27, :223:29
      jal_fail <= 32'h0;	// bpu.scala:220:27, :224:27
      jalr_fail <= 32'h0;	// bpu.scala:220:27, :225:28
      hit_cnt <= 32'h0;	// bpu.scala:220:27, :226:26
    end
    else begin
      if (_T_32 & ~io_ID_to_BPU_bus_bits_load_use_stall) begin	// bpu.scala:148:{18,28,30}
        if (_io_bp_flush_T_1)	// bpu.scala:180:49
          bp_target <= io_ID_to_BPU_bus_bits_br_target;	// bpu.scala:146:28
        else if (_T_5)	// bpu.scala:180:49, :195:35
          bp_target <= _BTB_io_readData;	// bpu.scala:146:28, :162:21
        else	// bpu.scala:180:49, :195:35
          bp_target <= _io_bp_npc_T_1;	// bpu.scala:146:28, :181:43
      end
      if (io_PF_valid & _T_8 & ~io_ID_to_BPU_bus_bits_load_use_stall)	// bpu.scala:142:24, :148:30, :228:50
        jal_cnt <= jal_cnt + 32'h1;	// bpu.scala:220:27, :229:28
      if (io_PF_valid & _T_12 & ~io_ID_to_BPU_bus_bits_load_use_stall)	// bpu.scala:142:53, :148:30, :231:50
        jalr_cnt <= jalr_cnt + 32'h1;	// bpu.scala:221:27, :229:28, :232:30
      if (io_PF_valid & _B_type_T & ~io_ID_to_BPU_bus_bits_load_use_stall)	// bpu.scala:141:24, :148:30, :234:31
        btype_cnt <= btype_cnt + 32'h1;	// bpu.scala:222:29, :229:28, :235:32
      if (_io_bp_flush_T_1 & ~io_ID_to_BPU_bus_bits_load_use_stall & io_ID_to_BPU_bus_bits_Type ==
                                                2'h2)	// bpu.scala:148:30, :180:49, :213:61, :240:{62,92}
        btype_fail <= btype_fail + 32'h1;	// bpu.scala:223:29, :229:28, :241:34
      if (_io_bp_flush_T_1 & ~io_ID_to_BPU_bus_bits_load_use_stall & io_ID_to_BPU_bus_bits_Type ==
                                                2'h1)	// bpu.scala:148:30, :180:49, :237:{62,92}
        jal_fail <= jal_fail + 32'h1;	// bpu.scala:224:27, :229:28, :238:30
      if (_io_bp_flush_T_1 & ~io_ID_to_BPU_bus_bits_load_use_stall & (&io_ID_to_BPU_bus_bits_Type))	// bpu.scala:148:30, :180:49, :243:{62,92}
        jalr_fail <= jalr_fail + 32'h1;	// bpu.scala:225:28, :229:28, :244:32
      if (_T_31 & _T_32 & ~io_ID_to_BPU_bus_bits_load_use_stall)	// bpu.scala:148:{18,30}, :195:21, :246:55
        hit_cnt <= hit_cnt + 32'h1;	// bpu.scala:226:26, :229:28, :247:28
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:291:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:291:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:291:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_20;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_21;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_22;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_23;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_24;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_25;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_26;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_27;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_28;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_29;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_30;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_31;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_32;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_33;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_34;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_35;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_36;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_37;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_38;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_39;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_40;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_41;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_42;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_43;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_44;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_45;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_46;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_47;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_48;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_49;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_50;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_51;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_52;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_53;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_54;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_55;	// <stdin>:291:10
      automatic logic [31:0] _RANDOM_56;	// <stdin>:291:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:291:10
        `INIT_RANDOM_PROLOG_	// <stdin>:291:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:291:10
        _RANDOM_0 = `RANDOM;	// <stdin>:291:10
        _RANDOM_1 = `RANDOM;	// <stdin>:291:10
        _RANDOM_2 = `RANDOM;	// <stdin>:291:10
        _RANDOM_3 = `RANDOM;	// <stdin>:291:10
        _RANDOM_4 = `RANDOM;	// <stdin>:291:10
        _RANDOM_5 = `RANDOM;	// <stdin>:291:10
        _RANDOM_6 = `RANDOM;	// <stdin>:291:10
        _RANDOM_7 = `RANDOM;	// <stdin>:291:10
        _RANDOM_8 = `RANDOM;	// <stdin>:291:10
        _RANDOM_9 = `RANDOM;	// <stdin>:291:10
        _RANDOM_10 = `RANDOM;	// <stdin>:291:10
        _RANDOM_11 = `RANDOM;	// <stdin>:291:10
        _RANDOM_12 = `RANDOM;	// <stdin>:291:10
        _RANDOM_13 = `RANDOM;	// <stdin>:291:10
        _RANDOM_14 = `RANDOM;	// <stdin>:291:10
        _RANDOM_15 = `RANDOM;	// <stdin>:291:10
        _RANDOM_16 = `RANDOM;	// <stdin>:291:10
        _RANDOM_17 = `RANDOM;	// <stdin>:291:10
        _RANDOM_18 = `RANDOM;	// <stdin>:291:10
        _RANDOM_19 = `RANDOM;	// <stdin>:291:10
        _RANDOM_20 = `RANDOM;	// <stdin>:291:10
        _RANDOM_21 = `RANDOM;	// <stdin>:291:10
        _RANDOM_22 = `RANDOM;	// <stdin>:291:10
        _RANDOM_23 = `RANDOM;	// <stdin>:291:10
        _RANDOM_24 = `RANDOM;	// <stdin>:291:10
        _RANDOM_25 = `RANDOM;	// <stdin>:291:10
        _RANDOM_26 = `RANDOM;	// <stdin>:291:10
        _RANDOM_27 = `RANDOM;	// <stdin>:291:10
        _RANDOM_28 = `RANDOM;	// <stdin>:291:10
        _RANDOM_29 = `RANDOM;	// <stdin>:291:10
        _RANDOM_30 = `RANDOM;	// <stdin>:291:10
        _RANDOM_31 = `RANDOM;	// <stdin>:291:10
        _RANDOM_32 = `RANDOM;	// <stdin>:291:10
        _RANDOM_33 = `RANDOM;	// <stdin>:291:10
        _RANDOM_34 = `RANDOM;	// <stdin>:291:10
        _RANDOM_35 = `RANDOM;	// <stdin>:291:10
        _RANDOM_36 = `RANDOM;	// <stdin>:291:10
        _RANDOM_37 = `RANDOM;	// <stdin>:291:10
        _RANDOM_38 = `RANDOM;	// <stdin>:291:10
        _RANDOM_39 = `RANDOM;	// <stdin>:291:10
        _RANDOM_40 = `RANDOM;	// <stdin>:291:10
        _RANDOM_41 = `RANDOM;	// <stdin>:291:10
        _RANDOM_42 = `RANDOM;	// <stdin>:291:10
        _RANDOM_43 = `RANDOM;	// <stdin>:291:10
        _RANDOM_44 = `RANDOM;	// <stdin>:291:10
        _RANDOM_45 = `RANDOM;	// <stdin>:291:10
        _RANDOM_46 = `RANDOM;	// <stdin>:291:10
        _RANDOM_47 = `RANDOM;	// <stdin>:291:10
        _RANDOM_48 = `RANDOM;	// <stdin>:291:10
        _RANDOM_49 = `RANDOM;	// <stdin>:291:10
        _RANDOM_50 = `RANDOM;	// <stdin>:291:10
        _RANDOM_51 = `RANDOM;	// <stdin>:291:10
        _RANDOM_52 = `RANDOM;	// <stdin>:291:10
        _RANDOM_53 = `RANDOM;	// <stdin>:291:10
        _RANDOM_54 = `RANDOM;	// <stdin>:291:10
        _RANDOM_55 = `RANDOM;	// <stdin>:291:10
        _RANDOM_56 = `RANDOM;	// <stdin>:291:10
        bp_target = {_RANDOM_0, _RANDOM_1};	// bpu.scala:146:28
        jal_cnt = _RANDOM_50;	// bpu.scala:220:27
        jalr_cnt = _RANDOM_51;	// bpu.scala:221:27
        btype_cnt = _RANDOM_52;	// bpu.scala:222:29
        btype_fail = _RANDOM_53;	// bpu.scala:223:29
        jal_fail = _RANDOM_54;	// bpu.scala:224:27
        jalr_fail = _RANDOM_55;	// bpu.scala:225:28
        hit_cnt = _RANDOM_56;	// bpu.scala:226:26
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:291:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:291:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  BPU_Cache BTB (	// bpu.scala:162:21
    .clock        (clock),
    .reset        (reset),
    .io_raddr     (io_PF_pc),
    .io_waddr     (io_ID_to_BPU_bus_bits_PC),
    .io_writeData (io_ID_to_BPU_bus_bits_br_target),
    .io_writeEn   (io_ID_to_BPU_bus_bits_taken & io_ID_to_BPU_bus_valid),	// bpu.scala:167:38
    .io_readData  (_BTB_io_readData),
    .io_hit       (_BTB_io_hit),
    .io_wset      (io_BTB_wset),
    .io_wtag      (io_BTB_wtag),
    .io_rset      (io_BTB_rset),
    .io_rtag      (io_BTB_rtag)
  );
  assign io_bp_taken = _T_5;	// <stdin>:291:10, bpu.scala:195:35
  assign io_bp_flush = _io_bp_flush_T_1;	// <stdin>:291:10, bpu.scala:180:49
  assign io_bp_npc = _io_bp_flush_T_1 ? io_ID_to_BPU_bus_bits_br_target : _T_5 ? _BTB_io_readData :
                _io_bp_npc_T_1;	// <stdin>:291:10, Mux.scala:101:16, bpu.scala:162:21, :180:49, :181:43, :195:35
  assign io_BTB_rdata = _BTB_io_readData;	// <stdin>:291:10, bpu.scala:162:21
  assign io_BTB_wdata = io_ID_to_BPU_bus_bits_taken ? io_ID_to_BPU_bus_bits_br_target : 64'h0;	// <stdin>:291:10, bpu.scala:146:28, :177:29
  assign io_BTB_hit = _BTB_io_hit;	// <stdin>:291:10, bpu.scala:162:21
  assign io_btype_cnt = btype_cnt;	// <stdin>:291:10, bpu.scala:222:29
  assign io_jal_cnt = jal_cnt;	// <stdin>:291:10, bpu.scala:220:27
  assign io_jalr_cnt = jalr_cnt;	// <stdin>:291:10, bpu.scala:221:27
  assign io_btype_fail = btype_fail;	// <stdin>:291:10, bpu.scala:223:29
  assign io_jal_fail = jal_fail;	// <stdin>:291:10, bpu.scala:224:27
  assign io_jalr_fail = jalr_fail;	// <stdin>:291:10, bpu.scala:225:28
  assign io_hit_cnt = hit_cnt;	// <stdin>:291:10, bpu.scala:226:26
endmodule

module IF_pre_fetch(	// <stdin>:1005:10
  input         clock,
                reset,
                io_stall,
  input  [63:0] io_bp_npc,
  input         io_bp_taken,
                io_bp_flush,
                axi_lite_readData_valid,
  input  [63:0] axi_lite_readData_bits_data,
  input  [1:0]  axi_lite_readData_bits_resp,
  input         axi_req_ready,
  output        io_inst_valid,
  output [63:0] io_PF_pc,
                io_PF_npc,
  output        axi_lite_readAddr_valid,
  output [31:0] axi_lite_readAddr_bits_addr,
  output        axi_lite_readData_ready);

  reg [63:0] PF_npc;	// pre_fetch.scala:24:27
  reg        axi_busy;	// pre_fetch.scala:26:27
  reg [63:0] rhsReg;	// tools.scala:15:29
  always @(posedge clock) begin
    if (reset) begin
      PF_npc <= 64'h80000000;	// pre_fetch.scala:24:27
      axi_busy <= 1'h0;	// pre_fetch.scala:26:27
      rhsReg <= 64'h0;	// tools.scala:15:29
    end
    else begin
      automatic logic [63:0] _PF_npc_T_3;	// pre_fetch.scala:40:33
      _PF_npc_T_3 = io_bp_npc + 64'h4;	// pre_fetch.scala:37:33, :40:33
      if (io_bp_flush) begin
        PF_npc <= _PF_npc_T_3;	// pre_fetch.scala:24:27, :40:33
        rhsReg <= io_bp_npc;	// tools.scala:15:29
      end
      else begin
        if (io_stall | ~axi_req_ready | axi_busy) begin	// pre_fetch.scala:26:27, :27:17, :41:37
        end
        else if (io_bp_taken)	// pre_fetch.scala:26:27, :27:17, :41:37
          PF_npc <= _PF_npc_T_3;	// pre_fetch.scala:24:27, :40:33
        else	// pre_fetch.scala:26:27, :27:17, :41:37
          PF_npc <= PF_npc + 64'h4;	// pre_fetch.scala:24:27, :37:33
        if (io_stall | ~axi_req_ready | axi_busy) begin	// pre_fetch.scala:26:27, :27:17, :53:39
        end
        else if (io_bp_taken)	// pre_fetch.scala:26:27, :27:17, :53:39
          rhsReg <= io_bp_npc;	// tools.scala:15:29
        else	// pre_fetch.scala:26:27, :27:17, :53:39
          rhsReg <= PF_npc;	// pre_fetch.scala:24:27, tools.scala:15:29
      end
      axi_busy <= ~axi_req_ready;	// pre_fetch.scala:26:27, :27:17
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1005:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1005:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1005:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1005:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1005:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1005:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1005:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1005:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1005:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1005:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1005:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1005:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1005:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1005:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1005:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1005:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1005:10
        PF_npc = {_RANDOM_0, _RANDOM_1};	// pre_fetch.scala:24:27
        axi_busy = _RANDOM_2[0];	// pre_fetch.scala:26:27
        rhsReg = {_RANDOM_2[31:2], _RANDOM_3, _RANDOM_4[1:0]};	// pre_fetch.scala:26:27, tools.scala:15:29
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1005:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1005:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_inst_valid = axi_lite_readData_valid & axi_lite_readData_bits_resp == 2'h0 & axi_req_ready & ~axi_busy;	// <stdin>:1005:10, pre_fetch.scala:26:27, :81:{96,121,123}
  assign io_PF_pc = rhsReg;	// <stdin>:1005:10, tools.scala:15:29
  assign io_PF_npc = PF_npc;	// <stdin>:1005:10, pre_fetch.scala:24:27
  assign axi_lite_readAddr_valid = ~io_stall;	// <stdin>:1005:10, pre_fetch.scala:70:40
  assign axi_lite_readAddr_bits_addr = io_bp_flush ? io_bp_npc[31:0] : io_stall | ~axi_req_ready | axi_busy ? rhsReg[31:0] :
                io_bp_taken ? io_bp_npc[31:0] : PF_npc[31:0];	// <stdin>:1005:10, Mux.scala:101:16, pre_fetch.scala:24:27, :26:27, :27:17, :71:88, :74:72, tools.scala:15:29
  assign axi_lite_readData_ready = ~io_stall;	// <stdin>:1005:10, pre_fetch.scala:70:40
endmodule

module IFU(	// <stdin>:1088:10
  input         clock,
                reset,
                io_IF_to_ID_bus_ready,
                io_bp_flush,
                io_bp_taken,
  input  [63:0] io_bp_npc,
  input         axi_lite_readData_valid,
  input  [63:0] axi_lite_readData_bits_data,
  input  [1:0]  axi_lite_readData_bits_resp,
  input         axi_req_ready,
  output        io_IF_to_ID_bus_valid,
  output [63:0] io_IF_to_ID_bus_bits_PC,
  output [31:0] io_IF_to_ID_bus_bits_Inst,
  output [63:0] io_PF_npc,
                io_PF_pc,
  output        io_PF_valid,
  output [63:0] io_axidata,
  output        axi_lite_readAddr_valid,
  output [31:0] axi_lite_readAddr_bits_addr,
  output        axi_lite_readData_ready);

  wire        _pre_fetch_io_inst_valid;	// IFU.scala:59:27
  wire [63:0] _pre_fetch_io_PF_pc;	// IFU.scala:59:27
  reg  [63:0] rhsReg;	// tools.scala:32:33
  reg         rhsReg_1;	// tools.scala:32:33
  reg  [63:0] rhsReg_2;	// tools.scala:32:33
  always @(posedge clock) begin
    if (reset | io_bp_flush) begin	// IFU.scala:77:61
      rhsReg <= 64'h0;	// tools.scala:32:33
      rhsReg_1 <= 1'h0;	// <stdin>:1088:10, tools.scala:32:33
      rhsReg_2 <= 64'h0;	// tools.scala:32:33
    end
    else if (io_IF_to_ID_bus_ready) begin	// IFU.scala:77:61
      rhsReg <= _pre_fetch_io_PF_pc;	// IFU.scala:59:27, tools.scala:32:33
      rhsReg_1 <= _pre_fetch_io_inst_valid;	// IFU.scala:59:27, tools.scala:32:33
      rhsReg_2 <= axi_lite_readData_bits_data;	// tools.scala:32:33
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1088:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1088:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1088:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1088:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1088:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1088:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1088:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1088:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1088:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1088:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1088:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1088:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1088:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1088:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1088:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1088:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1088:10
        rhsReg = {_RANDOM_0, _RANDOM_1};	// tools.scala:32:33
        rhsReg_1 = _RANDOM_2[0];	// tools.scala:32:33
        rhsReg_2 = {_RANDOM_2[31:1], _RANDOM_3, _RANDOM_4[0]};	// tools.scala:32:33
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1088:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1088:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  IF_pre_fetch pre_fetch (	// IFU.scala:59:27
    .clock                       (clock),
    .reset                       (reset),
    .io_stall                    (~io_IF_to_ID_bus_ready),	// IFU.scala:75:48
    .io_bp_npc                   (io_bp_npc),
    .io_bp_taken                 (io_bp_taken),
    .io_bp_flush                 (io_bp_flush),
    .axi_lite_readData_valid     (axi_lite_readData_valid),
    .axi_lite_readData_bits_data (axi_lite_readData_bits_data),
    .axi_lite_readData_bits_resp (axi_lite_readData_bits_resp),
    .axi_req_ready               (axi_req_ready),
    .io_inst_valid               (_pre_fetch_io_inst_valid),
    .io_PF_pc                    (_pre_fetch_io_PF_pc),
    .io_PF_npc                   (io_PF_npc),
    .axi_lite_readAddr_valid     (axi_lite_readAddr_valid),
    .axi_lite_readAddr_bits_addr (axi_lite_readAddr_bits_addr),
    .axi_lite_readData_ready     (axi_lite_readData_ready)
  );
  assign io_IF_to_ID_bus_valid = rhsReg_1;	// <stdin>:1088:10, tools.scala:32:33
  assign io_IF_to_ID_bus_bits_PC = rhsReg;	// <stdin>:1088:10, tools.scala:32:33
  assign io_IF_to_ID_bus_bits_Inst = rhsReg_2[31:0];	// <stdin>:1088:10, tools.scala:32:33, :37:17
  assign io_PF_pc = _pre_fetch_io_PF_pc;	// <stdin>:1088:10, IFU.scala:59:27
  assign io_PF_valid = _pre_fetch_io_inst_valid;	// <stdin>:1088:10, IFU.scala:59:27
  assign io_axidata = axi_lite_readData_bits_data;	// <stdin>:1088:10
endmodule

module IDU(	// <stdin>:1149:10
  input         clock,
                reset,
                io_IF_to_ID_bus_valid,
  input  [63:0] io_IF_to_ID_bus_bits_PC,
  input  [31:0] io_IF_to_ID_bus_bits_Inst,
  input  [63:0] io_WB_to_ID_forward_bits_regWriteData,
  input         io_WB_to_ID_forward_bits_regWriteEn,
  input  [4:0]  io_WB_to_ID_forward_bits_regWriteID,
  input  [63:0] io_PMEM_to_ID_forward_bits_ALU_result,
  input         io_PMEM_to_ID_forward_bits_regWriteEn,
  input  [4:0]  io_PMEM_to_ID_forward_bits_regWriteID,
  input         io_PMEM_to_ID_forward_bits_memReadEn,
  input  [63:0] io_MEM_to_ID_forward_bits_regWriteData,
  input         io_MEM_to_ID_forward_bits_regWriteEn,
  input  [4:0]  io_MEM_to_ID_forward_bits_regWriteID,
  input  [63:0] io_EX_ALUResult,
  output        io_IF_to_ID_bus_ready,
                io_ID_to_EX_bus_valid,
  output [63:0] io_ID_to_EX_bus_bits_ALU_Data1,
                io_ID_to_EX_bus_bits_ALU_Data2,
  output        io_ID_to_EX_bus_bits_futype,
  output [4:0]  io_ID_to_EX_bus_bits_optype,
  output [63:0] io_ID_to_EX_bus_bits_rs1_data,
                io_ID_to_EX_bus_bits_rs2_data,
  output [4:0]  io_ID_to_EX_bus_bits_regWriteID,
  output        io_ID_to_EX_bus_bits_regWriteEn,
                io_ID_to_EX_bus_bits_memWriteEn,
                io_ID_to_EX_bus_bits_memReadEn,
  output [63:0] io_ID_to_EX_bus_bits_PC,
  output [31:0] io_ID_to_EX_bus_bits_Inst,
  output        io_ID_to_BPU_bus_valid,
  output [63:0] io_ID_to_BPU_bus_bits_PC,
  output        io_ID_to_BPU_bus_bits_taken,
  output [63:0] io_ID_to_BPU_bus_bits_br_target,
  output        io_ID_to_BPU_bus_bits_load_use_stall,
  output [1:0]  io_ID_to_BPU_bus_bits_Type,
  output        io_ID_stall,
  output [63:0] io_ID_GPR_0,
                io_ID_GPR_1,
                io_ID_GPR_2,
                io_ID_GPR_3,
                io_ID_GPR_4,
                io_ID_GPR_5,
                io_ID_GPR_6,
                io_ID_GPR_7,
                io_ID_GPR_8,
                io_ID_GPR_9,
                io_ID_GPR_10,
                io_ID_GPR_11,
                io_ID_GPR_12,
                io_ID_GPR_13,
                io_ID_GPR_14,
                io_ID_GPR_15,
                io_ID_GPR_16,
                io_ID_GPR_17,
                io_ID_GPR_18,
                io_ID_GPR_19,
                io_ID_GPR_20,
                io_ID_GPR_21,
                io_ID_GPR_22,
                io_ID_GPR_23,
                io_ID_GPR_24,
                io_ID_GPR_25,
                io_ID_GPR_26,
                io_ID_GPR_27,
                io_ID_GPR_28,
                io_ID_GPR_29,
                io_ID_GPR_30,
                io_ID_GPR_31,
  output        io_ID_unknown_inst);

  reg               rhsReg_5;	// tools.scala:23:33
  reg  [4:0]        rhsReg_4;	// tools.scala:23:33
  wire              _InstInfo_T_1 = io_IF_to_ID_bus_bits_Inst == 32'h100073;	// Lookup.scala:31:38
  wire              _InstInfo_T_3 = io_IF_to_ID_bus_bits_Inst[6:0] == 7'h17;	// Lookup.scala:31:38
  wire              _InstInfo_T_5 = io_IF_to_ID_bus_bits_Inst[6:0] == 7'h37;	// Lookup.scala:31:38
  wire [9:0]        _GEN = {io_IF_to_ID_bus_bits_Inst[14:12], io_IF_to_ID_bus_bits_Inst[6:0]};	// Lookup.scala:31:38
  wire              _InstInfo_T_7 = _GEN == 10'h13;	// Lookup.scala:31:38
  wire [15:0]       _GEN_0 = {io_IF_to_ID_bus_bits_Inst[31:26], io_IF_to_ID_bus_bits_Inst[14:12],
                io_IF_to_ID_bus_bits_Inst[6:0]};	// Lookup.scala:31:38
  wire              _InstInfo_T_9 = _GEN_0 == 16'h93;	// Lookup.scala:31:38
  wire              _InstInfo_T_11 = _GEN_0 == 16'h293;	// Lookup.scala:31:38
  wire              _InstInfo_T_13 = _GEN_0 == 16'h4293;	// Lookup.scala:31:38
  wire              _InstInfo_T_15 = _GEN == 10'h67;	// Lookup.scala:31:38
  wire              _InstInfo_T_17 = _GEN == 10'h213;	// Lookup.scala:31:38
  wire              _InstInfo_T_19 = _GEN == 10'h313;	// Lookup.scala:31:38
  wire              _InstInfo_T_21 = _GEN == 10'h393;	// Lookup.scala:31:38
  wire              _InstInfo_T_23 = _GEN == 10'h113;	// Lookup.scala:31:38
  wire              _InstInfo_T_25 = _GEN == 10'h193;	// Lookup.scala:31:38
  wire              _InstInfo_T_27 = _GEN == 10'h1B;	// Lookup.scala:31:38
  wire [16:0]       _GEN_1 = {io_IF_to_ID_bus_bits_Inst[31:25], io_IF_to_ID_bus_bits_Inst[14:12],
                io_IF_to_ID_bus_bits_Inst[6:0]};	// Lookup.scala:31:38
  wire              _InstInfo_T_29 = _GEN_1 == 17'h9B;	// Lookup.scala:31:38
  wire              _InstInfo_T_31 = _GEN_1 == 17'h29B;	// Lookup.scala:31:38
  wire              _InstInfo_T_33 = _GEN_1 == 17'h829B;	// Lookup.scala:31:38
  wire              _InstInfo_T_35 = _GEN == 10'h3;	// Lookup.scala:31:38
  wire              _InstInfo_T_37 = _GEN == 10'h83;	// Lookup.scala:31:38
  wire              _InstInfo_T_39 = _GEN == 10'h103;	// Lookup.scala:31:38
  wire              _InstInfo_T_41 = _GEN == 10'h183;	// Lookup.scala:31:38
  wire              _InstInfo_T_43 = _GEN == 10'h203;	// Lookup.scala:31:38
  wire              _InstInfo_T_45 = _GEN == 10'h283;	// Lookup.scala:31:38
  wire              _InstInfo_T_47 = _GEN == 10'h303;	// Lookup.scala:31:38
  wire              _InstInfo_T_49 = _GEN == 10'h1A3;	// Lookup.scala:31:38
  wire              _InstInfo_T_51 = _GEN == 10'h123;	// Lookup.scala:31:38
  wire              _InstInfo_T_53 = _GEN == 10'hA3;	// Lookup.scala:31:38
  wire              _InstInfo_T_203 = _GEN == 10'h23;	// Lookup.scala:31:38
  wire              _InstInfo_T_57 = _GEN_1 == 17'h33;	// Lookup.scala:31:38
  wire              _InstInfo_T_59 = _GEN_1 == 17'hB3;	// Lookup.scala:31:38
  wire              _InstInfo_T_61 = _GEN_1 == 17'h8033;	// Lookup.scala:31:38
  wire              _InstInfo_T_63 = _GEN_1 == 17'h233;	// Lookup.scala:31:38
  wire              _InstInfo_T_65 = _GEN_1 == 17'h333;	// Lookup.scala:31:38
  wire              _InstInfo_T_67 = _GEN_1 == 17'h3B3;	// Lookup.scala:31:38
  wire              _InstInfo_T_69 = _GEN_1 == 17'h133;	// Lookup.scala:31:38
  wire              _InstInfo_T_71 = _GEN_1 == 17'h1B3;	// Lookup.scala:31:38
  wire              _InstInfo_T_73 = _GEN_1 == 17'h433;	// Lookup.scala:31:38
  wire              _InstInfo_T_75 = _GEN_1 == 17'h633;	// Lookup.scala:31:38
  wire              _InstInfo_T_77 = _GEN_1 == 17'h6B3;	// Lookup.scala:31:38
  wire              _InstInfo_T_79 = _GEN_1 == 17'h733;	// Lookup.scala:31:38
  wire              _InstInfo_T_81 = _GEN_1 == 17'h7B3;	// Lookup.scala:31:38
  wire              _InstInfo_T_83 = _GEN_1 == 17'h3B;	// Lookup.scala:31:38
  wire              _InstInfo_T_85 = _GEN_1 == 17'h803B;	// Lookup.scala:31:38
  wire              _InstInfo_T_87 = _GEN_1 == 17'hBB;	// Lookup.scala:31:38
  wire              _InstInfo_T_89 = _GEN_1 == 17'h2BB;	// Lookup.scala:31:38
  wire              _InstInfo_T_91 = _GEN_1 == 17'h82BB;	// Lookup.scala:31:38
  wire              _InstInfo_T_93 = _GEN_1 == 17'h43B;	// Lookup.scala:31:38
  wire              _InstInfo_T_95 = _GEN_1 == 17'h63B;	// Lookup.scala:31:38
  wire              _InstInfo_T_97 = _GEN_1 == 17'h6BB;	// Lookup.scala:31:38
  wire              _InstInfo_T_99 = _GEN_1 == 17'h73B;	// Lookup.scala:31:38
  wire              _InstInfo_T_101 = _GEN_1 == 17'h7BB;	// Lookup.scala:31:38
  wire              _InstInfo_T_103 = io_IF_to_ID_bus_bits_Inst[6:0] == 7'h6F;	// Lookup.scala:31:38
  wire              _InstInfo_T_105 = _GEN == 10'h63;	// Lookup.scala:31:38
  wire              _InstInfo_T_107 = _GEN == 10'hE3;	// Lookup.scala:31:38
  wire              _InstInfo_T_109 = _GEN == 10'h263;	// Lookup.scala:31:38
  wire              _InstInfo_T_111 = _GEN == 10'h363;	// Lookup.scala:31:38
  wire              _InstInfo_T_113 = _GEN == 10'h2E3;	// Lookup.scala:31:38
  wire              _InstInfo_T_230 = _GEN == 10'h3E3;	// Lookup.scala:31:38
  wire              _GEN_2 = _InstInfo_T_57 | _InstInfo_T_59 | _InstInfo_T_61 | _InstInfo_T_63 | _InstInfo_T_65 |
                _InstInfo_T_67 | _InstInfo_T_69 | _InstInfo_T_71 | _InstInfo_T_73 | _InstInfo_T_75 |
                _InstInfo_T_77 | _InstInfo_T_79 | _InstInfo_T_81 | _InstInfo_T_83 | _InstInfo_T_85 |
                _InstInfo_T_87 | _InstInfo_T_89 | _InstInfo_T_91 | _InstInfo_T_93 | _InstInfo_T_95 |
                _InstInfo_T_97 | _InstInfo_T_99 | _InstInfo_T_101;	// Lookup.scala:31:38, :34:39
  wire [2:0]        InstInfo_0 = _InstInfo_T_1 ? 3'h7 : _InstInfo_T_3 | _InstInfo_T_5 ? 3'h3 : _InstInfo_T_7 | _InstInfo_T_9
                | _InstInfo_T_11 | _InstInfo_T_13 | _InstInfo_T_15 | _InstInfo_T_17 | _InstInfo_T_19 |
                _InstInfo_T_21 | _InstInfo_T_23 | _InstInfo_T_25 | _InstInfo_T_27 | _InstInfo_T_29 |
                _InstInfo_T_31 | _InstInfo_T_33 | _InstInfo_T_35 | _InstInfo_T_37 | _InstInfo_T_39 |
                _InstInfo_T_41 | _InstInfo_T_43 | _InstInfo_T_45 | _InstInfo_T_47 ? 3'h1 : _InstInfo_T_49 |
                _InstInfo_T_51 | _InstInfo_T_53 | _InstInfo_T_203 ? 3'h4 : _GEN_2 ? 3'h2 : _InstInfo_T_103
                ? 3'h5 : _InstInfo_T_105 | _InstInfo_T_107 | _InstInfo_T_109 | _InstInfo_T_111 |
                _InstInfo_T_113 | _InstInfo_T_230 ? 3'h6 : 3'h0;	// Lookup.scala:31:38, :34:39
  wire              InstInfo_1 = ~_InstInfo_T_1 & ~_InstInfo_T_3 & ~_InstInfo_T_5 & ~_InstInfo_T_7 & ~_InstInfo_T_9 &
                ~_InstInfo_T_11 & ~_InstInfo_T_13 & ~_InstInfo_T_15 & ~_InstInfo_T_17 & ~_InstInfo_T_19 &
                ~_InstInfo_T_21 & ~_InstInfo_T_23 & ~_InstInfo_T_25 & ~_InstInfo_T_27 & ~_InstInfo_T_29 &
                ~_InstInfo_T_31 & ~_InstInfo_T_33 & (_InstInfo_T_35 | _InstInfo_T_37 | _InstInfo_T_39 |
                _InstInfo_T_41 | _InstInfo_T_43 | _InstInfo_T_45 | _InstInfo_T_47 | _InstInfo_T_49 |
                _InstInfo_T_51 | _InstInfo_T_53 | _InstInfo_T_203);	// Lookup.scala:31:38, :34:39
  wire              _GEN_3 = _InstInfo_T_17 | _InstInfo_T_19 | _InstInfo_T_21 | _InstInfo_T_23 | _InstInfo_T_25 |
                _InstInfo_T_27 | _InstInfo_T_29 | _InstInfo_T_31 | _InstInfo_T_33 | _InstInfo_T_35 |
                _InstInfo_T_37 | _InstInfo_T_39 | _InstInfo_T_41 | _InstInfo_T_43 | _InstInfo_T_45 |
                _InstInfo_T_47 | _InstInfo_T_49 | _InstInfo_T_51 | _InstInfo_T_53 | _InstInfo_T_203 |
                _InstInfo_T_57;	// Lookup.scala:31:38, :34:39
  wire              _GEN_4 = _InstInfo_T_59 | _InstInfo_T_61 | _InstInfo_T_63 | _InstInfo_T_65 | _InstInfo_T_67 |
                _InstInfo_T_69 | _InstInfo_T_71 | _InstInfo_T_73 | _InstInfo_T_75 | _InstInfo_T_77 |
                _InstInfo_T_79 | _InstInfo_T_81 | _InstInfo_T_83 | _InstInfo_T_85 | _InstInfo_T_87 |
                _InstInfo_T_89 | _InstInfo_T_91 | _InstInfo_T_93 | _InstInfo_T_95 | _InstInfo_T_97 |
                _InstInfo_T_99 | _InstInfo_T_101;	// Lookup.scala:31:38, :34:39
  wire [2:0]        InstInfo_2 = _InstInfo_T_1 ? 3'h0 : _InstInfo_T_3 ? 3'h1 : _InstInfo_T_5 ? 3'h0 : _InstInfo_T_7 |
                _InstInfo_T_9 | _InstInfo_T_11 | _InstInfo_T_13 ? 3'h2 : _InstInfo_T_15 ? 3'h6 : _GEN_3 |
                _GEN_4 ? 3'h2 : _InstInfo_T_103 ? 3'h6 : {2'h0, _InstInfo_T_105 | _InstInfo_T_107 |
                _InstInfo_T_109 | _InstInfo_T_111 | _InstInfo_T_113 | _InstInfo_T_230};	// IDU.scala:254:10, Lookup.scala:31:38, :34:39
  wire [2:0]        InstInfo_3 = _InstInfo_T_1 ? 3'h0 : _InstInfo_T_3 | _InstInfo_T_5 | _InstInfo_T_7 ? 3'h4 : _InstInfo_T_9
                | _InstInfo_T_11 | _InstInfo_T_13 ? 3'h5 : _InstInfo_T_15 ? 3'h0 : _InstInfo_T_17 |
                _InstInfo_T_19 | _InstInfo_T_21 | _InstInfo_T_23 | _InstInfo_T_25 | _InstInfo_T_27 ? 3'h4 :
                _InstInfo_T_29 | _InstInfo_T_31 | _InstInfo_T_33 ? 3'h5 : _InstInfo_T_35 | _InstInfo_T_37 |
                _InstInfo_T_39 | _InstInfo_T_41 | _InstInfo_T_43 | _InstInfo_T_45 | _InstInfo_T_47 |
                _InstInfo_T_49 | _InstInfo_T_51 | _InstInfo_T_53 | _InstInfo_T_203 ? 3'h4 : _GEN_2 ? 3'h3 :
                _InstInfo_T_103 ? 3'h0 : _InstInfo_T_105 | _InstInfo_T_107 | _InstInfo_T_109 |
                _InstInfo_T_111 | _InstInfo_T_113 ? 3'h4 : {_InstInfo_T_230, 2'h0};	// IDU.scala:254:10, Lookup.scala:31:38, :34:39
  wire [4:0]        _GEN_5 = {2'h0, _InstInfo_T_103 | _InstInfo_T_105 ? 3'h1 : _InstInfo_T_107 ? 3'h2 : _InstInfo_T_109
                ? 3'h3 : _InstInfo_T_111 ? 3'h4 : _InstInfo_T_113 ? 3'h6 : _InstInfo_T_230 ? 3'h5 : 3'h0};	// IDU.scala:254:10, Lookup.scala:31:38, :34:39
  wire              _GEN_6 = _InstInfo_T_1 | _InstInfo_T_3 | _InstInfo_T_5 | _InstInfo_T_7;	// Lookup.scala:31:38, :34:39
  wire [4:0]        InstInfo_4 = _GEN_6 ? 5'h1 : _InstInfo_T_9 ? 5'h7 : _InstInfo_T_11 ? 5'h8 : _InstInfo_T_13 ? 5'h9 :
                _InstInfo_T_15 ? 5'h1 : _InstInfo_T_17 ? 5'h6 : _InstInfo_T_19 ? 5'h5 : _InstInfo_T_21 ?
                5'h4 : _InstInfo_T_23 ? 5'hA : _InstInfo_T_25 ? 5'hB : _InstInfo_T_27 ? 5'h11 :
                _InstInfo_T_29 ? 5'h13 : _InstInfo_T_31 ? 5'h15 : _InstInfo_T_33 ? 5'h14 : _InstInfo_T_35 ?
                5'h3 : _InstInfo_T_37 ? 5'h5 : _InstInfo_T_39 ? 5'h9 : _InstInfo_T_41 ? 5'h11 :
                _InstInfo_T_43 ? 5'h2 : _InstInfo_T_45 ? 5'h4 : _InstInfo_T_47 ? 5'h8 : _InstInfo_T_49 ?
                5'h10 : _InstInfo_T_51 ? 5'h8 : _InstInfo_T_53 ? 5'h4 : _InstInfo_T_203 ? 5'h2 :
                _InstInfo_T_57 ? 5'h1 : _InstInfo_T_59 ? 5'h7 : _InstInfo_T_61 ? 5'h2 : _InstInfo_T_63 ?
                5'h6 : _InstInfo_T_65 ? 5'h5 : _InstInfo_T_67 ? 5'h4 : _InstInfo_T_69 ? 5'hA :
                _InstInfo_T_71 ? 5'hB : _InstInfo_T_73 ? 5'hC : _InstInfo_T_75 ? 5'hD : _InstInfo_T_77 ?
                5'hE : _InstInfo_T_79 ? 5'hF : _InstInfo_T_81 ? 5'h10 : _InstInfo_T_83 ? 5'h11 :
                _InstInfo_T_85 ? 5'h12 : _InstInfo_T_87 ? 5'h13 : _InstInfo_T_89 ? 5'h15 : _InstInfo_T_91 ?
                5'h14 : _InstInfo_T_93 ? 5'h19 : _InstInfo_T_95 ? 5'h1A : _InstInfo_T_97 ? 5'h1B :
                _InstInfo_T_99 ? 5'h1C : _InstInfo_T_101 ? 5'h1D : _GEN_5;	// IDU.scala:150:28, Lookup.scala:31:38, :34:39
  wire [51:0]       _immI_ret_T_2 = {52{io_IF_to_ID_bus_bits_Inst[31]}};	// Bitwise.scala:77:12, tools.scala:9:34
  reg  [63:0]       GPR_0;	// IDU.scala:116:22
  reg  [63:0]       GPR_1;	// IDU.scala:116:22
  reg  [63:0]       GPR_2;	// IDU.scala:116:22
  reg  [63:0]       GPR_3;	// IDU.scala:116:22
  reg  [63:0]       GPR_4;	// IDU.scala:116:22
  reg  [63:0]       GPR_5;	// IDU.scala:116:22
  reg  [63:0]       GPR_6;	// IDU.scala:116:22
  reg  [63:0]       GPR_7;	// IDU.scala:116:22
  reg  [63:0]       GPR_8;	// IDU.scala:116:22
  reg  [63:0]       GPR_9;	// IDU.scala:116:22
  reg  [63:0]       GPR_10;	// IDU.scala:116:22
  reg  [63:0]       GPR_11;	// IDU.scala:116:22
  reg  [63:0]       GPR_12;	// IDU.scala:116:22
  reg  [63:0]       GPR_13;	// IDU.scala:116:22
  reg  [63:0]       GPR_14;	// IDU.scala:116:22
  reg  [63:0]       GPR_15;	// IDU.scala:116:22
  reg  [63:0]       GPR_16;	// IDU.scala:116:22
  reg  [63:0]       GPR_17;	// IDU.scala:116:22
  reg  [63:0]       GPR_18;	// IDU.scala:116:22
  reg  [63:0]       GPR_19;	// IDU.scala:116:22
  reg  [63:0]       GPR_20;	// IDU.scala:116:22
  reg  [63:0]       GPR_21;	// IDU.scala:116:22
  reg  [63:0]       GPR_22;	// IDU.scala:116:22
  reg  [63:0]       GPR_23;	// IDU.scala:116:22
  reg  [63:0]       GPR_24;	// IDU.scala:116:22
  reg  [63:0]       GPR_25;	// IDU.scala:116:22
  reg  [63:0]       GPR_26;	// IDU.scala:116:22
  reg  [63:0]       GPR_27;	// IDU.scala:116:22
  reg  [63:0]       GPR_28;	// IDU.scala:116:22
  reg  [63:0]       GPR_29;	// IDU.scala:116:22
  reg  [63:0]       GPR_30;	// IDU.scala:116:22
  reg  [63:0]       GPR_31;	// IDU.scala:116:22
  wire              _rs1_data_T = io_IF_to_ID_bus_bits_Inst[19:15] == 5'h0;	// IDU.scala:108:39, :129:19, :133:15
  wire              _load_use_stall_T_5 = rhsReg_4 == io_IF_to_ID_bus_bits_Inst[19:15];	// IDU.scala:129:19, :134:44, tools.scala:23:33
  wire              _rs1_data_T_2 = _load_use_stall_T_5 & rhsReg_5;	// IDU.scala:134:{44,53}, tools.scala:23:33
  wire              _load_use_stall_T_7 = io_PMEM_to_ID_forward_bits_regWriteID == io_IF_to_ID_bus_bits_Inst[19:15];	// IDU.scala:129:19, :135:27
  wire              _rs1_data_T_4 = _load_use_stall_T_7 & io_PMEM_to_ID_forward_bits_regWriteEn;	// IDU.scala:135:{27,36}
  wire              _rs1_data_T_6 = io_MEM_to_ID_forward_bits_regWriteID == io_IF_to_ID_bus_bits_Inst[19:15] &
                io_MEM_to_ID_forward_bits_regWriteEn;	// IDU.scala:129:19, :136:{26,35}
  wire              _rs1_data_T_8 = io_WB_to_ID_forward_bits_regWriteID == io_IF_to_ID_bus_bits_Inst[19:15] &
                io_WB_to_ID_forward_bits_regWriteEn;	// IDU.scala:129:19, :137:{26,35}
  wire [31:0][63:0] _GEN_7 = {{GPR_31}, {GPR_30}, {GPR_29}, {GPR_28}, {GPR_27}, {GPR_26}, {GPR_25}, {GPR_24}, {GPR_23},
                {GPR_22}, {GPR_21}, {GPR_20}, {GPR_19}, {GPR_18}, {GPR_17}, {GPR_16}, {GPR_15}, {GPR_14},
                {GPR_13}, {GPR_12}, {GPR_11}, {GPR_10}, {GPR_9}, {GPR_8}, {GPR_7}, {GPR_6}, {GPR_5},
                {GPR_4}, {GPR_3}, {GPR_2}, {GPR_1}, {GPR_0}};	// IDU.scala:116:22, Mux.scala:101:16
  wire [63:0]       _GEN_8;	// Mux.scala:101:16
  /* synopsys infer_mux_override */
  assign _GEN_8 = _GEN_7[io_IF_to_ID_bus_bits_Inst[19:15]] /* cadence map_to_mux */;	// IDU.scala:129:19, Mux.scala:101:16
  wire [63:0]       _rs1_data_T_13 = _rs1_data_T ? 64'h0 : _rs1_data_T_2 ? io_EX_ALUResult : _rs1_data_T_4 ?
                io_PMEM_to_ID_forward_bits_ALU_result : _rs1_data_T_6 ?
                io_MEM_to_ID_forward_bits_regWriteData : _rs1_data_T_8 ?
                io_WB_to_ID_forward_bits_regWriteData : _GEN_8;	// IDU.scala:116:30, :133:15, :134:53, :135:36, :136:35, :137:35, Mux.scala:101:16
  wire              _rs2_data_T = io_IF_to_ID_bus_bits_Inst[24:20] == 5'h0;	// IDU.scala:108:39, :130:19, :141:15
  wire              _load_use_stall_T_16 = rhsReg_4 == io_IF_to_ID_bus_bits_Inst[24:20];	// IDU.scala:130:19, :142:44, tools.scala:23:33
  wire              _rs2_data_T_2 = _load_use_stall_T_16 & rhsReg_5;	// IDU.scala:142:{44,53}, tools.scala:23:33
  wire              _load_use_stall_T_18 = io_PMEM_to_ID_forward_bits_regWriteID == io_IF_to_ID_bus_bits_Inst[24:20];	// IDU.scala:130:19, :143:27
  wire              _rs2_data_T_4 = _load_use_stall_T_18 & io_PMEM_to_ID_forward_bits_regWriteEn;	// IDU.scala:143:{27,36}
  wire              _rs2_data_T_6 = io_MEM_to_ID_forward_bits_regWriteID == io_IF_to_ID_bus_bits_Inst[24:20] &
                io_MEM_to_ID_forward_bits_regWriteEn;	// IDU.scala:130:19, :144:{26,35}
  wire              _rs2_data_T_8 = io_WB_to_ID_forward_bits_regWriteID == io_IF_to_ID_bus_bits_Inst[24:20] &
                io_WB_to_ID_forward_bits_regWriteEn;	// IDU.scala:130:19, :145:{26,35}
  wire [63:0]       _GEN_9;	// Mux.scala:101:16
  /* synopsys infer_mux_override */
  assign _GEN_9 = _GEN_7[io_IF_to_ID_bus_bits_Inst[24:20]] /* cadence map_to_mux */;	// IDU.scala:130:19, Mux.scala:101:16
  wire [63:0]       _rs2_data_T_13 = _rs2_data_T ? 64'h0 : _rs2_data_T_2 ? io_EX_ALUResult : _rs2_data_T_4 ?
                io_PMEM_to_ID_forward_bits_ALU_result : _rs2_data_T_6 ?
                io_MEM_to_ID_forward_bits_regWriteData : _rs2_data_T_8 ?
                io_WB_to_ID_forward_bits_regWriteData : _GEN_9;	// IDU.scala:116:30, :141:15, :142:53, :143:36, :144:35, :145:35, Mux.scala:101:16
  wire              _io_ID_to_BPU_bus_valid_T_3 = InstInfo_0 == 3'h1;	// IDU.scala:168:19, Lookup.scala:34:39
  wire              _io_ID_to_BPU_bus_valid_T_1 = InstInfo_0 == 3'h6;	// IDU.scala:169:19, Lookup.scala:34:39
  wire              _load_use_stall_T = InstInfo_2 == 3'h2;	// IDU.scala:177:15, Lookup.scala:34:39
  wire              _io_ID_to_BPU_bus_valid_T_4 = InstInfo_2 == 3'h6;	// IDU.scala:178:15, Lookup.scala:34:39
  wire [63:0]       _ALU_Data1_T_5 = io_IF_to_ID_bus_bits_PC + 64'h4;	// IDU.scala:178:30
  wire              _load_use_stall_T_11 = InstInfo_3 == 3'h3;	// IDU.scala:184:15, Lookup.scala:34:39
  wire              _io_ID_to_BPU_bus_valid_T = InstInfo_0 == 3'h5;	// IDU.scala:189:104, Lookup.scala:34:39
  reg  [63:0]       rhsReg;	// tools.scala:23:33
  reg  [31:0]       rhsReg_1;	// tools.scala:23:33
  reg  [63:0]       rhsReg_2;	// tools.scala:23:33
  reg  [63:0]       rhsReg_3;	// tools.scala:23:33
  reg               rhsReg_6;	// tools.scala:23:33
  reg               rhsReg_7;	// tools.scala:23:33
  reg  [4:0]        rhsReg_8;	// tools.scala:23:33
  reg  [1:0]        rhsReg_9;	// tools.scala:23:33
  reg  [63:0]       rhsReg_10;	// tools.scala:23:33
  reg  [63:0]       rhsReg_12;	// tools.scala:23:33
  reg               rhsReg_14;	// tools.scala:23:33
  wire              _load_use_stall_T_22 = (_load_use_stall_T | _io_ID_to_BPU_bus_valid_T_4 | _io_ID_to_BPU_bus_valid_T_1) & (rhsReg_6
                & _load_use_stall_T_5 | io_PMEM_to_ID_forward_bits_memReadEn & _load_use_stall_T_7) |
                (_load_use_stall_T_11 | InstInfo_1 | _io_ID_to_BPU_bus_valid_T_1) & (rhsReg_6 &
                _load_use_stall_T_16 | io_PMEM_to_ID_forward_bits_memReadEn & _load_use_stall_T_18);	// IDU.scala:134:44, :135:27, :142:44, :143:27, :169:19, :177:15, :178:15, :184:15, :222:{43,67}, :223:{46,90}, :224:29, :225:65, :227:{52,76}, :228:{46,90}, :229:29, Lookup.scala:34:39, tools.scala:23:33
  wire              _GEN_10 = InstInfo_4 == 5'h1 ? _rs1_data_T_13 == _rs2_data_T_13 : InstInfo_4 == 5'h2 ? _rs1_data_T_13
                != _rs2_data_T_13 : InstInfo_4 == 5'h3 ? $signed(_rs1_data_T_13) < $signed(_rs2_data_T_13)
                : InstInfo_4 == 5'h6 ? $signed(_rs1_data_T_13) >= $signed(_rs2_data_T_13) : InstInfo_4 ==
                5'h4 ? _rs1_data_T_13 < _rs2_data_T_13 : InstInfo_4 == 5'h5 & _rs1_data_T_13 >=
                _rs2_data_T_13;	// IDU.scala:150:28, :235:13, :236:19, :237:{34,46}, :238:{34,46}, :239:{34,53}, :240:{34,53}, :241:{34,46}, :242:{34,46}, Lookup.scala:34:39, Mux.scala:101:16
  always @(posedge clock) begin
    if (reset) begin
      GPR_0 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_1 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_2 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_3 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_4 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_5 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_6 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_7 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_8 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_9 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_10 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_11 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_12 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_13 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_14 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_15 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_16 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_17 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_18 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_19 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_20 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_21 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_22 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_23 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_24 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_25 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_26 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_27 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_28 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_29 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_30 <= 64'h0;	// IDU.scala:116:{22,30}
      GPR_31 <= 64'h0;	// IDU.scala:116:{22,30}
    end
    else begin
      automatic logic _T_1 = io_WB_to_ID_forward_bits_regWriteEn & (|io_WB_to_ID_forward_bits_regWriteID);	// IDU.scala:148:{24,41}
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h0)	// IDU.scala:108:39, :116:22, :148:24, :149:5, :150:28
        GPR_0 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h1)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_1 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h2)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_2 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h3)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_3 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h4)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_4 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h5)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_5 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h6)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_6 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h7)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_7 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h8)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_8 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h9)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_9 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'hA)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_10 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'hB)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_11 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'hC)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_12 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'hD)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_13 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'hE)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_14 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'hF)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_15 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h10)	// IDU.scala:116:22, :148:24, :149:5, :150:28, Lookup.scala:34:39
        GPR_16 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h11)	// IDU.scala:116:22, :148:24, :149:5, :150:28, Lookup.scala:34:39
        GPR_17 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h12)	// IDU.scala:116:22, :148:24, :149:5, :150:28, Lookup.scala:34:39
        GPR_18 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h13)	// IDU.scala:116:22, :148:24, :149:5, :150:28, Lookup.scala:31:38
        GPR_19 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h14)	// IDU.scala:116:22, :148:24, :149:5, :150:28, Lookup.scala:34:39
        GPR_20 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h15)	// IDU.scala:116:22, :148:24, :149:5, :150:28, Lookup.scala:34:39
        GPR_21 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h16)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_22 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h17)	// IDU.scala:116:22, :148:24, :149:5, :150:28, Lookup.scala:31:38
        GPR_23 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h18)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_24 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h19)	// IDU.scala:116:22, :148:24, :149:5, :150:28, Lookup.scala:34:39
        GPR_25 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h1A)	// IDU.scala:116:22, :148:24, :149:5, :150:28, Lookup.scala:34:39
        GPR_26 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h1B)	// IDU.scala:116:22, :148:24, :149:5, :150:28, Lookup.scala:31:38
        GPR_27 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h1C)	// IDU.scala:116:22, :148:24, :149:5, :150:28, Lookup.scala:34:39
        GPR_28 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h1D)	// IDU.scala:116:22, :148:24, :149:5, :150:28, Lookup.scala:34:39
        GPR_29 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h1E)	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_30 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
      if (_T_1 & (&io_WB_to_ID_forward_bits_regWriteID))	// IDU.scala:116:22, :148:24, :149:5, :150:28
        GPR_31 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:116:22
    end
    if (reset | _load_use_stall_T_22 | ~io_IF_to_ID_bus_valid) begin	// IDU.scala:194:{48,50}, :225:65
      rhsReg <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
      rhsReg_1 <= 32'h0;	// Mux.scala:101:16, tools.scala:23:33
      rhsReg_2 <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
      rhsReg_3 <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
      rhsReg_4 <= 5'h0;	// IDU.scala:108:39, tools.scala:23:33
      rhsReg_5 <= 1'h0;	// Lookup.scala:34:39, tools.scala:23:33
      rhsReg_6 <= 1'h0;	// Lookup.scala:34:39, tools.scala:23:33
      rhsReg_7 <= 1'h0;	// Lookup.scala:34:39, tools.scala:23:33
      rhsReg_8 <= 5'h0;	// IDU.scala:108:39, tools.scala:23:33
      rhsReg_9 <= 2'h0;	// IDU.scala:254:10, tools.scala:23:33
      rhsReg_10 <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
      rhsReg_12 <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
      rhsReg_14 <= 1'h0;	// Lookup.scala:34:39, tools.scala:23:33
    end
    else begin	// IDU.scala:194:{48,50}, :225:65
      automatic logic _regWriteEn_T_3;	// IDU.scala:170:19
      automatic logic _memWriteEn_T;	// IDU.scala:171:19
      _regWriteEn_T_3 = InstInfo_0 == 3'h3;	// IDU.scala:170:19, Lookup.scala:34:39
      _memWriteEn_T = InstInfo_0 == 3'h4;	// IDU.scala:171:19, Lookup.scala:34:39
      rhsReg <= io_IF_to_ID_bus_bits_PC;	// tools.scala:23:33
      rhsReg_1 <= io_IF_to_ID_bus_bits_Inst;	// tools.scala:23:33
      if (InstInfo_2 == 3'h0)	// IDU.scala:175:15, Lookup.scala:34:39
        rhsReg_2 <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
      else if (InstInfo_2 == 3'h1)	// IDU.scala:175:15, :176:15, Lookup.scala:34:39
        rhsReg_2 <= io_IF_to_ID_bus_bits_PC;	// tools.scala:23:33
      else if (_load_use_stall_T) begin	// IDU.scala:175:15, :176:15, :177:15, Lookup.scala:34:39
        if (_rs1_data_T)	// IDU.scala:133:15
          rhsReg_2 <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
        else if (_rs1_data_T_2)	// IDU.scala:133:15, :134:53
          rhsReg_2 <= io_EX_ALUResult;	// tools.scala:23:33
        else if (_rs1_data_T_4)	// IDU.scala:133:15, :134:53, :135:36
          rhsReg_2 <= io_PMEM_to_ID_forward_bits_ALU_result;	// tools.scala:23:33
        else if (_rs1_data_T_6)	// IDU.scala:133:15, :134:53, :135:36, :136:35
          rhsReg_2 <= io_MEM_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
        else if (_rs1_data_T_8)	// IDU.scala:133:15, :134:53, :135:36, :136:35, :137:35
          rhsReg_2 <= io_WB_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
        else	// IDU.scala:133:15, :134:53, :135:36, :136:35, :137:35
          rhsReg_2 <= _GEN_8;	// Mux.scala:101:16, tools.scala:23:33
      end
      else if (_io_ID_to_BPU_bus_valid_T_4)	// IDU.scala:175:15, :176:15, :177:15, :178:15, Lookup.scala:34:39
        rhsReg_2 <= _ALU_Data1_T_5;	// IDU.scala:178:30, tools.scala:23:33
      else	// IDU.scala:175:15, :176:15, :177:15, :178:15, Lookup.scala:34:39
        rhsReg_2 <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
      if (InstInfo_3 == 3'h0)	// IDU.scala:182:15, Lookup.scala:34:39
        rhsReg_3 <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
      else if (InstInfo_3 == 3'h1)	// IDU.scala:182:15, :183:15, Lookup.scala:34:39
        rhsReg_3 <= io_IF_to_ID_bus_bits_PC;	// tools.scala:23:33
      else if (_load_use_stall_T_11) begin	// IDU.scala:182:15, :183:15, :184:15, Lookup.scala:34:39
        if (_rs2_data_T)	// IDU.scala:141:15
          rhsReg_3 <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
        else if (_rs2_data_T_2)	// IDU.scala:141:15, :142:53
          rhsReg_3 <= io_EX_ALUResult;	// tools.scala:23:33
        else if (_rs2_data_T_4)	// IDU.scala:141:15, :142:53, :143:36
          rhsReg_3 <= io_PMEM_to_ID_forward_bits_ALU_result;	// tools.scala:23:33
        else if (_rs2_data_T_6)	// IDU.scala:141:15, :142:53, :143:36, :144:35
          rhsReg_3 <= io_MEM_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
        else if (_rs2_data_T_8)	// IDU.scala:141:15, :142:53, :143:36, :144:35, :145:35
          rhsReg_3 <= io_WB_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
        else	// IDU.scala:141:15, :142:53, :143:36, :144:35, :145:35
          rhsReg_3 <= _GEN_9;	// Mux.scala:101:16, tools.scala:23:33
      end
      else if (InstInfo_3 == 3'h4) begin	// IDU.scala:182:15, :183:15, :184:15, :185:15, Lookup.scala:34:39
        if (_io_ID_to_BPU_bus_valid_T_3)	// IDU.scala:168:19
          rhsReg_3 <= {_immI_ret_T_2, io_IF_to_ID_bus_bits_Inst[31:20]};	// Bitwise.scala:77:12, Cat.scala:33:92, IDU.scala:106:25, tools.scala:23:33
        else if (_io_ID_to_BPU_bus_valid_T_1)	// IDU.scala:168:19, :169:19
          rhsReg_3 <= {{53{io_IF_to_ID_bus_bits_Inst[31]}}, io_IF_to_ID_bus_bits_Inst[7],
                                                                                io_IF_to_ID_bus_bits_Inst[30:25], io_IF_to_ID_bus_bits_Inst[11:8]};	// Cat.scala:33:92, IDU.scala:109:92, :110:{48,72,90}, tools.scala:23:33
        else if (_regWriteEn_T_3)	// IDU.scala:168:19, :169:19, :170:19
          rhsReg_3 <= {{32{io_IF_to_ID_bus_bits_Inst[31]}}, io_IF_to_ID_bus_bits_Inst[31:12], 12'h0};	// IDU.scala:107:{10,25,39}, tools.scala:9:34, :23:33
        else if (_memWriteEn_T)	// IDU.scala:168:19, :169:19, :170:19, :171:19
          rhsReg_3 <= {{52{io_IF_to_ID_bus_bits_Inst[31]}}, io_IF_to_ID_bus_bits_Inst[31:25],
                                                                                io_IF_to_ID_bus_bits_Inst[11:7]};	// IDU.scala:108:{10,26,54}, tools.scala:9:34, :23:33
        else	// IDU.scala:168:19, :169:19, :170:19, :171:19
          rhsReg_3 <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
      end
      else	// IDU.scala:182:15, :183:15, :184:15, :185:15, Lookup.scala:34:39
        rhsReg_3 <= {58'h0, InstInfo_3 == 3'h5 ? io_IF_to_ID_bus_bits_Inst[25:20] : 6'h0};	// IDU.scala:111:21, :186:15, Lookup.scala:34:39, Mux.scala:101:16, tools.scala:23:33
      rhsReg_4 <= io_IF_to_ID_bus_bits_Inst[11:7];	// IDU.scala:108:54, tools.scala:23:33
      rhsReg_5 <= InstInfo_0 == 3'h2 | _io_ID_to_BPU_bus_valid_T_3 | _regWriteEn_T_3 |
                                                _io_ID_to_BPU_bus_valid_T;	// IDU.scala:168:19, :170:19, :189:{29,91,104}, Lookup.scala:34:39, tools.scala:23:33
      rhsReg_6 <= _io_ID_to_BPU_bus_valid_T_3 & InstInfo_1;	// IDU.scala:168:19, :191:41, Lookup.scala:34:39, tools.scala:23:33
      rhsReg_7 <= _memWriteEn_T;	// IDU.scala:171:19, tools.scala:23:33
      if (_GEN_6)	// Lookup.scala:34:39
        rhsReg_8 <= 5'h1;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_9)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h7;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_11)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h8;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_13)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h9;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_15)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h1;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_17)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h6;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_19)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h5;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_21)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h4;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_23)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hA;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_25)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hB;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_27)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h11;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_29)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h13;	// Lookup.scala:31:38, tools.scala:23:33
      else if (_InstInfo_T_31)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h15;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_33)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h14;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_35)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h3;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_37)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h5;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_39)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h9;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_41)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h11;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_43)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h2;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_45)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h4;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_47)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h8;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_49)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h10;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_51)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h8;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_53)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h4;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_203)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h2;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_57)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h1;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_59)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h7;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_61)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h2;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_63)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h6;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_65)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h5;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_67)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h4;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_69)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hA;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_71)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hB;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_73)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hC;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_75)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hD;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_77)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hE;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_79)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hF;	// IDU.scala:150:28, tools.scala:23:33
      else if (_InstInfo_T_81)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h10;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_83)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h11;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_85)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h12;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_87)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h13;	// Lookup.scala:31:38, tools.scala:23:33
      else if (_InstInfo_T_89)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h15;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_91)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h14;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_93)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h19;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_95)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h1A;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_97)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h1B;	// Lookup.scala:31:38, tools.scala:23:33
      else if (_InstInfo_T_99)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h1C;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_101)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h1D;	// Lookup.scala:34:39, tools.scala:23:33
      else	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= _GEN_5;	// Lookup.scala:34:39, tools.scala:23:33
      rhsReg_9 <= {1'h0, InstInfo_1};	// IDU.scala:89:21, Lookup.scala:34:39, tools.scala:23:33
      if (_rs1_data_T)	// IDU.scala:133:15
        rhsReg_10 <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
      else if (_rs1_data_T_2)	// IDU.scala:133:15, :134:53
        rhsReg_10 <= io_EX_ALUResult;	// tools.scala:23:33
      else if (_rs1_data_T_4)	// IDU.scala:133:15, :134:53, :135:36
        rhsReg_10 <= io_PMEM_to_ID_forward_bits_ALU_result;	// tools.scala:23:33
      else if (_rs1_data_T_6)	// IDU.scala:133:15, :134:53, :135:36, :136:35
        rhsReg_10 <= io_MEM_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
      else if (_rs1_data_T_8)	// IDU.scala:133:15, :134:53, :135:36, :136:35, :137:35
        rhsReg_10 <= io_WB_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
      else	// IDU.scala:133:15, :134:53, :135:36, :136:35, :137:35
        rhsReg_10 <= _GEN_8;	// Mux.scala:101:16, tools.scala:23:33
      if (_rs2_data_T)	// IDU.scala:141:15
        rhsReg_12 <= 64'h0;	// IDU.scala:116:30, tools.scala:23:33
      else if (_rs2_data_T_2)	// IDU.scala:141:15, :142:53
        rhsReg_12 <= io_EX_ALUResult;	// tools.scala:23:33
      else if (_rs2_data_T_4)	// IDU.scala:141:15, :142:53, :143:36
        rhsReg_12 <= io_PMEM_to_ID_forward_bits_ALU_result;	// tools.scala:23:33
      else if (_rs2_data_T_6)	// IDU.scala:141:15, :142:53, :143:36, :144:35
        rhsReg_12 <= io_MEM_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
      else if (_rs2_data_T_8)	// IDU.scala:141:15, :142:53, :143:36, :144:35, :145:35
        rhsReg_12 <= io_WB_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
      else	// IDU.scala:141:15, :142:53, :143:36, :144:35, :145:35
        rhsReg_12 <= _GEN_9;	// Mux.scala:101:16, tools.scala:23:33
      rhsReg_14 <= io_IF_to_ID_bus_valid & ~_load_use_stall_T_22;	// IDU.scala:211:{79,81}, :225:65, tools.scala:23:33
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1149:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1149:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1149:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_20;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_21;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_22;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_23;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_24;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_25;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_26;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_27;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_28;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_29;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_30;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_31;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_32;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_33;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_34;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_35;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_36;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_37;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_38;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_39;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_40;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_41;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_42;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_43;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_44;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_45;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_46;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_47;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_48;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_49;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_50;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_51;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_52;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_53;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_54;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_55;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_56;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_57;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_58;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_59;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_60;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_61;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_62;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_63;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_64;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_65;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_66;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_67;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_68;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_69;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_70;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_71;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_72;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_73;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_74;	// <stdin>:1149:10
      automatic logic [31:0] _RANDOM_75;	// <stdin>:1149:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1149:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1149:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1149:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_6 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_7 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_8 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_9 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_10 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_11 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_12 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_13 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_14 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_15 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_16 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_17 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_18 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_19 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_20 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_21 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_22 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_23 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_24 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_25 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_26 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_27 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_28 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_29 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_30 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_31 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_32 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_33 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_34 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_35 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_36 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_37 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_38 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_39 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_40 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_41 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_42 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_43 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_44 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_45 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_46 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_47 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_48 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_49 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_50 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_51 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_52 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_53 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_54 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_55 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_56 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_57 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_58 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_59 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_60 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_61 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_62 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_63 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_64 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_65 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_66 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_67 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_68 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_69 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_70 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_71 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_72 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_73 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_74 = `RANDOM;	// <stdin>:1149:10
        _RANDOM_75 = `RANDOM;	// <stdin>:1149:10
        GPR_0 = {_RANDOM_0, _RANDOM_1};	// IDU.scala:116:22
        GPR_1 = {_RANDOM_2, _RANDOM_3};	// IDU.scala:116:22
        GPR_2 = {_RANDOM_4, _RANDOM_5};	// IDU.scala:116:22
        GPR_3 = {_RANDOM_6, _RANDOM_7};	// IDU.scala:116:22
        GPR_4 = {_RANDOM_8, _RANDOM_9};	// IDU.scala:116:22
        GPR_5 = {_RANDOM_10, _RANDOM_11};	// IDU.scala:116:22
        GPR_6 = {_RANDOM_12, _RANDOM_13};	// IDU.scala:116:22
        GPR_7 = {_RANDOM_14, _RANDOM_15};	// IDU.scala:116:22
        GPR_8 = {_RANDOM_16, _RANDOM_17};	// IDU.scala:116:22
        GPR_9 = {_RANDOM_18, _RANDOM_19};	// IDU.scala:116:22
        GPR_10 = {_RANDOM_20, _RANDOM_21};	// IDU.scala:116:22
        GPR_11 = {_RANDOM_22, _RANDOM_23};	// IDU.scala:116:22
        GPR_12 = {_RANDOM_24, _RANDOM_25};	// IDU.scala:116:22
        GPR_13 = {_RANDOM_26, _RANDOM_27};	// IDU.scala:116:22
        GPR_14 = {_RANDOM_28, _RANDOM_29};	// IDU.scala:116:22
        GPR_15 = {_RANDOM_30, _RANDOM_31};	// IDU.scala:116:22
        GPR_16 = {_RANDOM_32, _RANDOM_33};	// IDU.scala:116:22
        GPR_17 = {_RANDOM_34, _RANDOM_35};	// IDU.scala:116:22
        GPR_18 = {_RANDOM_36, _RANDOM_37};	// IDU.scala:116:22
        GPR_19 = {_RANDOM_38, _RANDOM_39};	// IDU.scala:116:22
        GPR_20 = {_RANDOM_40, _RANDOM_41};	// IDU.scala:116:22
        GPR_21 = {_RANDOM_42, _RANDOM_43};	// IDU.scala:116:22
        GPR_22 = {_RANDOM_44, _RANDOM_45};	// IDU.scala:116:22
        GPR_23 = {_RANDOM_46, _RANDOM_47};	// IDU.scala:116:22
        GPR_24 = {_RANDOM_48, _RANDOM_49};	// IDU.scala:116:22
        GPR_25 = {_RANDOM_50, _RANDOM_51};	// IDU.scala:116:22
        GPR_26 = {_RANDOM_52, _RANDOM_53};	// IDU.scala:116:22
        GPR_27 = {_RANDOM_54, _RANDOM_55};	// IDU.scala:116:22
        GPR_28 = {_RANDOM_56, _RANDOM_57};	// IDU.scala:116:22
        GPR_29 = {_RANDOM_58, _RANDOM_59};	// IDU.scala:116:22
        GPR_30 = {_RANDOM_60, _RANDOM_61};	// IDU.scala:116:22
        GPR_31 = {_RANDOM_62, _RANDOM_63};	// IDU.scala:116:22
        rhsReg = {_RANDOM_64, _RANDOM_65};	// tools.scala:23:33
        rhsReg_1 = _RANDOM_66;	// tools.scala:23:33
        rhsReg_2 = {_RANDOM_67, _RANDOM_68};	// tools.scala:23:33
        rhsReg_3 = {_RANDOM_69, _RANDOM_70};	// tools.scala:23:33
        rhsReg_4 = _RANDOM_71[4:0];	// tools.scala:23:33
        rhsReg_5 = _RANDOM_71[5];	// tools.scala:23:33
        rhsReg_6 = _RANDOM_71[6];	// tools.scala:23:33
        rhsReg_7 = _RANDOM_71[7];	// tools.scala:23:33
        rhsReg_8 = _RANDOM_71[12:8];	// tools.scala:23:33
        rhsReg_9 = _RANDOM_71[14:13];	// tools.scala:23:33
        rhsReg_10 = {_RANDOM_71[31:15], _RANDOM_72, _RANDOM_73[14:0]};	// tools.scala:23:33
        rhsReg_12 = {_RANDOM_73[31:20], _RANDOM_74, _RANDOM_75[19:0]};	// tools.scala:23:33
        rhsReg_14 = _RANDOM_75[25];	// tools.scala:23:33
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1149:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1149:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_IF_to_ID_bus_ready = ~_load_use_stall_T_22;	// <stdin>:1149:10, IDU.scala:211:81, :225:65
  assign io_ID_to_EX_bus_valid = rhsReg_14;	// <stdin>:1149:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_ALU_Data1 = rhsReg_2;	// <stdin>:1149:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_ALU_Data2 = rhsReg_3;	// <stdin>:1149:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_futype = rhsReg_9[0];	// <stdin>:1149:10, tools.scala:23:33, :25:17
  assign io_ID_to_EX_bus_bits_optype = rhsReg_8;	// <stdin>:1149:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_rs1_data = rhsReg_10;	// <stdin>:1149:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_rs2_data = rhsReg_12;	// <stdin>:1149:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_regWriteID = rhsReg_4;	// <stdin>:1149:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_regWriteEn = rhsReg_5;	// <stdin>:1149:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_memWriteEn = rhsReg_7;	// <stdin>:1149:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_memReadEn = rhsReg_6;	// <stdin>:1149:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_PC = rhsReg;	// <stdin>:1149:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_Inst = rhsReg_1;	// <stdin>:1149:10, tools.scala:23:33
  assign io_ID_to_BPU_bus_valid = io_IF_to_ID_bus_valid & (_io_ID_to_BPU_bus_valid_T | _io_ID_to_BPU_bus_valid_T_1 |
                _io_ID_to_BPU_bus_valid_T_3 & _io_ID_to_BPU_bus_valid_T_4) & ~_load_use_stall_T_22;	// <stdin>:1149:10, IDU.scala:168:19, :169:19, :178:15, :189:104, :211:81, :225:65, :270:{108,133,152}
  assign io_ID_to_BPU_bus_bits_PC = io_IF_to_ID_bus_bits_PC;	// <stdin>:1149:10
  assign io_ID_to_BPU_bus_bits_taken = _io_ID_to_BPU_bus_valid_T | (_io_ID_to_BPU_bus_valid_T_1 ? _GEN_10 :
                _io_ID_to_BPU_bus_valid_T_3 & _io_ID_to_BPU_bus_valid_T_4);	// <stdin>:1149:10, IDU.scala:168:19, :169:19, :178:15, :189:104, :236:19, :237:34, :246:15, :247:21, :248:31, :249:31, :250:31
  assign io_ID_to_BPU_bus_bits_br_target = _io_ID_to_BPU_bus_valid_T ? io_IF_to_ID_bus_bits_PC + {{44{io_IF_to_ID_bus_bits_Inst[31]}},
                io_IF_to_ID_bus_bits_Inst[19:12], io_IF_to_ID_bus_bits_Inst[20],
                io_IF_to_ID_bus_bits_Inst[30:21], 1'h0} : _io_ID_to_BPU_bus_valid_T_1 & _GEN_10 ?
                io_IF_to_ID_bus_bits_PC + {{52{io_IF_to_ID_bus_bits_Inst[31]}},
                io_IF_to_ID_bus_bits_Inst[7], io_IF_to_ID_bus_bits_Inst[30:25],
                io_IF_to_ID_bus_bits_Inst[11:8], 1'h0} : _io_ID_to_BPU_bus_valid_T_3 &
                _io_ID_to_BPU_bus_valid_T_4 ? _rs1_data_T_13 + {_immI_ret_T_2,
                io_IF_to_ID_bus_bits_Inst[31:20]} : {32'h0, _ALU_Data1_T_5[31:0]};	// <stdin>:1149:10, Bitwise.scala:77:12, IDU.scala:106:25, :109:{25,44,66,92}, :110:{48,72,90}, :168:19, :169:19, :178:{15,30}, :189:104, :236:19, :237:34, :262:13, :264:37, :265:{31,50}, :266:{31,58}, Lookup.scala:34:39, Mux.scala:101:16
  assign io_ID_to_BPU_bus_bits_load_use_stall = _load_use_stall_T_22;	// <stdin>:1149:10, IDU.scala:225:65
  assign io_ID_to_BPU_bus_bits_Type = _io_ID_to_BPU_bus_valid_T ? 2'h1 : _io_ID_to_BPU_bus_valid_T_1 ? 2'h2 :
                _io_ID_to_BPU_bus_valid_T_3 ? {2{_io_ID_to_BPU_bus_valid_T_4}} : 2'h0;	// <stdin>:1149:10, IDU.scala:168:19, :169:19, :178:15, :189:104, :254:10, :255:21, :256:27, :257:27, :258:{27,33}, Lookup.scala:34:39
  assign io_ID_stall = _load_use_stall_T_22;	// <stdin>:1149:10, IDU.scala:225:65
  assign io_ID_GPR_0 = GPR_0;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_1 = GPR_1;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_2 = GPR_2;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_3 = GPR_3;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_4 = GPR_4;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_5 = GPR_5;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_6 = GPR_6;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_7 = GPR_7;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_8 = GPR_8;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_9 = GPR_9;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_10 = GPR_10;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_11 = GPR_11;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_12 = GPR_12;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_13 = GPR_13;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_14 = GPR_14;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_15 = GPR_15;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_16 = GPR_16;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_17 = GPR_17;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_18 = GPR_18;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_19 = GPR_19;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_20 = GPR_20;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_21 = GPR_21;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_22 = GPR_22;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_23 = GPR_23;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_24 = GPR_24;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_25 = GPR_25;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_26 = GPR_26;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_27 = GPR_27;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_28 = GPR_28;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_29 = GPR_29;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_30 = GPR_30;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_GPR_31 = GPR_31;	// <stdin>:1149:10, IDU.scala:116:22
  assign io_ID_unknown_inst = InstInfo_0 == 3'h0 & io_IF_to_ID_bus_valid;	// <stdin>:1149:10, IDU.scala:218:{39,47}, Lookup.scala:34:39
endmodule

module EXU(	// <stdin>:1979:10
  input         clock,
                reset,
                io_ID_to_EX_bus_valid,
  input  [63:0] io_ID_to_EX_bus_bits_ALU_Data1,
                io_ID_to_EX_bus_bits_ALU_Data2,
  input         io_ID_to_EX_bus_bits_futype,
  input  [4:0]  io_ID_to_EX_bus_bits_optype,
  input  [63:0] io_ID_to_EX_bus_bits_rs2_data,
  input  [4:0]  io_ID_to_EX_bus_bits_regWriteID,
  input         io_ID_to_EX_bus_bits_regWriteEn,
                io_ID_to_EX_bus_bits_memWriteEn,
                io_ID_to_EX_bus_bits_memReadEn,
  input  [63:0] io_ID_to_EX_bus_bits_PC,
  input  [31:0] io_ID_to_EX_bus_bits_Inst,
  output        io_EX_to_MEM_bus_valid,
  output [31:0] io_EX_to_MEM_bus_bits_Inst,
  output [63:0] io_EX_to_MEM_bus_bits_PC,
                io_EX_to_MEM_bus_bits_ALU_result,
                io_EX_to_MEM_bus_bits_memWriteData,
  output        io_EX_to_MEM_bus_bits_memWriteEn,
                io_EX_to_MEM_bus_bits_memReadEn,
  output [4:0]  io_EX_to_MEM_bus_bits_lsutype,
                io_EX_to_MEM_bus_bits_regWriteID,
  output        io_EX_to_MEM_bus_bits_regWriteEn,
  output [63:0] io_EX_ALUResult_Pass);

  reg  [63:0]       rhsReg;	// tools.scala:15:29
  reg  [31:0]       rhsReg_1;	// tools.scala:15:29
  reg               rhsReg_2;	// tools.scala:15:29
  reg  [4:0]        rhsReg_3;	// tools.scala:15:29
  reg               rhsReg_4;	// tools.scala:15:29
  reg               rhsReg_5;	// tools.scala:15:29
  reg  [63:0]       rhsReg_6;	// tools.scala:15:29
  reg  [63:0]       rhsReg_7;	// tools.scala:15:29
  reg  [4:0]        rhsReg_8;	// tools.scala:15:29
  reg               rhsReg_9;	// tools.scala:15:29
  wire [63:0]       _ALU_result_T_4 = io_ID_to_EX_bus_bits_ALU_Data1 + io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:85:69
  wire [63:0]       _ALU_result_T_7 = io_ID_to_EX_bus_bits_ALU_Data1 - io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:86:43
  wire [63:0]       _ALU_result_T_69 = io_ID_to_EX_bus_bits_ALU_Data1 & io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:87:42
  wire [63:0]       _ALU_result_T_67 = io_ID_to_EX_bus_bits_ALU_Data1 | io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:88:42
  wire [63:0]       _ALU_result_T_65 = io_ID_to_EX_bus_bits_ALU_Data1 ^ io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:89:42
  wire [126:0]      _ALU_result_T_15 = {63'h0, io_ID_to_EX_bus_bits_ALU_Data1} << io_ID_to_EX_bus_bits_ALU_Data2[5:0];	// EXU.scala:62:23, :90:41, tools.scala:15:29
  wire [63:0]       _GEN = {58'h0, io_ID_to_EX_bus_bits_ALU_Data2[5:0]};	// EXU.scala:62:23, :91:41
  wire [63:0]       _GEN_0 = io_ID_to_EX_bus_bits_ALU_Data1 * io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:95:41
  wire [64:0]       _GEN_1 = {io_ID_to_EX_bus_bits_ALU_Data1[63], io_ID_to_EX_bus_bits_ALU_Data1};	// EXU.scala:96:49
  wire [64:0]       _GEN_2 = {io_ID_to_EX_bus_bits_ALU_Data2[63], io_ID_to_EX_bus_bits_ALU_Data2};	// EXU.scala:96:49
  wire [64:0]       _ALU_result_T_33 = $signed(_GEN_1) / $signed(_GEN_2);	// EXU.scala:96:49
  wire [63:0]       _ALU_result_T_78 = io_ID_to_EX_bus_bits_ALU_Data1 / io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:97:41
  wire [63:0]       _ALU_result_T_85 = io_ID_to_EX_bus_bits_ALU_Data1 % io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:99:41
  wire [62:0]       _ALU_result_T_53 = {31'h0, io_ID_to_EX_bus_bits_ALU_Data1[31:0]} << io_ID_to_EX_bus_bits_ALU_Data2[4:0];	// EXU.scala:102:{46,54,62}, tools.scala:15:29
  wire [31:0]       _GEN_3 = {27'h0, io_ID_to_EX_bus_bits_ALU_Data2[4:0]};	// EXU.scala:102:62, :103:54
  wire [31:0]       _ALU_result_ret_T_18 = io_ID_to_EX_bus_bits_ALU_Data1[31:0] >> _GEN_3;	// EXU.scala:102:46, :103:54
  wire [31:0]       _ALU_result_T_62 = $signed($signed(io_ID_to_EX_bus_bits_ALU_Data1[31:0]) >>> _GEN_3);	// EXU.scala:102:46, :103:54, :104:62
  wire [64:0]       _ALU_result_T_75 = $signed(_GEN_1) / $signed(_GEN_2);	// EXU.scala:96:49, :109:55
  wire [63:0]       _ALU_result_T_82 = $signed(io_ID_to_EX_bus_bits_ALU_Data1) % $signed(io_ID_to_EX_bus_bits_ALU_Data2);	// EXU.scala:111:55
  wire [31:0][63:0] _GEN_4 = {{64'h0}, {64'h0}, {{{32{_ALU_result_T_85[31]}}, _ALU_result_T_85[31:0]}},
                {{{32{_ALU_result_T_82[31]}}, _ALU_result_T_82[31:0]}}, {{{32{_ALU_result_T_78[31]}},
                _ALU_result_T_78[31:0]}}, {{{32{_ALU_result_T_75[31]}}, _ALU_result_T_75[31:0]}},
                {{{32{_GEN_0[31]}}, _GEN_0[31:0]}}, {{{32{_ALU_result_T_69[31]}}, _ALU_result_T_69[31:0]}},
                {{{32{_ALU_result_T_67[31]}}, _ALU_result_T_67[31:0]}}, {{{32{_ALU_result_T_65[31]}},
                _ALU_result_T_65[31:0]}}, {{{32{_ALU_result_ret_T_18[31]}}, _ALU_result_ret_T_18}},
                {{{32{_ALU_result_T_62[31]}}, _ALU_result_T_62}}, {{{32{_ALU_result_T_53[31]}},
                _ALU_result_T_53[31:0]}}, {{{32{_ALU_result_T_7[31]}}, _ALU_result_T_7[31:0]}},
                {{{32{_ALU_result_T_4[31]}}, _ALU_result_T_4[31:0]}}, {_ALU_result_T_85},
                {$signed(io_ID_to_EX_bus_bits_ALU_Data1) % $signed(io_ID_to_EX_bus_bits_ALU_Data2)},
                {_ALU_result_T_78}, {_ALU_result_T_33[63:0]}, {_GEN_0}, {{63'h0,
                io_ID_to_EX_bus_bits_ALU_Data1 < io_ID_to_EX_bus_bits_ALU_Data2}}, {{63'h0,
                $signed(io_ID_to_EX_bus_bits_ALU_Data1) < $signed(io_ID_to_EX_bus_bits_ALU_Data2)}},
                {$signed($signed(io_ID_to_EX_bus_bits_ALU_Data1) >>> _GEN)},
                {io_ID_to_EX_bus_bits_ALU_Data1 >> _GEN}, {_ALU_result_T_15[63:0]}, {_ALU_result_T_65},
                {_ALU_result_T_67}, {_ALU_result_T_69}, {64'h0}, {_ALU_result_T_7}, {64'h0}, {64'h0}};	// Bitwise.scala:77:12, Cat.scala:33:92, EXU.scala:85:69, :86:{18,43}, :87:{17,42}, :88:{17,42}, :89:{17,42}, :90:{17,41}, :91:{17,41}, :92:{17,49}, :93:{17,42}, :94:{17,49}, :95:{17,41}, :96:{17,49}, :97:{17,41}, :98:{17,49}, :99:{17,41}, :100:17, :101:17, :102:{17,54}, :103:{17,54}, :104:{17,62}, :105:17, :106:17, :107:17, :108:17, :109:{17,55}, :110:17, :111:{17,55}, :112:17, Mux.scala:101:16, tools.scala:9:{34,45}, :15:29
  wire [63:0]       _GEN_5 = io_ID_to_EX_bus_bits_optype == 5'h1 | io_ID_to_EX_bus_bits_futype ? _ALU_result_T_4 :
                _GEN_4[io_ID_to_EX_bus_bits_optype];	// EXU.scala:85:{18,31,69}, :86:18, :87:17, :88:17, :89:17, :90:17, :91:17, :92:17, :93:17, :94:17, :95:17, :96:17, :97:17, :98:17, :99:17, :100:17, :101:17, :102:17, :103:17, :104:17, :105:17, :106:17, :107:17, :108:17, :109:17, :110:17, :111:17, :112:17, Mux.scala:101:16
  always @(posedge clock) begin
    if (reset) begin
      rhsReg <= 64'h0;	// Mux.scala:101:16, tools.scala:15:29
      rhsReg_1 <= 32'h0;	// Bitwise.scala:77:12, tools.scala:15:29
      rhsReg_2 <= 1'h0;	// EXU.scala:58:22, tools.scala:15:29
      rhsReg_3 <= 5'h0;	// EXU.scala:58:22, tools.scala:15:29
      rhsReg_4 <= 1'h0;	// EXU.scala:58:22, tools.scala:15:29
      rhsReg_5 <= 1'h0;	// EXU.scala:58:22, tools.scala:15:29
      rhsReg_6 <= 64'h0;	// Mux.scala:101:16, tools.scala:15:29
      rhsReg_7 <= 64'h0;	// Mux.scala:101:16, tools.scala:15:29
      rhsReg_8 <= 5'h0;	// EXU.scala:58:22, tools.scala:15:29
      rhsReg_9 <= 1'h0;	// EXU.scala:58:22, tools.scala:15:29
    end
    else begin
      rhsReg <= io_ID_to_EX_bus_bits_PC;	// tools.scala:15:29
      rhsReg_1 <= io_ID_to_EX_bus_bits_Inst;	// tools.scala:15:29
      rhsReg_2 <= io_ID_to_EX_bus_bits_regWriteEn;	// tools.scala:15:29
      rhsReg_3 <= io_ID_to_EX_bus_bits_regWriteID;	// tools.scala:15:29
      rhsReg_4 <= io_ID_to_EX_bus_bits_memWriteEn;	// tools.scala:15:29
      rhsReg_5 <= io_ID_to_EX_bus_bits_memReadEn;	// tools.scala:15:29
      rhsReg_6 <= io_ID_to_EX_bus_bits_rs2_data;	// tools.scala:15:29
      rhsReg_7 <= _GEN_5;	// Mux.scala:101:16, tools.scala:15:29
      if (io_ID_to_EX_bus_bits_futype)
        rhsReg_8 <= io_ID_to_EX_bus_bits_optype;	// tools.scala:15:29
      else
        rhsReg_8 <= 5'h0;	// EXU.scala:58:22, tools.scala:15:29
      rhsReg_9 <= io_ID_to_EX_bus_valid;	// tools.scala:15:29
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1979:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1979:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1979:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1979:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1979:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1979:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1979:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1979:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1979:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1979:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:1979:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:1979:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1979:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1979:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1979:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1979:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1979:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1979:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1979:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1979:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1979:10
        _RANDOM_6 = `RANDOM;	// <stdin>:1979:10
        _RANDOM_7 = `RANDOM;	// <stdin>:1979:10
        rhsReg = {_RANDOM_0, _RANDOM_1};	// tools.scala:15:29
        rhsReg_1 = _RANDOM_2;	// tools.scala:15:29
        rhsReg_2 = _RANDOM_3[0];	// tools.scala:15:29
        rhsReg_3 = _RANDOM_3[5:1];	// tools.scala:15:29
        rhsReg_4 = _RANDOM_3[6];	// tools.scala:15:29
        rhsReg_5 = _RANDOM_3[7];	// tools.scala:15:29
        rhsReg_6 = {_RANDOM_3[31:8], _RANDOM_4, _RANDOM_5[7:0]};	// tools.scala:15:29
        rhsReg_7 = {_RANDOM_5[31:8], _RANDOM_6, _RANDOM_7[7:0]};	// tools.scala:15:29
        rhsReg_8 = _RANDOM_7[12:8];	// tools.scala:15:29
        rhsReg_9 = _RANDOM_7[13];	// tools.scala:15:29
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1979:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1979:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_EX_to_MEM_bus_valid = rhsReg_9;	// <stdin>:1979:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_Inst = rhsReg_1;	// <stdin>:1979:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_PC = rhsReg;	// <stdin>:1979:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_ALU_result = rhsReg_7;	// <stdin>:1979:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_memWriteData = rhsReg_6;	// <stdin>:1979:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_memWriteEn = rhsReg_4;	// <stdin>:1979:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_memReadEn = rhsReg_5;	// <stdin>:1979:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_lsutype = rhsReg_8;	// <stdin>:1979:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_regWriteID = rhsReg_3;	// <stdin>:1979:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_regWriteEn = rhsReg_2;	// <stdin>:1979:10, tools.scala:15:29
  assign io_EX_ALUResult_Pass = _GEN_5;	// <stdin>:1979:10, Mux.scala:101:16
endmodule

module MEM_pre_stage(	// <stdin>:2246:10
  input         clock,
                reset,
                io_EX_to_MEM_bus_valid,
  input  [31:0] io_EX_to_MEM_bus_bits_Inst,
  input  [63:0] io_EX_to_MEM_bus_bits_PC,
                io_EX_to_MEM_bus_bits_ALU_result,
                io_EX_to_MEM_bus_bits_memWriteData,
  input         io_EX_to_MEM_bus_bits_memWriteEn,
                io_EX_to_MEM_bus_bits_memReadEn,
  input  [4:0]  io_EX_to_MEM_bus_bits_lsutype,
                io_EX_to_MEM_bus_bits_regWriteID,
  input         io_EX_to_MEM_bus_bits_regWriteEn,
  input  [63:0] axi_lite_readData_bits_data,
  output        io_PMEM_to_MEM_bus_valid,
  output [63:0] io_PMEM_to_MEM_bus_bits_ALU_result,
  output        io_PMEM_to_MEM_bus_bits_regWriteEn,
  output [4:0]  io_PMEM_to_MEM_bus_bits_regWriteID,
  output        io_PMEM_to_MEM_bus_bits_memReadEn,
  output [63:0] io_PMEM_to_MEM_bus_bits_PC,
  output [31:0] io_PMEM_to_MEM_bus_bits_Inst,
  output [63:0] io_PMEM_to_ID_forward_bits_ALU_result,
  output        io_PMEM_to_ID_forward_bits_regWriteEn,
  output [4:0]  io_PMEM_to_ID_forward_bits_regWriteID,
  output        io_PMEM_to_ID_forward_bits_memReadEn,
  output [63:0] io_memReadData,
  output        axi_lite_writeAddr_valid,
  output [31:0] axi_lite_writeAddr_bits_addr,
  output        axi_lite_writeData_valid,
  output [63:0] axi_lite_writeData_bits_data,
  output [7:0]  axi_lite_writeData_bits_strb,
  output        axi_lite_writeResp_ready,
                axi_lite_readAddr_valid,
  output [31:0] axi_lite_readAddr_bits_addr,
  output        axi_lite_readData_ready,
                axi_req_valid);

  reg [4:0]  rhsReg_8;	// tools.scala:15:29
  reg [63:0] rhsReg;	// tools.scala:15:29
  reg [31:0] rhsReg_1;	// tools.scala:15:29
  reg [63:0] rhsReg_2;	// tools.scala:15:29
  reg        rhsReg_3;	// tools.scala:15:29
  reg [4:0]  rhsReg_4;	// tools.scala:15:29
  reg        rhsReg_5;	// tools.scala:15:29
  reg        rhsReg_9;	// tools.scala:15:29
  always @(posedge clock) begin
    if (reset) begin
      rhsReg <= 64'h0;	// PMEM.scala:58:17, tools.scala:15:29
      rhsReg_1 <= 32'h0;	// Bitwise.scala:77:12, tools.scala:15:29
      rhsReg_2 <= 64'h0;	// PMEM.scala:58:17, tools.scala:15:29
      rhsReg_3 <= 1'h0;	// PMEM.scala:47:34, tools.scala:15:29
      rhsReg_4 <= 5'h0;	// PMEM.scala:47:34, tools.scala:15:29
      rhsReg_5 <= 1'h0;	// PMEM.scala:47:34, tools.scala:15:29
      rhsReg_8 <= 5'h0;	// PMEM.scala:47:34, tools.scala:15:29
      rhsReg_9 <= 1'h0;	// PMEM.scala:47:34, tools.scala:15:29
    end
    else begin
      rhsReg <= io_EX_to_MEM_bus_bits_PC;	// tools.scala:15:29
      rhsReg_1 <= io_EX_to_MEM_bus_bits_Inst;	// tools.scala:15:29
      rhsReg_2 <= io_EX_to_MEM_bus_bits_ALU_result;	// tools.scala:15:29
      rhsReg_3 <= io_EX_to_MEM_bus_bits_regWriteEn;	// tools.scala:15:29
      rhsReg_4 <= io_EX_to_MEM_bus_bits_regWriteID;	// tools.scala:15:29
      rhsReg_5 <= io_EX_to_MEM_bus_bits_memReadEn;	// tools.scala:15:29
      rhsReg_8 <= io_EX_to_MEM_bus_bits_lsutype;	// tools.scala:15:29
      rhsReg_9 <= io_EX_to_MEM_bus_valid;	// tools.scala:15:29
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2246:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2246:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2246:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2246:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2246:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2246:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2246:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2246:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2246:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:2246:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:2246:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:2246:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2246:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2246:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2246:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2246:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2246:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2246:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2246:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2246:10
        _RANDOM_5 = `RANDOM;	// <stdin>:2246:10
        _RANDOM_6 = `RANDOM;	// <stdin>:2246:10
        _RANDOM_7 = `RANDOM;	// <stdin>:2246:10
        rhsReg = {_RANDOM_0, _RANDOM_1};	// tools.scala:15:29
        rhsReg_1 = _RANDOM_2;	// tools.scala:15:29
        rhsReg_2 = {_RANDOM_3, _RANDOM_4};	// tools.scala:15:29
        rhsReg_3 = _RANDOM_5[0];	// tools.scala:15:29
        rhsReg_4 = _RANDOM_5[5:1];	// tools.scala:15:29
        rhsReg_5 = _RANDOM_5[6];	// tools.scala:15:29
        rhsReg_8 = _RANDOM_7[12:8];	// tools.scala:15:29
        rhsReg_9 = _RANDOM_7[13];	// tools.scala:15:29
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2246:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2246:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_PMEM_to_MEM_bus_valid = rhsReg_9;	// <stdin>:2246:10, tools.scala:15:29
  assign io_PMEM_to_MEM_bus_bits_ALU_result = rhsReg_2;	// <stdin>:2246:10, tools.scala:15:29
  assign io_PMEM_to_MEM_bus_bits_regWriteEn = rhsReg_3;	// <stdin>:2246:10, tools.scala:15:29
  assign io_PMEM_to_MEM_bus_bits_regWriteID = rhsReg_4;	// <stdin>:2246:10, tools.scala:15:29
  assign io_PMEM_to_MEM_bus_bits_memReadEn = rhsReg_5;	// <stdin>:2246:10, tools.scala:15:29
  assign io_PMEM_to_MEM_bus_bits_PC = rhsReg;	// <stdin>:2246:10, tools.scala:15:29
  assign io_PMEM_to_MEM_bus_bits_Inst = rhsReg_1;	// <stdin>:2246:10, tools.scala:15:29
  assign io_PMEM_to_ID_forward_bits_ALU_result = io_EX_to_MEM_bus_bits_ALU_result;	// <stdin>:2246:10
  assign io_PMEM_to_ID_forward_bits_regWriteEn = io_EX_to_MEM_bus_bits_regWriteEn;	// <stdin>:2246:10
  assign io_PMEM_to_ID_forward_bits_regWriteID = io_EX_to_MEM_bus_bits_regWriteID;	// <stdin>:2246:10
  assign io_PMEM_to_ID_forward_bits_memReadEn = io_EX_to_MEM_bus_bits_memReadEn;	// <stdin>:2246:10
  assign io_memReadData = rhsReg_8 == 5'h11 ? axi_lite_readData_bits_data : rhsReg_8 == 5'h9 ?
                {{32{axi_lite_readData_bits_data[31]}}, axi_lite_readData_bits_data[31:0]} : rhsReg_8 ==
                5'h5 ? {{48{axi_lite_readData_bits_data[15]}}, axi_lite_readData_bits_data[15:0]} :
                rhsReg_8 == 5'h3 ? {{56{axi_lite_readData_bits_data[7]}}, axi_lite_readData_bits_data[7:0]}
                : rhsReg_8 == 5'h8 ? {32'h0, axi_lite_readData_bits_data[31:0]} : rhsReg_8 == 5'h4 ?
                {48'h0, axi_lite_readData_bits_data[15:0]} : rhsReg_8 == 5'h2 ? {56'h0,
                axi_lite_readData_bits_data[7:0]} : 64'h0;	// <stdin>:2246:10, Bitwise.scala:77:12, Cat.scala:33:92, PMEM.scala:50:20, :58:17, :59:44, :60:30, :61:{30,65}, :62:{30,65}, :63:{30,65}, :64:{30,60}, :65:{30,60}, :66:{30,60}, tools.scala:9:34, :15:29
  assign axi_lite_writeAddr_valid = io_EX_to_MEM_bus_bits_memWriteEn;	// <stdin>:2246:10
  assign axi_lite_writeAddr_bits_addr = io_EX_to_MEM_bus_bits_ALU_result[31:0];	// <stdin>:2246:10, PMEM.scala:85:58
  assign axi_lite_writeData_valid = io_EX_to_MEM_bus_bits_memWriteEn;	// <stdin>:2246:10
  assign axi_lite_writeData_bits_data = io_EX_to_MEM_bus_bits_memWriteData;	// <stdin>:2246:10
  assign axi_lite_writeData_bits_strb = io_EX_to_MEM_bus_bits_lsutype == 5'h10 ? 8'hFF : io_EX_to_MEM_bus_bits_lsutype == 5'h8 ?
                8'hF : io_EX_to_MEM_bus_bits_lsutype == 5'h4 ? 8'h3 : {7'h0, io_EX_to_MEM_bus_bits_lsutype
                == 5'h2};	// <stdin>:2246:10, PMEM.scala:49:11, :50:20, :51:24, :52:24, :53:24, :54:24
  assign axi_lite_writeResp_ready = io_EX_to_MEM_bus_bits_memWriteEn;	// <stdin>:2246:10
  assign axi_lite_readAddr_valid = io_EX_to_MEM_bus_bits_memReadEn;	// <stdin>:2246:10
  assign axi_lite_readAddr_bits_addr = io_EX_to_MEM_bus_bits_ALU_result[31:0];	// <stdin>:2246:10, PMEM.scala:85:58
  assign axi_lite_readData_ready = io_EX_to_MEM_bus_bits_memReadEn;	// <stdin>:2246:10
  assign axi_req_valid = (|io_EX_to_MEM_bus_bits_lsutype) | (|rhsReg_8);	// <stdin>:2246:10, PMEM.scala:47:{34,41,76}, tools.scala:15:29
endmodule

module MEMU(	// <stdin>:2389:10
  input         clock,
                reset,
                io_PMEM_to_MEM_bus_valid,
  input  [63:0] io_PMEM_to_MEM_bus_bits_ALU_result,
  input         io_PMEM_to_MEM_bus_bits_regWriteEn,
  input  [4:0]  io_PMEM_to_MEM_bus_bits_regWriteID,
  input         io_PMEM_to_MEM_bus_bits_memReadEn,
  input  [63:0] io_PMEM_to_MEM_bus_bits_PC,
  input  [31:0] io_PMEM_to_MEM_bus_bits_Inst,
  input  [63:0] io_memReadData,
  output        io_MEM_to_WB_bus_valid,
  output [63:0] io_MEM_to_WB_bus_bits_regWriteData,
  output        io_MEM_to_WB_bus_bits_regWriteEn,
  output [4:0]  io_MEM_to_WB_bus_bits_regWriteID,
  output [63:0] io_MEM_to_WB_bus_bits_PC,
  output [31:0] io_MEM_to_WB_bus_bits_Inst,
  output [63:0] io_MEM_to_ID_forward_bits_regWriteData,
  output        io_MEM_to_ID_forward_bits_regWriteEn,
  output [4:0]  io_MEM_to_ID_forward_bits_regWriteID);

  reg [63:0] rhsReg;	// tools.scala:15:29
  reg [31:0] rhsReg_1;	// tools.scala:15:29
  reg        rhsReg_2;	// tools.scala:15:29
  reg [4:0]  rhsReg_3;	// tools.scala:15:29
  reg [63:0] rhsReg_4;	// tools.scala:15:29
  reg        rhsReg_5;	// tools.scala:15:29
  always @(posedge clock) begin
    if (reset) begin
      rhsReg <= 64'h0;	// tools.scala:15:29
      rhsReg_1 <= 32'h0;	// tools.scala:15:29
      rhsReg_2 <= 1'h0;	// tools.scala:15:29
      rhsReg_3 <= 5'h0;	// tools.scala:15:29
      rhsReg_4 <= 64'h0;	// tools.scala:15:29
      rhsReg_5 <= 1'h0;	// tools.scala:15:29
    end
    else begin
      rhsReg <= io_PMEM_to_MEM_bus_bits_PC;	// tools.scala:15:29
      rhsReg_1 <= io_PMEM_to_MEM_bus_bits_Inst;	// tools.scala:15:29
      rhsReg_2 <= io_PMEM_to_MEM_bus_bits_regWriteEn;	// tools.scala:15:29
      rhsReg_3 <= io_PMEM_to_MEM_bus_bits_regWriteID;	// tools.scala:15:29
      if (io_PMEM_to_MEM_bus_bits_memReadEn)
        rhsReg_4 <= io_memReadData;	// tools.scala:15:29
      else
        rhsReg_4 <= io_PMEM_to_MEM_bus_bits_ALU_result;	// tools.scala:15:29
      rhsReg_5 <= io_PMEM_to_MEM_bus_valid;	// tools.scala:15:29
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2389:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2389:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2389:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2389:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2389:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2389:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2389:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2389:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2389:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:2389:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2389:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2389:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2389:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2389:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2389:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2389:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2389:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2389:10
        _RANDOM_5 = `RANDOM;	// <stdin>:2389:10
        rhsReg = {_RANDOM_0, _RANDOM_1};	// tools.scala:15:29
        rhsReg_1 = _RANDOM_2;	// tools.scala:15:29
        rhsReg_2 = _RANDOM_3[0];	// tools.scala:15:29
        rhsReg_3 = _RANDOM_3[5:1];	// tools.scala:15:29
        rhsReg_4 = {_RANDOM_3[31:6], _RANDOM_4, _RANDOM_5[5:0]};	// tools.scala:15:29
        rhsReg_5 = _RANDOM_5[6];	// tools.scala:15:29
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2389:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2389:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_MEM_to_WB_bus_valid = rhsReg_5;	// <stdin>:2389:10, tools.scala:15:29
  assign io_MEM_to_WB_bus_bits_regWriteData = rhsReg_4;	// <stdin>:2389:10, tools.scala:15:29
  assign io_MEM_to_WB_bus_bits_regWriteEn = rhsReg_2;	// <stdin>:2389:10, tools.scala:15:29
  assign io_MEM_to_WB_bus_bits_regWriteID = rhsReg_3;	// <stdin>:2389:10, tools.scala:15:29
  assign io_MEM_to_WB_bus_bits_PC = rhsReg;	// <stdin>:2389:10, tools.scala:15:29
  assign io_MEM_to_WB_bus_bits_Inst = rhsReg_1;	// <stdin>:2389:10, tools.scala:15:29
  assign io_MEM_to_ID_forward_bits_regWriteData = io_PMEM_to_MEM_bus_bits_memReadEn ? io_memReadData : io_PMEM_to_MEM_bus_bits_ALU_result;	// <stdin>:2389:10, MEMU.scala:59:24
  assign io_MEM_to_ID_forward_bits_regWriteEn = io_PMEM_to_MEM_bus_bits_regWriteEn;	// <stdin>:2389:10
  assign io_MEM_to_ID_forward_bits_regWriteID = io_PMEM_to_MEM_bus_bits_regWriteID;	// <stdin>:2389:10
endmodule

module WBU(	// <stdin>:2429:10
  input         io_MEM_to_WB_bus_valid,
  input  [63:0] io_MEM_to_WB_bus_bits_regWriteData,
  input         io_MEM_to_WB_bus_bits_regWriteEn,
  input  [4:0]  io_MEM_to_WB_bus_bits_regWriteID,
  input  [63:0] io_MEM_to_WB_bus_bits_PC,
  input  [31:0] io_MEM_to_WB_bus_bits_Inst,
  output        io_WB_to_ID_forward_valid,
  output [63:0] io_WB_to_ID_forward_bits_regWriteData,
  output        io_WB_to_ID_forward_bits_regWriteEn,
  output [4:0]  io_WB_to_ID_forward_bits_regWriteID,
  output [63:0] io_WB_pc,
  output [31:0] io_WB_Inst);

  assign io_WB_to_ID_forward_valid = io_MEM_to_WB_bus_valid;	// <stdin>:2429:10
  assign io_WB_to_ID_forward_bits_regWriteData = io_MEM_to_WB_bus_bits_regWriteData;	// <stdin>:2429:10
  assign io_WB_to_ID_forward_bits_regWriteEn = io_MEM_to_WB_bus_bits_regWriteEn;	// <stdin>:2429:10
  assign io_WB_to_ID_forward_bits_regWriteID = io_MEM_to_WB_bus_bits_regWriteID;	// <stdin>:2429:10
  assign io_WB_pc = io_MEM_to_WB_bus_bits_PC;	// <stdin>:2429:10
  assign io_WB_Inst = io_MEM_to_WB_bus_bits_Inst;	// <stdin>:2429:10
endmodule

// external module sim_sram

// external module sim

module RAMU(	// <stdin>:2498:10
  input         clock,
                reset,
                axi_lite_writeAddr_valid,
  input  [31:0] axi_lite_writeAddr_bits_addr,
  input         axi_lite_writeData_valid,
  input  [63:0] axi_lite_writeData_bits_data,
  input  [7:0]  axi_lite_writeData_bits_strb,
  input         axi_lite_writeResp_ready,
                axi_lite_readAddr_valid,
  input  [31:0] axi_lite_readAddr_bits_addr,
  input         axi_lite_readData_ready,
  output        axi_lite_readData_valid,
  output [63:0] axi_lite_readData_bits_data,
  output [1:0]  axi_lite_readData_bits_resp);

  wire       _data_ram_arready;	// RAM.scala:34:26
  wire       _data_ram_awready;	// RAM.scala:34:26
  wire       _data_ram_wready;	// RAM.scala:34:26
  wire [1:0] _data_ram_bresp;	// RAM.scala:34:26
  wire       _data_ram_bvalid;	// RAM.scala:34:26
  sim_sram data_ram (	// RAM.scala:34:26
    .pc      (64'h0),	// RAM.scala:37:45
    .aclk    (clock),
    .aresetn (~reset),	// RAM.scala:40:48
    .araddr  (axi_lite_readAddr_bits_addr),
    .arvalid (axi_lite_readAddr_valid),
    .rready  (axi_lite_readData_ready),
    .awaddr  (axi_lite_writeAddr_bits_addr),
    .awvalid (axi_lite_writeAddr_valid),
    .wdata   (axi_lite_writeData_bits_data),
    .wstrb   (axi_lite_writeData_bits_strb),
    .wvalid  (axi_lite_writeData_valid),
    .bready  (axi_lite_writeResp_ready),
    .arready (_data_ram_arready),
    .rdata   (axi_lite_readData_bits_data),
    .rresp   (axi_lite_readData_bits_resp),
    .rvalid  (axi_lite_readData_valid),
    .awready (_data_ram_awready),
    .wready  (_data_ram_wready),
    .bresp   (_data_ram_bresp),
    .bvalid  (_data_ram_bvalid)
  );
endmodule

module AXI_Arbiter(	// <stdin>:2547:10
  input         in_0_writeAddr_valid,
  input  [31:0] in_0_writeAddr_bits_addr,
  input         in_0_writeData_valid,
  input  [63:0] in_0_writeData_bits_data,
  input  [7:0]  in_0_writeData_bits_strb,
  input         in_0_writeResp_ready,
                in_0_readAddr_valid,
  input  [31:0] in_0_readAddr_bits_addr,
  input         in_0_readData_ready,
                in_1_readAddr_valid,
  input  [31:0] in_1_readAddr_bits_addr,
  input         in_1_readData_ready,
                req_0_valid,
                out_readData_valid,
  input  [63:0] out_readData_bits_data,
  input  [1:0]  out_readData_bits_resp,
  output [63:0] in_0_readData_bits_data,
  output        in_1_readData_valid,
  output [63:0] in_1_readData_bits_data,
  output [1:0]  in_1_readData_bits_resp,
  output        req_0_ready,
                req_1_ready,
                out_writeAddr_valid,
  output [31:0] out_writeAddr_bits_addr,
  output        out_writeData_valid,
  output [63:0] out_writeData_bits_data,
  output [7:0]  out_writeData_bits_strb,
  output        out_writeResp_ready,
                out_readAddr_valid,
  output [31:0] out_readAddr_bits_addr,
  output        out_readData_ready);

  assign in_0_readData_bits_data = req_0_valid ? out_readData_bits_data : 64'h77;	// <stdin>:2547:10, RAM.scala:16:37, :22:27, :23:17
  assign in_1_readData_valid = out_readData_valid;	// <stdin>:2547:10
  assign in_1_readData_bits_data = out_readData_bits_data;	// <stdin>:2547:10
  assign in_1_readData_bits_resp = out_readData_bits_resp;	// <stdin>:2547:10
  assign req_0_ready = req_0_valid;	// <stdin>:2547:10
  assign req_1_ready = ~req_0_valid;	// <stdin>:2547:10, RAM.scala:22:27, :26:30
  assign out_writeAddr_valid = req_0_valid & in_0_writeAddr_valid;	// <stdin>:2547:10, RAM.scala:22:27, :23:17
  assign out_writeAddr_bits_addr = req_0_valid ? in_0_writeAddr_bits_addr : 32'h0;	// <stdin>:2547:10, RAM.scala:22:27, :23:17
  assign out_writeData_valid = req_0_valid & in_0_writeData_valid;	// <stdin>:2547:10, RAM.scala:22:27, :23:17
  assign out_writeData_bits_data = req_0_valid ? in_0_writeData_bits_data : 64'h0;	// <stdin>:2547:10, RAM.scala:22:27, :23:17
  assign out_writeData_bits_strb = req_0_valid ? in_0_writeData_bits_strb : 8'h0;	// <stdin>:2547:10, RAM.scala:22:27, :23:17
  assign out_writeResp_ready = req_0_valid & in_0_writeResp_ready;	// <stdin>:2547:10, RAM.scala:22:27, :23:17
  assign out_readAddr_valid = req_0_valid ? in_0_readAddr_valid : in_1_readAddr_valid;	// <stdin>:2547:10, RAM.scala:22:27, :23:17
  assign out_readAddr_bits_addr = req_0_valid ? in_0_readAddr_bits_addr : in_1_readAddr_bits_addr;	// <stdin>:2547:10, RAM.scala:22:27, :23:17
  assign out_readData_ready = req_0_valid ? in_0_readData_ready : in_1_readData_ready;	// <stdin>:2547:10, RAM.scala:22:27, :23:17
endmodule

module top(	// <stdin>:2581:10
  input         clock,
                reset,
  output [63:0] io_ID_npc,
                io_PF_npc,
                io_PF_pc,
                io_PF_axidata,
                io_IF_pc,
                io_ID_pc,
                io_EX_pc,
                io_PMEM_pc,
                io_WB_pc,
  output [31:0] io_WB_Inst,
  output [63:0] io_WB_RegWriteData,
                io_WB_RegWriteID,
  output        io_WB_valid,
  output [63:0] io_MEM_RegWriteData,
  output        io_stall,
                io_BTB_hit,
  output [2:0]  io_BTB_wset,
  output [15:0] io_BTB_wtag,
  output [2:0]  io_BTB_rset,
  output [15:0] io_BTB_rtag,
  output [63:0] io_BTB_rdata,
                io_BTB_wdata,
  output [31:0] io_btype_cnt,
                io_jal_cnt,
                io_jalr_cnt,
                io_btype_fail,
                io_jal_fail,
                io_jalr_fail,
                io_btb_hit_cnt,
  output [63:0] io_bp_npc,
  output        io_bp_taken,
                io_bp_flush,
  output [31:0] io_IF_Inst,
  output        io_IF_valid,
                io_IF_AXIREQ,
                io_MEM_AXIREQ,
  output [63:0] io_ID_ALU_Data1,
                io_ID_ALU_Data2,
                io_ID_Rs1Data,
                io_ID_Rs2Data,
                io_ALUResult);

  wire [63:0] _arb_in_0_readData_bits_data;	// top.scala:161:21
  wire        _arb_in_1_readData_valid;	// top.scala:161:21
  wire [63:0] _arb_in_1_readData_bits_data;	// top.scala:161:21
  wire [1:0]  _arb_in_1_readData_bits_resp;	// top.scala:161:21
  wire        _arb_req_1_ready;	// top.scala:161:21
  wire        _arb_out_writeAddr_valid;	// top.scala:161:21
  wire [31:0] _arb_out_writeAddr_bits_addr;	// top.scala:161:21
  wire        _arb_out_writeData_valid;	// top.scala:161:21
  wire [63:0] _arb_out_writeData_bits_data;	// top.scala:161:21
  wire [7:0]  _arb_out_writeData_bits_strb;	// top.scala:161:21
  wire        _arb_out_writeResp_ready;	// top.scala:161:21
  wire        _arb_out_readAddr_valid;	// top.scala:161:21
  wire [31:0] _arb_out_readAddr_bits_addr;	// top.scala:161:21
  wire        _arb_out_readData_ready;	// top.scala:161:21
  wire        _ram_unit_axi_lite_readData_valid;	// top.scala:160:26
  wire [63:0] _ram_unit_axi_lite_readData_bits_data;	// top.scala:160:26
  wire [1:0]  _ram_unit_axi_lite_readData_bits_resp;	// top.scala:160:26
  wire [63:0] _simulate_inst;	// top.scala:122:26
  wire        _inst_ram_arready;	// top.scala:76:30
  wire [63:0] _inst_ram_rdata;	// top.scala:76:30
  wire [1:0]  _inst_ram_rresp;	// top.scala:76:30
  wire        _inst_ram_rvalid;	// top.scala:76:30
  wire        _inst_ram_awready;	// top.scala:76:30
  wire        _inst_ram_wready;	// top.scala:76:30
  wire [1:0]  _inst_ram_bresp;	// top.scala:76:30
  wire        _inst_ram_bvalid;	// top.scala:76:30
  wire [63:0] _wb_unit_io_WB_to_ID_forward_bits_regWriteData;	// top.scala:74:25
  wire        _wb_unit_io_WB_to_ID_forward_bits_regWriteEn;	// top.scala:74:25
  wire [4:0]  _wb_unit_io_WB_to_ID_forward_bits_regWriteID;	// top.scala:74:25
  wire [31:0] _wb_unit_io_WB_Inst;	// top.scala:74:25
  wire        _mem_unit_io_MEM_to_WB_bus_valid;	// top.scala:73:26
  wire [63:0] _mem_unit_io_MEM_to_WB_bus_bits_regWriteData;	// top.scala:73:26
  wire        _mem_unit_io_MEM_to_WB_bus_bits_regWriteEn;	// top.scala:73:26
  wire [4:0]  _mem_unit_io_MEM_to_WB_bus_bits_regWriteID;	// top.scala:73:26
  wire [63:0] _mem_unit_io_MEM_to_WB_bus_bits_PC;	// top.scala:73:26
  wire [31:0] _mem_unit_io_MEM_to_WB_bus_bits_Inst;	// top.scala:73:26
  wire [63:0] _mem_unit_io_MEM_to_ID_forward_bits_regWriteData;	// top.scala:73:26
  wire        _mem_unit_io_MEM_to_ID_forward_bits_regWriteEn;	// top.scala:73:26
  wire [4:0]  _mem_unit_io_MEM_to_ID_forward_bits_regWriteID;	// top.scala:73:26
  wire        _pre_mem_unit_io_PMEM_to_MEM_bus_valid;	// top.scala:72:30
  wire [63:0] _pre_mem_unit_io_PMEM_to_MEM_bus_bits_ALU_result;	// top.scala:72:30
  wire        _pre_mem_unit_io_PMEM_to_MEM_bus_bits_regWriteEn;	// top.scala:72:30
  wire [4:0]  _pre_mem_unit_io_PMEM_to_MEM_bus_bits_regWriteID;	// top.scala:72:30
  wire        _pre_mem_unit_io_PMEM_to_MEM_bus_bits_memReadEn;	// top.scala:72:30
  wire [63:0] _pre_mem_unit_io_PMEM_to_MEM_bus_bits_PC;	// top.scala:72:30
  wire [31:0] _pre_mem_unit_io_PMEM_to_MEM_bus_bits_Inst;	// top.scala:72:30
  wire [63:0] _pre_mem_unit_io_PMEM_to_ID_forward_bits_ALU_result;	// top.scala:72:30
  wire        _pre_mem_unit_io_PMEM_to_ID_forward_bits_regWriteEn;	// top.scala:72:30
  wire [4:0]  _pre_mem_unit_io_PMEM_to_ID_forward_bits_regWriteID;	// top.scala:72:30
  wire        _pre_mem_unit_io_PMEM_to_ID_forward_bits_memReadEn;	// top.scala:72:30
  wire [63:0] _pre_mem_unit_io_memReadData;	// top.scala:72:30
  wire        _pre_mem_unit_axi_lite_writeAddr_valid;	// top.scala:72:30
  wire [31:0] _pre_mem_unit_axi_lite_writeAddr_bits_addr;	// top.scala:72:30
  wire        _pre_mem_unit_axi_lite_writeData_valid;	// top.scala:72:30
  wire [63:0] _pre_mem_unit_axi_lite_writeData_bits_data;	// top.scala:72:30
  wire [7:0]  _pre_mem_unit_axi_lite_writeData_bits_strb;	// top.scala:72:30
  wire        _pre_mem_unit_axi_lite_writeResp_ready;	// top.scala:72:30
  wire        _pre_mem_unit_axi_lite_readAddr_valid;	// top.scala:72:30
  wire [31:0] _pre_mem_unit_axi_lite_readAddr_bits_addr;	// top.scala:72:30
  wire        _pre_mem_unit_axi_lite_readData_ready;	// top.scala:72:30
  wire        _pre_mem_unit_axi_req_valid;	// top.scala:72:30
  wire        _excute_unit_io_EX_to_MEM_bus_valid;	// top.scala:71:29
  wire [31:0] _excute_unit_io_EX_to_MEM_bus_bits_Inst;	// top.scala:71:29
  wire [63:0] _excute_unit_io_EX_to_MEM_bus_bits_PC;	// top.scala:71:29
  wire [63:0] _excute_unit_io_EX_to_MEM_bus_bits_ALU_result;	// top.scala:71:29
  wire [63:0] _excute_unit_io_EX_to_MEM_bus_bits_memWriteData;	// top.scala:71:29
  wire        _excute_unit_io_EX_to_MEM_bus_bits_memWriteEn;	// top.scala:71:29
  wire        _excute_unit_io_EX_to_MEM_bus_bits_memReadEn;	// top.scala:71:29
  wire [4:0]  _excute_unit_io_EX_to_MEM_bus_bits_lsutype;	// top.scala:71:29
  wire [4:0]  _excute_unit_io_EX_to_MEM_bus_bits_regWriteID;	// top.scala:71:29
  wire        _excute_unit_io_EX_to_MEM_bus_bits_regWriteEn;	// top.scala:71:29
  wire [63:0] _excute_unit_io_EX_ALUResult_Pass;	// top.scala:71:29
  wire        _inst_decode_unit_io_IF_to_ID_bus_ready;	// top.scala:70:34
  wire        _inst_decode_unit_io_ID_to_EX_bus_valid;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data1;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data2;	// top.scala:70:34
  wire        _inst_decode_unit_io_ID_to_EX_bus_bits_futype;	// top.scala:70:34
  wire [4:0]  _inst_decode_unit_io_ID_to_EX_bus_bits_optype;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_to_EX_bus_bits_rs2_data;	// top.scala:70:34
  wire [4:0]  _inst_decode_unit_io_ID_to_EX_bus_bits_regWriteID;	// top.scala:70:34
  wire        _inst_decode_unit_io_ID_to_EX_bus_bits_regWriteEn;	// top.scala:70:34
  wire        _inst_decode_unit_io_ID_to_EX_bus_bits_memWriteEn;	// top.scala:70:34
  wire        _inst_decode_unit_io_ID_to_EX_bus_bits_memReadEn;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_to_EX_bus_bits_PC;	// top.scala:70:34
  wire [31:0] _inst_decode_unit_io_ID_to_EX_bus_bits_Inst;	// top.scala:70:34
  wire        _inst_decode_unit_io_ID_to_BPU_bus_valid;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_to_BPU_bus_bits_PC;	// top.scala:70:34
  wire        _inst_decode_unit_io_ID_to_BPU_bus_bits_taken;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_to_BPU_bus_bits_br_target;	// top.scala:70:34
  wire        _inst_decode_unit_io_ID_to_BPU_bus_bits_load_use_stall;	// top.scala:70:34
  wire [1:0]  _inst_decode_unit_io_ID_to_BPU_bus_bits_Type;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_0;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_1;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_2;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_3;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_4;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_5;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_6;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_7;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_8;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_9;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_10;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_11;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_12;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_13;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_14;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_15;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_16;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_17;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_18;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_19;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_20;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_21;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_22;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_23;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_24;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_25;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_26;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_27;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_28;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_29;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_30;	// top.scala:70:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_31;	// top.scala:70:34
  wire        _inst_decode_unit_io_ID_unknown_inst;	// top.scala:70:34
  wire        _inst_fetch_unit_io_IF_to_ID_bus_valid;	// top.scala:69:33
  wire [63:0] _inst_fetch_unit_io_IF_to_ID_bus_bits_PC;	// top.scala:69:33
  wire [31:0] _inst_fetch_unit_io_IF_to_ID_bus_bits_Inst;	// top.scala:69:33
  wire [63:0] _inst_fetch_unit_io_PF_pc;	// top.scala:69:33
  wire        _inst_fetch_unit_io_PF_valid;	// top.scala:69:33
  wire [63:0] _inst_fetch_unit_io_axidata;	// top.scala:69:33
  wire        _inst_fetch_unit_axi_lite_readAddr_valid;	// top.scala:69:33
  wire [31:0] _inst_fetch_unit_axi_lite_readAddr_bits_addr;	// top.scala:69:33
  wire        _inst_fetch_unit_axi_lite_readData_ready;	// top.scala:69:33
  wire        _bp_unit_io_bp_taken;	// top.scala:68:33
  wire        _bp_unit_io_bp_flush;	// top.scala:68:33
  wire [63:0] _bp_unit_io_bp_npc;	// top.scala:68:33
  BPU bp_unit (	// top.scala:68:33
    .clock                                (clock),
    .reset                                (reset),
    .io_PF_pc                             (_inst_fetch_unit_io_PF_pc),	// top.scala:69:33
    .io_PF_inst                           (_inst_fetch_unit_io_axidata[31:0]),	// top.scala:69:33, :132:45
    .io_PF_valid                          (_inst_fetch_unit_io_PF_valid),	// top.scala:69:33
    .io_ID_to_BPU_bus_valid               (_inst_decode_unit_io_ID_to_BPU_bus_valid),	// top.scala:70:34
    .io_ID_to_BPU_bus_bits_PC             (_inst_decode_unit_io_ID_to_BPU_bus_bits_PC),	// top.scala:70:34
    .io_ID_to_BPU_bus_bits_taken          (_inst_decode_unit_io_ID_to_BPU_bus_bits_taken),	// top.scala:70:34
    .io_ID_to_BPU_bus_bits_br_target      (_inst_decode_unit_io_ID_to_BPU_bus_bits_br_target),	// top.scala:70:34
    .io_ID_to_BPU_bus_bits_load_use_stall (_inst_decode_unit_io_ID_to_BPU_bus_bits_load_use_stall),	// top.scala:70:34
    .io_ID_to_BPU_bus_bits_Type           (_inst_decode_unit_io_ID_to_BPU_bus_bits_Type),	// top.scala:70:34
    .io_bp_taken                          (_bp_unit_io_bp_taken),
    .io_bp_flush                          (_bp_unit_io_bp_flush),
    .io_bp_npc                            (_bp_unit_io_bp_npc),
    .io_BTB_wset                          (io_BTB_wset),
    .io_BTB_wtag                          (io_BTB_wtag),
    .io_BTB_rset                          (io_BTB_rset),
    .io_BTB_rtag                          (io_BTB_rtag),
    .io_BTB_rdata                         (io_BTB_rdata),
    .io_BTB_wdata                         (io_BTB_wdata),
    .io_BTB_hit                           (io_BTB_hit),
    .io_btype_cnt                         (io_btype_cnt),
    .io_jal_cnt                           (io_jal_cnt),
    .io_jalr_cnt                          (io_jalr_cnt),
    .io_btype_fail                        (io_btype_fail),
    .io_jal_fail                          (io_jal_fail),
    .io_jalr_fail                         (io_jalr_fail),
    .io_hit_cnt                           (io_btb_hit_cnt)
  );
  IFU inst_fetch_unit (	// top.scala:69:33
    .clock                       (clock),
    .reset                       (reset),
    .io_IF_to_ID_bus_ready       (_inst_decode_unit_io_IF_to_ID_bus_ready),	// top.scala:70:34
    .io_bp_flush                 (_bp_unit_io_bp_flush),	// top.scala:68:33
    .io_bp_taken                 (_bp_unit_io_bp_taken),	// top.scala:68:33
    .io_bp_npc                   (_bp_unit_io_bp_npc),	// top.scala:68:33
    .axi_lite_readData_valid     (_arb_in_1_readData_valid),	// top.scala:161:21
    .axi_lite_readData_bits_data (_arb_in_1_readData_bits_data),	// top.scala:161:21
    .axi_lite_readData_bits_resp (_arb_in_1_readData_bits_resp),	// top.scala:161:21
    .axi_req_ready               (_arb_req_1_ready),	// top.scala:161:21
    .io_IF_to_ID_bus_valid       (_inst_fetch_unit_io_IF_to_ID_bus_valid),
    .io_IF_to_ID_bus_bits_PC     (_inst_fetch_unit_io_IF_to_ID_bus_bits_PC),
    .io_IF_to_ID_bus_bits_Inst   (_inst_fetch_unit_io_IF_to_ID_bus_bits_Inst),
    .io_PF_npc                   (io_PF_npc),
    .io_PF_pc                    (_inst_fetch_unit_io_PF_pc),
    .io_PF_valid                 (_inst_fetch_unit_io_PF_valid),
    .io_axidata                  (_inst_fetch_unit_io_axidata),
    .axi_lite_readAddr_valid     (_inst_fetch_unit_axi_lite_readAddr_valid),
    .axi_lite_readAddr_bits_addr (_inst_fetch_unit_axi_lite_readAddr_bits_addr),
    .axi_lite_readData_ready     (_inst_fetch_unit_axi_lite_readData_ready)
  );
  IDU inst_decode_unit (	// top.scala:70:34
    .clock                                  (clock),
    .reset                                  (reset),
    .io_IF_to_ID_bus_valid                  (_inst_fetch_unit_io_IF_to_ID_bus_valid),	// top.scala:69:33
    .io_IF_to_ID_bus_bits_PC                (_inst_fetch_unit_io_IF_to_ID_bus_bits_PC),	// top.scala:69:33
    .io_IF_to_ID_bus_bits_Inst              (_inst_fetch_unit_io_IF_to_ID_bus_bits_Inst),	// top.scala:69:33
    .io_WB_to_ID_forward_bits_regWriteData  (_wb_unit_io_WB_to_ID_forward_bits_regWriteData),	// top.scala:74:25
    .io_WB_to_ID_forward_bits_regWriteEn    (_wb_unit_io_WB_to_ID_forward_bits_regWriteEn),	// top.scala:74:25
    .io_WB_to_ID_forward_bits_regWriteID    (_wb_unit_io_WB_to_ID_forward_bits_regWriteID),	// top.scala:74:25
    .io_PMEM_to_ID_forward_bits_ALU_result  (_pre_mem_unit_io_PMEM_to_ID_forward_bits_ALU_result),	// top.scala:72:30
    .io_PMEM_to_ID_forward_bits_regWriteEn  (_pre_mem_unit_io_PMEM_to_ID_forward_bits_regWriteEn),	// top.scala:72:30
    .io_PMEM_to_ID_forward_bits_regWriteID  (_pre_mem_unit_io_PMEM_to_ID_forward_bits_regWriteID),	// top.scala:72:30
    .io_PMEM_to_ID_forward_bits_memReadEn   (_pre_mem_unit_io_PMEM_to_ID_forward_bits_memReadEn),	// top.scala:72:30
    .io_MEM_to_ID_forward_bits_regWriteData (_mem_unit_io_MEM_to_ID_forward_bits_regWriteData),	// top.scala:73:26
    .io_MEM_to_ID_forward_bits_regWriteEn   (_mem_unit_io_MEM_to_ID_forward_bits_regWriteEn),	// top.scala:73:26
    .io_MEM_to_ID_forward_bits_regWriteID   (_mem_unit_io_MEM_to_ID_forward_bits_regWriteID),	// top.scala:73:26
    .io_EX_ALUResult                        (_excute_unit_io_EX_ALUResult_Pass),	// top.scala:71:29
    .io_IF_to_ID_bus_ready                  (_inst_decode_unit_io_IF_to_ID_bus_ready),
    .io_ID_to_EX_bus_valid                  (_inst_decode_unit_io_ID_to_EX_bus_valid),
    .io_ID_to_EX_bus_bits_ALU_Data1         (_inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data1),
    .io_ID_to_EX_bus_bits_ALU_Data2         (_inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data2),
    .io_ID_to_EX_bus_bits_futype            (_inst_decode_unit_io_ID_to_EX_bus_bits_futype),
    .io_ID_to_EX_bus_bits_optype            (_inst_decode_unit_io_ID_to_EX_bus_bits_optype),
    .io_ID_to_EX_bus_bits_rs1_data          (io_ID_Rs1Data),
    .io_ID_to_EX_bus_bits_rs2_data          (_inst_decode_unit_io_ID_to_EX_bus_bits_rs2_data),
    .io_ID_to_EX_bus_bits_regWriteID        (_inst_decode_unit_io_ID_to_EX_bus_bits_regWriteID),
    .io_ID_to_EX_bus_bits_regWriteEn        (_inst_decode_unit_io_ID_to_EX_bus_bits_regWriteEn),
    .io_ID_to_EX_bus_bits_memWriteEn        (_inst_decode_unit_io_ID_to_EX_bus_bits_memWriteEn),
    .io_ID_to_EX_bus_bits_memReadEn         (_inst_decode_unit_io_ID_to_EX_bus_bits_memReadEn),
    .io_ID_to_EX_bus_bits_PC                (_inst_decode_unit_io_ID_to_EX_bus_bits_PC),
    .io_ID_to_EX_bus_bits_Inst              (_inst_decode_unit_io_ID_to_EX_bus_bits_Inst),
    .io_ID_to_BPU_bus_valid                 (_inst_decode_unit_io_ID_to_BPU_bus_valid),
    .io_ID_to_BPU_bus_bits_PC               (_inst_decode_unit_io_ID_to_BPU_bus_bits_PC),
    .io_ID_to_BPU_bus_bits_taken            (_inst_decode_unit_io_ID_to_BPU_bus_bits_taken),
    .io_ID_to_BPU_bus_bits_br_target        (_inst_decode_unit_io_ID_to_BPU_bus_bits_br_target),
    .io_ID_to_BPU_bus_bits_load_use_stall   (_inst_decode_unit_io_ID_to_BPU_bus_bits_load_use_stall),
    .io_ID_to_BPU_bus_bits_Type             (_inst_decode_unit_io_ID_to_BPU_bus_bits_Type),
    .io_ID_stall                            (io_stall),
    .io_ID_GPR_0                            (_inst_decode_unit_io_ID_GPR_0),
    .io_ID_GPR_1                            (_inst_decode_unit_io_ID_GPR_1),
    .io_ID_GPR_2                            (_inst_decode_unit_io_ID_GPR_2),
    .io_ID_GPR_3                            (_inst_decode_unit_io_ID_GPR_3),
    .io_ID_GPR_4                            (_inst_decode_unit_io_ID_GPR_4),
    .io_ID_GPR_5                            (_inst_decode_unit_io_ID_GPR_5),
    .io_ID_GPR_6                            (_inst_decode_unit_io_ID_GPR_6),
    .io_ID_GPR_7                            (_inst_decode_unit_io_ID_GPR_7),
    .io_ID_GPR_8                            (_inst_decode_unit_io_ID_GPR_8),
    .io_ID_GPR_9                            (_inst_decode_unit_io_ID_GPR_9),
    .io_ID_GPR_10                           (_inst_decode_unit_io_ID_GPR_10),
    .io_ID_GPR_11                           (_inst_decode_unit_io_ID_GPR_11),
    .io_ID_GPR_12                           (_inst_decode_unit_io_ID_GPR_12),
    .io_ID_GPR_13                           (_inst_decode_unit_io_ID_GPR_13),
    .io_ID_GPR_14                           (_inst_decode_unit_io_ID_GPR_14),
    .io_ID_GPR_15                           (_inst_decode_unit_io_ID_GPR_15),
    .io_ID_GPR_16                           (_inst_decode_unit_io_ID_GPR_16),
    .io_ID_GPR_17                           (_inst_decode_unit_io_ID_GPR_17),
    .io_ID_GPR_18                           (_inst_decode_unit_io_ID_GPR_18),
    .io_ID_GPR_19                           (_inst_decode_unit_io_ID_GPR_19),
    .io_ID_GPR_20                           (_inst_decode_unit_io_ID_GPR_20),
    .io_ID_GPR_21                           (_inst_decode_unit_io_ID_GPR_21),
    .io_ID_GPR_22                           (_inst_decode_unit_io_ID_GPR_22),
    .io_ID_GPR_23                           (_inst_decode_unit_io_ID_GPR_23),
    .io_ID_GPR_24                           (_inst_decode_unit_io_ID_GPR_24),
    .io_ID_GPR_25                           (_inst_decode_unit_io_ID_GPR_25),
    .io_ID_GPR_26                           (_inst_decode_unit_io_ID_GPR_26),
    .io_ID_GPR_27                           (_inst_decode_unit_io_ID_GPR_27),
    .io_ID_GPR_28                           (_inst_decode_unit_io_ID_GPR_28),
    .io_ID_GPR_29                           (_inst_decode_unit_io_ID_GPR_29),
    .io_ID_GPR_30                           (_inst_decode_unit_io_ID_GPR_30),
    .io_ID_GPR_31                           (_inst_decode_unit_io_ID_GPR_31),
    .io_ID_unknown_inst                     (_inst_decode_unit_io_ID_unknown_inst)
  );
  EXU excute_unit (	// top.scala:71:29
    .clock                              (clock),
    .reset                              (reset),
    .io_ID_to_EX_bus_valid              (_inst_decode_unit_io_ID_to_EX_bus_valid),	// top.scala:70:34
    .io_ID_to_EX_bus_bits_ALU_Data1     (_inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data1),	// top.scala:70:34
    .io_ID_to_EX_bus_bits_ALU_Data2     (_inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data2),	// top.scala:70:34
    .io_ID_to_EX_bus_bits_futype        (_inst_decode_unit_io_ID_to_EX_bus_bits_futype),	// top.scala:70:34
    .io_ID_to_EX_bus_bits_optype        (_inst_decode_unit_io_ID_to_EX_bus_bits_optype),	// top.scala:70:34
    .io_ID_to_EX_bus_bits_rs2_data      (_inst_decode_unit_io_ID_to_EX_bus_bits_rs2_data),	// top.scala:70:34
    .io_ID_to_EX_bus_bits_regWriteID    (_inst_decode_unit_io_ID_to_EX_bus_bits_regWriteID),	// top.scala:70:34
    .io_ID_to_EX_bus_bits_regWriteEn    (_inst_decode_unit_io_ID_to_EX_bus_bits_regWriteEn),	// top.scala:70:34
    .io_ID_to_EX_bus_bits_memWriteEn    (_inst_decode_unit_io_ID_to_EX_bus_bits_memWriteEn),	// top.scala:70:34
    .io_ID_to_EX_bus_bits_memReadEn     (_inst_decode_unit_io_ID_to_EX_bus_bits_memReadEn),	// top.scala:70:34
    .io_ID_to_EX_bus_bits_PC            (_inst_decode_unit_io_ID_to_EX_bus_bits_PC),	// top.scala:70:34
    .io_ID_to_EX_bus_bits_Inst          (_inst_decode_unit_io_ID_to_EX_bus_bits_Inst),	// top.scala:70:34
    .io_EX_to_MEM_bus_valid             (_excute_unit_io_EX_to_MEM_bus_valid),
    .io_EX_to_MEM_bus_bits_Inst         (_excute_unit_io_EX_to_MEM_bus_bits_Inst),
    .io_EX_to_MEM_bus_bits_PC           (_excute_unit_io_EX_to_MEM_bus_bits_PC),
    .io_EX_to_MEM_bus_bits_ALU_result   (_excute_unit_io_EX_to_MEM_bus_bits_ALU_result),
    .io_EX_to_MEM_bus_bits_memWriteData (_excute_unit_io_EX_to_MEM_bus_bits_memWriteData),
    .io_EX_to_MEM_bus_bits_memWriteEn   (_excute_unit_io_EX_to_MEM_bus_bits_memWriteEn),
    .io_EX_to_MEM_bus_bits_memReadEn    (_excute_unit_io_EX_to_MEM_bus_bits_memReadEn),
    .io_EX_to_MEM_bus_bits_lsutype      (_excute_unit_io_EX_to_MEM_bus_bits_lsutype),
    .io_EX_to_MEM_bus_bits_regWriteID   (_excute_unit_io_EX_to_MEM_bus_bits_regWriteID),
    .io_EX_to_MEM_bus_bits_regWriteEn   (_excute_unit_io_EX_to_MEM_bus_bits_regWriteEn),
    .io_EX_ALUResult_Pass               (_excute_unit_io_EX_ALUResult_Pass)
  );
  MEM_pre_stage pre_mem_unit (	// top.scala:72:30
    .clock                                 (clock),
    .reset                                 (reset),
    .io_EX_to_MEM_bus_valid                (_excute_unit_io_EX_to_MEM_bus_valid),	// top.scala:71:29
    .io_EX_to_MEM_bus_bits_Inst            (_excute_unit_io_EX_to_MEM_bus_bits_Inst),	// top.scala:71:29
    .io_EX_to_MEM_bus_bits_PC              (_excute_unit_io_EX_to_MEM_bus_bits_PC),	// top.scala:71:29
    .io_EX_to_MEM_bus_bits_ALU_result      (_excute_unit_io_EX_to_MEM_bus_bits_ALU_result),	// top.scala:71:29
    .io_EX_to_MEM_bus_bits_memWriteData    (_excute_unit_io_EX_to_MEM_bus_bits_memWriteData),	// top.scala:71:29
    .io_EX_to_MEM_bus_bits_memWriteEn      (_excute_unit_io_EX_to_MEM_bus_bits_memWriteEn),	// top.scala:71:29
    .io_EX_to_MEM_bus_bits_memReadEn       (_excute_unit_io_EX_to_MEM_bus_bits_memReadEn),	// top.scala:71:29
    .io_EX_to_MEM_bus_bits_lsutype         (_excute_unit_io_EX_to_MEM_bus_bits_lsutype),	// top.scala:71:29
    .io_EX_to_MEM_bus_bits_regWriteID      (_excute_unit_io_EX_to_MEM_bus_bits_regWriteID),	// top.scala:71:29
    .io_EX_to_MEM_bus_bits_regWriteEn      (_excute_unit_io_EX_to_MEM_bus_bits_regWriteEn),	// top.scala:71:29
    .axi_lite_readData_bits_data           (_arb_in_0_readData_bits_data),	// top.scala:161:21
    .io_PMEM_to_MEM_bus_valid              (_pre_mem_unit_io_PMEM_to_MEM_bus_valid),
    .io_PMEM_to_MEM_bus_bits_ALU_result    (_pre_mem_unit_io_PMEM_to_MEM_bus_bits_ALU_result),
    .io_PMEM_to_MEM_bus_bits_regWriteEn    (_pre_mem_unit_io_PMEM_to_MEM_bus_bits_regWriteEn),
    .io_PMEM_to_MEM_bus_bits_regWriteID    (_pre_mem_unit_io_PMEM_to_MEM_bus_bits_regWriteID),
    .io_PMEM_to_MEM_bus_bits_memReadEn     (_pre_mem_unit_io_PMEM_to_MEM_bus_bits_memReadEn),
    .io_PMEM_to_MEM_bus_bits_PC            (_pre_mem_unit_io_PMEM_to_MEM_bus_bits_PC),
    .io_PMEM_to_MEM_bus_bits_Inst          (_pre_mem_unit_io_PMEM_to_MEM_bus_bits_Inst),
    .io_PMEM_to_ID_forward_bits_ALU_result (_pre_mem_unit_io_PMEM_to_ID_forward_bits_ALU_result),
    .io_PMEM_to_ID_forward_bits_regWriteEn (_pre_mem_unit_io_PMEM_to_ID_forward_bits_regWriteEn),
    .io_PMEM_to_ID_forward_bits_regWriteID (_pre_mem_unit_io_PMEM_to_ID_forward_bits_regWriteID),
    .io_PMEM_to_ID_forward_bits_memReadEn  (_pre_mem_unit_io_PMEM_to_ID_forward_bits_memReadEn),
    .io_memReadData                        (_pre_mem_unit_io_memReadData),
    .axi_lite_writeAddr_valid              (_pre_mem_unit_axi_lite_writeAddr_valid),
    .axi_lite_writeAddr_bits_addr          (_pre_mem_unit_axi_lite_writeAddr_bits_addr),
    .axi_lite_writeData_valid              (_pre_mem_unit_axi_lite_writeData_valid),
    .axi_lite_writeData_bits_data          (_pre_mem_unit_axi_lite_writeData_bits_data),
    .axi_lite_writeData_bits_strb          (_pre_mem_unit_axi_lite_writeData_bits_strb),
    .axi_lite_writeResp_ready              (_pre_mem_unit_axi_lite_writeResp_ready),
    .axi_lite_readAddr_valid               (_pre_mem_unit_axi_lite_readAddr_valid),
    .axi_lite_readAddr_bits_addr           (_pre_mem_unit_axi_lite_readAddr_bits_addr),
    .axi_lite_readData_ready               (_pre_mem_unit_axi_lite_readData_ready),
    .axi_req_valid                         (_pre_mem_unit_axi_req_valid)
  );
  MEMU mem_unit (	// top.scala:73:26
    .clock                                  (clock),
    .reset                                  (reset),
    .io_PMEM_to_MEM_bus_valid               (_pre_mem_unit_io_PMEM_to_MEM_bus_valid),	// top.scala:72:30
    .io_PMEM_to_MEM_bus_bits_ALU_result     (_pre_mem_unit_io_PMEM_to_MEM_bus_bits_ALU_result),	// top.scala:72:30
    .io_PMEM_to_MEM_bus_bits_regWriteEn     (_pre_mem_unit_io_PMEM_to_MEM_bus_bits_regWriteEn),	// top.scala:72:30
    .io_PMEM_to_MEM_bus_bits_regWriteID     (_pre_mem_unit_io_PMEM_to_MEM_bus_bits_regWriteID),	// top.scala:72:30
    .io_PMEM_to_MEM_bus_bits_memReadEn      (_pre_mem_unit_io_PMEM_to_MEM_bus_bits_memReadEn),	// top.scala:72:30
    .io_PMEM_to_MEM_bus_bits_PC             (_pre_mem_unit_io_PMEM_to_MEM_bus_bits_PC),	// top.scala:72:30
    .io_PMEM_to_MEM_bus_bits_Inst           (_pre_mem_unit_io_PMEM_to_MEM_bus_bits_Inst),	// top.scala:72:30
    .io_memReadData                         (_pre_mem_unit_io_memReadData),	// top.scala:72:30
    .io_MEM_to_WB_bus_valid                 (_mem_unit_io_MEM_to_WB_bus_valid),
    .io_MEM_to_WB_bus_bits_regWriteData     (_mem_unit_io_MEM_to_WB_bus_bits_regWriteData),
    .io_MEM_to_WB_bus_bits_regWriteEn       (_mem_unit_io_MEM_to_WB_bus_bits_regWriteEn),
    .io_MEM_to_WB_bus_bits_regWriteID       (_mem_unit_io_MEM_to_WB_bus_bits_regWriteID),
    .io_MEM_to_WB_bus_bits_PC               (_mem_unit_io_MEM_to_WB_bus_bits_PC),
    .io_MEM_to_WB_bus_bits_Inst             (_mem_unit_io_MEM_to_WB_bus_bits_Inst),
    .io_MEM_to_ID_forward_bits_regWriteData (_mem_unit_io_MEM_to_ID_forward_bits_regWriteData),
    .io_MEM_to_ID_forward_bits_regWriteEn   (_mem_unit_io_MEM_to_ID_forward_bits_regWriteEn),
    .io_MEM_to_ID_forward_bits_regWriteID   (_mem_unit_io_MEM_to_ID_forward_bits_regWriteID)
  );
  WBU wb_unit (	// top.scala:74:25
    .io_MEM_to_WB_bus_valid                (_mem_unit_io_MEM_to_WB_bus_valid),	// top.scala:73:26
    .io_MEM_to_WB_bus_bits_regWriteData    (_mem_unit_io_MEM_to_WB_bus_bits_regWriteData),	// top.scala:73:26
    .io_MEM_to_WB_bus_bits_regWriteEn      (_mem_unit_io_MEM_to_WB_bus_bits_regWriteEn),	// top.scala:73:26
    .io_MEM_to_WB_bus_bits_regWriteID      (_mem_unit_io_MEM_to_WB_bus_bits_regWriteID),	// top.scala:73:26
    .io_MEM_to_WB_bus_bits_PC              (_mem_unit_io_MEM_to_WB_bus_bits_PC),	// top.scala:73:26
    .io_MEM_to_WB_bus_bits_Inst            (_mem_unit_io_MEM_to_WB_bus_bits_Inst),	// top.scala:73:26
    .io_WB_to_ID_forward_valid             (io_WB_valid),
    .io_WB_to_ID_forward_bits_regWriteData (_wb_unit_io_WB_to_ID_forward_bits_regWriteData),
    .io_WB_to_ID_forward_bits_regWriteEn   (_wb_unit_io_WB_to_ID_forward_bits_regWriteEn),
    .io_WB_to_ID_forward_bits_regWriteID   (_wb_unit_io_WB_to_ID_forward_bits_regWriteID),
    .io_WB_pc                              (io_WB_pc),
    .io_WB_Inst                            (_wb_unit_io_WB_Inst)
  );
  sim_sram inst_ram (	// top.scala:76:30
    .pc      (64'h0),	// top.scala:161:21
    .aclk    (1'h0),	// top.scala:161:21
    .aresetn (1'h0),	// top.scala:161:21
    .araddr  (32'h0),	// top.scala:161:21
    .arvalid (1'h0),	// top.scala:161:21
    .rready  (1'h0),	// top.scala:161:21
    .awaddr  (32'h0),	// top.scala:161:21
    .awvalid (1'h0),	// top.scala:161:21
    .wdata   (64'h0),	// top.scala:161:21
    .wstrb   (8'h0),	// top.scala:161:21
    .wvalid  (1'h0),	// top.scala:161:21
    .bready  (1'h0),	// top.scala:161:21
    .arready (_inst_ram_arready),
    .rdata   (_inst_ram_rdata),
    .rresp   (_inst_ram_rresp),
    .rvalid  (_inst_ram_rvalid),
    .awready (_inst_ram_awready),
    .wready  (_inst_ram_wready),
    .bresp   (_inst_ram_bresp),
    .bvalid  (_inst_ram_bvalid)
  );
  RAMU ram_unit (	// top.scala:160:26
    .clock                        (clock),
    .reset                        (reset),
    .axi_lite_writeAddr_valid     (_arb_out_writeAddr_valid),	// top.scala:161:21
    .axi_lite_writeAddr_bits_addr (_arb_out_writeAddr_bits_addr),	// top.scala:161:21
    .axi_lite_writeData_valid     (_arb_out_writeData_valid),	// top.scala:161:21
    .axi_lite_writeData_bits_data (_arb_out_writeData_bits_data),	// top.scala:161:21
    .axi_lite_writeData_bits_strb (_arb_out_writeData_bits_strb),	// top.scala:161:21
    .axi_lite_writeResp_ready     (_arb_out_writeResp_ready),	// top.scala:161:21
    .axi_lite_readAddr_valid      (_arb_out_readAddr_valid),	// top.scala:161:21
    .axi_lite_readAddr_bits_addr  (_arb_out_readAddr_bits_addr),	// top.scala:161:21
    .axi_lite_readData_ready      (_arb_out_readData_ready),	// top.scala:161:21
    .axi_lite_readData_valid      (_ram_unit_axi_lite_readData_valid),
    .axi_lite_readData_bits_data  (_ram_unit_axi_lite_readData_bits_data),
    .axi_lite_readData_bits_resp  (_ram_unit_axi_lite_readData_bits_resp)
  );


wire [63:0] GPR [31:0];
assign {GPR[31], GPR[30], GPR[29], GPR[28], GPR[27], GPR[26], GPR[25], GPR[24], GPR[23], GPR[22], GPR[21], GPR[20]
, GPR[19], GPR[18], GPR[17], GPR[16], GPR[15], GPR[14], GPR[13], GPR[12], GPR[11], GPR[10], GPR[9], GPR[8], GPR[7]
, GPR[6], GPR[5], GPR[4], GPR[3], GPR[2], GPR[1], GPR[0]} = 
{{_inst_decode_unit_io_ID_GPR_31}, {_inst_decode_unit_io_ID_GPR_30}, {_inst_decode_unit_io_ID_GPR_29}, 
{_inst_decode_unit_io_ID_GPR_28}, {_inst_decode_unit_io_ID_GPR_27}, {_inst_decode_unit_io_ID_GPR_26}, {_inst_decode_unit_io_ID_GPR_25}, 
{_inst_decode_unit_io_ID_GPR_24}, {_inst_decode_unit_io_ID_GPR_23}, {_inst_decode_unit_io_ID_GPR_22}, {_inst_decode_unit_io_ID_GPR_21}, 
{_inst_decode_unit_io_ID_GPR_20}, {_inst_decode_unit_io_ID_GPR_19}, {_inst_decode_unit_io_ID_GPR_18}, {_inst_decode_unit_io_ID_GPR_17}, 
{_inst_decode_unit_io_ID_GPR_16}, {_inst_decode_unit_io_ID_GPR_15}, {_inst_decode_unit_io_ID_GPR_14}, {_inst_decode_unit_io_ID_GPR_13}, 
{_inst_decode_unit_io_ID_GPR_12}, {_inst_decode_unit_io_ID_GPR_11}, {_inst_decode_unit_io_ID_GPR_10}, {_inst_decode_unit_io_ID_GPR_9 }, 
{_inst_decode_unit_io_ID_GPR_8 }, {_inst_decode_unit_io_ID_GPR_7 }, {_inst_decode_unit_io_ID_GPR_6 }, {_inst_decode_unit_io_ID_GPR_5 },
{_inst_decode_unit_io_ID_GPR_4 }, {_inst_decode_unit_io_ID_GPR_3 }, {_inst_decode_unit_io_ID_GPR_2 }, {_inst_decode_unit_io_ID_GPR_1 }, 
{_inst_decode_unit_io_ID_GPR_0}};	// IDU.scala:55:22, :66:20

sim simulate (	// top.scala:24:26
   .IF_pc             (_inst_fetch_unit_io_IF_to_ID_bus_bits_PC),	// top.scala:24:33
   .WB_Inst           (io_WB_Inst),
   .GPR               (GPR),
   .unknown_inst_flag(_inst_decode_unit_io_ID_unknown_inst)
);
  AXI_Arbiter arb (	// top.scala:161:21
    .in_0_writeAddr_valid     (_pre_mem_unit_axi_lite_writeAddr_valid),	// top.scala:72:30
    .in_0_writeAddr_bits_addr (_pre_mem_unit_axi_lite_writeAddr_bits_addr),	// top.scala:72:30
    .in_0_writeData_valid     (_pre_mem_unit_axi_lite_writeData_valid),	// top.scala:72:30
    .in_0_writeData_bits_data (_pre_mem_unit_axi_lite_writeData_bits_data),	// top.scala:72:30
    .in_0_writeData_bits_strb (_pre_mem_unit_axi_lite_writeData_bits_strb),	// top.scala:72:30
    .in_0_writeResp_ready     (_pre_mem_unit_axi_lite_writeResp_ready),	// top.scala:72:30
    .in_0_readAddr_valid      (_pre_mem_unit_axi_lite_readAddr_valid),	// top.scala:72:30
    .in_0_readAddr_bits_addr  (_pre_mem_unit_axi_lite_readAddr_bits_addr),	// top.scala:72:30
    .in_0_readData_ready      (_pre_mem_unit_axi_lite_readData_ready),	// top.scala:72:30
    .in_1_readAddr_valid      (_inst_fetch_unit_axi_lite_readAddr_valid),	// top.scala:69:33
    .in_1_readAddr_bits_addr  (_inst_fetch_unit_axi_lite_readAddr_bits_addr),	// top.scala:69:33
    .in_1_readData_ready      (_inst_fetch_unit_axi_lite_readData_ready),	// top.scala:69:33
    .req_0_valid              (_pre_mem_unit_axi_req_valid),	// top.scala:72:30
    .out_readData_valid       (_ram_unit_axi_lite_readData_valid),	// top.scala:160:26
    .out_readData_bits_data   (_ram_unit_axi_lite_readData_bits_data),	// top.scala:160:26
    .out_readData_bits_resp   (_ram_unit_axi_lite_readData_bits_resp),	// top.scala:160:26
    .in_0_readData_bits_data  (_arb_in_0_readData_bits_data),
    .in_1_readData_valid      (_arb_in_1_readData_valid),
    .in_1_readData_bits_data  (_arb_in_1_readData_bits_data),
    .in_1_readData_bits_resp  (_arb_in_1_readData_bits_resp),
    .req_0_ready              (io_MEM_AXIREQ),
    .req_1_ready              (_arb_req_1_ready),
    .out_writeAddr_valid      (_arb_out_writeAddr_valid),
    .out_writeAddr_bits_addr  (_arb_out_writeAddr_bits_addr),
    .out_writeData_valid      (_arb_out_writeData_valid),
    .out_writeData_bits_data  (_arb_out_writeData_bits_data),
    .out_writeData_bits_strb  (_arb_out_writeData_bits_strb),
    .out_writeResp_ready      (_arb_out_writeResp_ready),
    .out_readAddr_valid       (_arb_out_readAddr_valid),
    .out_readAddr_bits_addr   (_arb_out_readAddr_bits_addr),
    .out_readData_ready       (_arb_out_readData_ready)
  );
  assign io_ID_npc = _inst_decode_unit_io_ID_to_BPU_bus_bits_br_target;	// <stdin>:2581:10, top.scala:70:34
  assign io_PF_pc = _inst_fetch_unit_io_PF_pc;	// <stdin>:2581:10, top.scala:69:33
  assign io_PF_axidata = _inst_fetch_unit_io_axidata;	// <stdin>:2581:10, top.scala:69:33
  assign io_IF_pc = _inst_fetch_unit_io_IF_to_ID_bus_bits_PC;	// <stdin>:2581:10, top.scala:69:33
  assign io_ID_pc = _inst_decode_unit_io_ID_to_EX_bus_bits_PC;	// <stdin>:2581:10, top.scala:70:34
  assign io_EX_pc = _excute_unit_io_EX_to_MEM_bus_bits_PC;	// <stdin>:2581:10, top.scala:71:29
  assign io_PMEM_pc = _pre_mem_unit_io_PMEM_to_MEM_bus_bits_PC;	// <stdin>:2581:10, top.scala:72:30
  assign io_WB_Inst = _wb_unit_io_WB_Inst;	// <stdin>:2581:10, top.scala:74:25
  assign io_WB_RegWriteData = _wb_unit_io_WB_to_ID_forward_bits_regWriteData;	// <stdin>:2581:10, top.scala:74:25
  assign io_WB_RegWriteID = {59'h0, _wb_unit_io_WB_to_ID_forward_bits_regWriteID};	// <stdin>:2581:10, top.scala:74:25, :110:24
  assign io_MEM_RegWriteData = _arb_in_0_readData_bits_data;	// <stdin>:2581:10, top.scala:161:21
  assign io_bp_npc = _bp_unit_io_bp_npc;	// <stdin>:2581:10, top.scala:68:33
  assign io_bp_taken = _bp_unit_io_bp_taken;	// <stdin>:2581:10, top.scala:68:33
  assign io_bp_flush = _bp_unit_io_bp_flush;	// <stdin>:2581:10, top.scala:68:33
  assign io_IF_Inst = _inst_fetch_unit_io_IF_to_ID_bus_bits_Inst;	// <stdin>:2581:10, top.scala:69:33
  assign io_IF_valid = _inst_fetch_unit_io_IF_to_ID_bus_valid;	// <stdin>:2581:10, top.scala:69:33
  assign io_IF_AXIREQ = _arb_req_1_ready;	// <stdin>:2581:10, top.scala:161:21
  assign io_ID_ALU_Data1 = _inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data1;	// <stdin>:2581:10, top.scala:70:34
  assign io_ID_ALU_Data2 = _inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data2;	// <stdin>:2581:10, top.scala:70:34
  assign io_ID_Rs2Data = _inst_decode_unit_io_ID_to_EX_bus_bits_rs2_data;	// <stdin>:2581:10, top.scala:70:34
  assign io_ALUResult = _excute_unit_io_EX_to_MEM_bus_bits_ALU_result;	// <stdin>:2581:10, top.scala:71:29
endmodule


// ----- 8< ----- FILE "./build/sim_sram.v" ----- 8< -----

import "DPI-C" function void dci_pmem_write(input longint waddr, input longint wdata, input byte wmask);
import "DPI-C" function void dci_pmem_read(input longint raddr, output longint rdata, input byte rmask);

module sim_sram(
    input       [63:0]      pc          ,         //for debug
    input                   aresetn     ,
    input                   aclk        ,
    //ar
    input       [31:0]      araddr      ,
    input                   arvalid     ,
    output                  arready     ,
    //r
    output      [63:0]      rdata       ,
    output      [1: 0]      rresp       ,
    output                  rvalid      ,
    input                   rready      ,
    //aw
    input       [31:0]      awaddr      ,
    input                   awvalid     ,
    output                  awready     , 
    //w
    input       [63:0]      wdata       , 
    input       [7: 0]      wstrb       ,
    input                   wvalid      ,
    output                  wready      ,
    //b
    output      [1: 0]      bresp       ,
    output                  bvalid      ,
    input                   bready
);

    reg arready_r, rvalid_r, awready_r, wready_r, bvalid_r;
    reg [1:0] rresp_r, bresp_r;
    reg [63:0] rdata_r;
    reg [31:0] awaddr_r;
 
    assign arready = arready_r;
    assign rvalid = rvalid_r;
    assign awready = awready_r;
    assign wready = wready_r;
    assign bvalid = bvalid_r;
    assign rresp = rresp_r;
    assign bresp = bresp_r;
    assign rdata = rdata_r;

    //ar      
    always@(posedge aclk) begin
        if(!aresetn) begin
            arready_r <= 1'b1;
        end
        else if(arvalid) begin
            arready_r <= 1'b1;
        end
        else 
            arready_r <= 1'b1;
    end

    //rresp
    always@(posedge aclk) begin
        if(!aresetn) begin
            rvalid_r <= 1'b0;
            rresp_r  <= 2'b0;
        end
        else begin
            if(arready_r & arvalid) begin
                rvalid_r <= 1'b1;
                rresp_r  <= 2'b00;
            end
            else if(rvalid_r & rready) begin
                rvalid_r <= 1'b0;
            end
        end 
    end

    //r
    always@(posedge aclk) begin
        if(!aresetn) begin
            rdata_r = 64'b0;
        end
        else begin
            if(arready_r & arvalid) begin
                dci_pmem_read({32'H0000, araddr}, rdata_r, 8'HFF);
                // $display("raddr:0x%x rdata:0x%x", araddr, rdata);
            end
        end
        // $display("addr:0x%x, rdata:0x%x", araddr_r, rdata_r);
    end

    //aw
    always@(posedge aclk) begin
        if(!aresetn) begin
            awready_r <= 1'b1;
            awaddr_r <= 32'b0;
        end
        else begin
            if(awvalid) begin
                awaddr_r <= awaddr;
                awready_r <= 1'b1;
            end
        end
    end

    //w
    always@(posedge aclk) begin
        if(!aresetn) begin
            wready_r <= 1'b1;
        end
        else begin
            if(wvalid & awvalid)  begin
                dci_pmem_write({32'H0000, awaddr}, wdata, wstrb);
            end
        end
    end

    //b
    always@(posedge aclk) begin
        if(!aresetn) begin
            bvalid_r <= 1'b0;
            bresp_r  <= 2'b00;
        end
        else begin
            if(wready_r & wvalid & wready_r) begin
                bvalid_r <= 1'b1;
                bresp_r  <= 2'b00;
            end
            else if(bready & bvalid_r)
                bvalid_r <= 1'b0;
        end
    end

endmodule

// ----- 8< ----- FILE "./build/sim.v" ----- 8< -----

import "DPI-C" function void set_gpr_ptr(input logic [63:0] a []);
import "DPI-C" function void unknown_inst();
import "DPI-C" function void ebreak(input longint halt_ret);

module sim(input[63:0] IF_pc, input [63:0] GPR [31:0], input unknown_inst_flag, input[31:0] WB_Inst);

   initial begin
      if ($test$plusargs("trace") != 0) begin
         $display("[%0t] Tracing to logs/vlt_dump.vcd...\n", $time);
         $dumpfile("logs/vlt_dump.vcd");
         $dumpvars();
      end
      $display("[%0t] Model running...\n", $time);
   end

   initial set_gpr_ptr(GPR);    // rf为通用寄存器的二维数组变量

  always@(*) begin
      reg [63:0] i = GPR[10][63:0];
      if(unknown_inst_flag) unknown_inst();
      if(WB_Inst[31:0] == 32'h00100073) begin
        ebreak(i);
        $finish();
      end
  end

endmodule

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----

