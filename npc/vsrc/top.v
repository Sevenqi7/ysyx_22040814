// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

// external module sim_sram

module IF_pre_fetch(	// <stdin>:25:10
  input         clock,
                reset,
  input  [63:0] io_IF_pc,
                io_ID_npc,
  input         io_stall,
                axi_lite_readData_valid,
  input  [63:0] axi_lite_readData_bits_data,
  input  [1:0]  axi_lite_readData_bits_resp,
  output [31:0] io_inst,
  output        io_inst_valid,
  output [63:0] io_PF_pc,
  output        io_bp_fail,
  output [63:0] io_PF_npc,
  output        axi_lite_readAddr_valid,
  output [31:0] axi_lite_readAddr_bits_addr,
  output        axi_lite_readData_ready);

  reg  [63:0] rhsReg;	// tools.scala:32:33
  reg  [63:0] PF_npc;	// pre_fetch.scala:20:27
  wire        _io_bp_fail_T_6 = io_ID_npc != rhsReg & (|rhsReg) & (|io_IF_pc) & ~io_stall;	// pre_fetch.scala:29:{29,54,74,82,85}, tools.scala:32:33
  reg         bp_fail_r;	// pre_fetch.scala:30:28
  always @(posedge clock) begin
    if (reset) begin
      PF_npc <= 64'h80000000;	// pre_fetch.scala:20:27
      bp_fail_r <= 1'h0;	// pre_fetch.scala:29:54, :30:28
    end
    else begin
      if (io_stall) begin
      end
      else if (_io_bp_fail_T_6)	// pre_fetch.scala:29:82
        PF_npc <= io_ID_npc;	// pre_fetch.scala:20:27
      else	// pre_fetch.scala:29:82
        PF_npc <= PF_npc + 64'h4;	// pre_fetch.scala:20:27, :24:34
      bp_fail_r <= _io_bp_fail_T_6;	// pre_fetch.scala:29:82, :30:28
    end
    if (reset | _io_bp_fail_T_6)	// pre_fetch.scala:29:82, :32:64
      rhsReg <= 64'h0;	// tools.scala:32:33
    else if (io_stall) begin	// pre_fetch.scala:29:82, :32:64
    end
    else	// pre_fetch.scala:29:82, :32:64
      rhsReg <= PF_npc;	// pre_fetch.scala:20:27, tools.scala:32:33
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:25:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:25:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:25:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:25:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:25:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:25:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:25:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:25:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:25:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:25:10
        `INIT_RANDOM_PROLOG_	// <stdin>:25:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:25:10
        _RANDOM_0 = `RANDOM;	// <stdin>:25:10
        _RANDOM_1 = `RANDOM;	// <stdin>:25:10
        _RANDOM_2 = `RANDOM;	// <stdin>:25:10
        _RANDOM_3 = `RANDOM;	// <stdin>:25:10
        _RANDOM_4 = `RANDOM;	// <stdin>:25:10
        PF_npc = {_RANDOM_0, _RANDOM_1};	// pre_fetch.scala:20:27
        bp_fail_r = _RANDOM_2[0];	// pre_fetch.scala:30:28
        rhsReg = {_RANDOM_2[31:1], _RANDOM_3, _RANDOM_4[0]};	// pre_fetch.scala:30:28, tools.scala:32:33
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:25:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:25:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_inst = axi_lite_readData_bits_data[31:0];	// <stdin>:25:10, pre_fetch.scala:47:37
  assign io_inst_valid = axi_lite_readData_valid & axi_lite_readData_bits_resp == 2'h0 & ~_io_bp_fail_T_6 &
                ~bp_fail_r;	// <stdin>:25:10, pre_fetch.scala:29:82, :30:28, :48:{96,107,119,121}
  assign io_PF_pc = rhsReg;	// <stdin>:25:10, tools.scala:32:33
  assign io_bp_fail = _io_bp_fail_T_6;	// <stdin>:25:10, pre_fetch.scala:29:82
  assign io_PF_npc = PF_npc;	// <stdin>:25:10, pre_fetch.scala:20:27
  assign axi_lite_readAddr_valid = ~io_stall;	// <stdin>:25:10, pre_fetch.scala:29:85
  assign axi_lite_readAddr_bits_addr = PF_npc[31:0];	// <stdin>:25:10, pre_fetch.scala:20:27, :44:46
  assign axi_lite_readData_ready = ~io_stall;	// <stdin>:25:10, pre_fetch.scala:29:85
endmodule

module IFU(	// <stdin>:79:10
  input         clock,
                reset,
  input  [63:0] io_ID_npc,
  input         io_IF_to_ID_bus_ready,
  output        io_IF_to_ID_bus_valid,
  output [63:0] io_IF_to_ID_bus_bits_PC,
  output [31:0] io_IF_to_ID_bus_bits_Inst,
  output [63:0] io_PF_npc,
                io_PF_pc);

  wire [31:0] _pre_fetch_io_inst;	// IFU.scala:51:27
  wire        _pre_fetch_io_inst_valid;	// IFU.scala:51:27
  wire [63:0] _pre_fetch_io_PF_pc;	// IFU.scala:51:27
  wire        _pre_fetch_io_bp_fail;	// IFU.scala:51:27
  wire        _pre_fetch_axi_lite_readAddr_valid;	// IFU.scala:51:27
  wire [31:0] _pre_fetch_axi_lite_readAddr_bits_addr;	// IFU.scala:51:27
  wire        _pre_fetch_axi_lite_readData_ready;	// IFU.scala:51:27
  wire        _inst_ram_arready;	// IFU.scala:50:26
  wire [63:0] _inst_ram_rdata;	// IFU.scala:50:26
  wire [1:0]  _inst_ram_rresp;	// IFU.scala:50:26
  wire        _inst_ram_rvalid;	// IFU.scala:50:26
  wire        _inst_ram_awready;	// IFU.scala:50:26
  wire        _inst_ram_wready;	// IFU.scala:50:26
  wire [1:0]  _inst_ram_bresp;	// IFU.scala:50:26
  wire        _inst_ram_bvalid;	// IFU.scala:50:26
  reg  [63:0] rhsReg;	// tools.scala:32:33
  reg  [31:0] rhsReg_1;	// tools.scala:32:33
  reg         rhsReg_2;	// tools.scala:32:33
  always @(posedge clock) begin
    if (reset | ~_pre_fetch_io_inst_valid | _pre_fetch_io_bp_fail) begin	// IFU.scala:51:27, :90:{63,88}
      rhsReg <= 64'h0;	// IFU.scala:51:27, tools.scala:32:33
      rhsReg_1 <= 32'h0;	// IFU.scala:51:27, tools.scala:32:33
      rhsReg_2 <= 1'h0;	// IFU.scala:51:27, tools.scala:32:33
    end
    else if (io_IF_to_ID_bus_ready) begin	// IFU.scala:51:27, :90:{63,88}
      rhsReg <= _pre_fetch_io_PF_pc;	// IFU.scala:51:27, tools.scala:32:33
      rhsReg_1 <= _pre_fetch_io_inst;	// IFU.scala:51:27, tools.scala:32:33
      rhsReg_2 <= _pre_fetch_io_inst_valid;	// IFU.scala:51:27, tools.scala:32:33
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:79:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:79:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:79:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:79:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:79:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:79:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:79:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:79:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:79:10
        `INIT_RANDOM_PROLOG_	// <stdin>:79:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:79:10
        _RANDOM_0 = `RANDOM;	// <stdin>:79:10
        _RANDOM_1 = `RANDOM;	// <stdin>:79:10
        _RANDOM_2 = `RANDOM;	// <stdin>:79:10
        _RANDOM_3 = `RANDOM;	// <stdin>:79:10
        rhsReg = {_RANDOM_0, _RANDOM_1};	// tools.scala:32:33
        rhsReg_1 = _RANDOM_2;	// tools.scala:32:33
        rhsReg_2 = _RANDOM_3[0];	// tools.scala:32:33
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:79:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:79:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  sim_sram inst_ram (	// IFU.scala:50:26
    .pc      (_pre_fetch_io_PF_pc),	// IFU.scala:51:27
    .aclk    (clock),
    .aresetn (~reset),	// IFU.scala:66:48
    .araddr  (_pre_fetch_axi_lite_readAddr_bits_addr),	// IFU.scala:51:27
    .arvalid (_pre_fetch_axi_lite_readAddr_valid),	// IFU.scala:51:27
    .rready  (_pre_fetch_axi_lite_readData_ready),	// IFU.scala:51:27
    .awaddr  (32'h0),	// IFU.scala:51:27
    .awvalid (1'h0),	// IFU.scala:51:27
    .wdata   (64'h0),	// IFU.scala:51:27
    .wstrb   (8'h0),	// IFU.scala:51:27
    .wvalid  (1'h0),	// IFU.scala:51:27
    .bready  (1'h0),	// IFU.scala:51:27
    .arready (_inst_ram_arready),
    .rdata   (_inst_ram_rdata),
    .rresp   (_inst_ram_rresp),
    .rvalid  (_inst_ram_rvalid),
    .awready (_inst_ram_awready),
    .wready  (_inst_ram_wready),
    .bresp   (_inst_ram_bresp),
    .bvalid  (_inst_ram_bvalid)
  );
  IF_pre_fetch pre_fetch (	// IFU.scala:51:27
    .clock                       (clock),
    .reset                       (reset),
    .io_IF_pc                    (rhsReg),	// tools.scala:32:33
    .io_ID_npc                   (io_ID_npc),
    .io_stall                    (~io_IF_to_ID_bus_ready),	// IFU.scala:61:48
    .axi_lite_readData_valid     (_inst_ram_rvalid),	// IFU.scala:50:26
    .axi_lite_readData_bits_data (_inst_ram_rdata),	// IFU.scala:50:26
    .axi_lite_readData_bits_resp (_inst_ram_rresp),	// IFU.scala:50:26
    .io_inst                     (_pre_fetch_io_inst),
    .io_inst_valid               (_pre_fetch_io_inst_valid),
    .io_PF_pc                    (_pre_fetch_io_PF_pc),
    .io_bp_fail                  (_pre_fetch_io_bp_fail),
    .io_PF_npc                   (io_PF_npc),
    .axi_lite_readAddr_valid     (_pre_fetch_axi_lite_readAddr_valid),
    .axi_lite_readAddr_bits_addr (_pre_fetch_axi_lite_readAddr_bits_addr),
    .axi_lite_readData_ready     (_pre_fetch_axi_lite_readData_ready)
  );
  assign io_IF_to_ID_bus_valid = rhsReg_2;	// <stdin>:79:10, tools.scala:32:33
  assign io_IF_to_ID_bus_bits_PC = rhsReg;	// <stdin>:79:10, tools.scala:32:33
  assign io_IF_to_ID_bus_bits_Inst = rhsReg_1;	// <stdin>:79:10, tools.scala:32:33
  assign io_PF_pc = _pre_fetch_io_PF_pc;	// <stdin>:79:10, IFU.scala:51:27
endmodule

module IDU(	// <stdin>:166:10
  input         clock,
                reset,
                io_IF_to_ID_bus_valid,
  input  [63:0] io_IF_to_ID_bus_bits_PC,
  input  [31:0] io_IF_to_ID_bus_bits_Inst,
  input  [63:0] io_WB_to_ID_forward_bits_regWriteData,
  input         io_WB_to_ID_forward_bits_regWriteEn,
  input  [4:0]  io_WB_to_ID_forward_bits_regWriteID,
  input  [63:0] io_MEM_to_ID_forward_bits_regWriteData,
  input         io_MEM_to_ID_forward_bits_regWriteEn,
  input  [4:0]  io_MEM_to_ID_forward_bits_regWriteID,
  input  [63:0] io_EX_ALUResult,
  output        io_IF_to_ID_bus_ready,
  output [63:0] io_ID_npc,
  output        io_ID_to_EX_bus_valid,
  output [63:0] io_ID_to_EX_bus_bits_ALU_Data1,
                io_ID_to_EX_bus_bits_ALU_Data2,
  output        io_ID_to_EX_bus_bits_futype,
  output [4:0]  io_ID_to_EX_bus_bits_optype,
  output [63:0] io_ID_to_EX_bus_bits_rs1_data,
                io_ID_to_EX_bus_bits_rs2_data,
  output [4:0]  io_ID_to_EX_bus_bits_regWriteID,
  output        io_ID_to_EX_bus_bits_regWriteEn,
                io_ID_to_EX_bus_bits_memWriteEn,
                io_ID_to_EX_bus_bits_memReadEn,
  output [63:0] io_ID_to_EX_bus_bits_PC,
  output [31:0] io_ID_to_EX_bus_bits_Inst,
  output        io_ID_stall,
  output [63:0] io_ID_GPR_0,
                io_ID_GPR_1,
                io_ID_GPR_2,
                io_ID_GPR_3,
                io_ID_GPR_4,
                io_ID_GPR_5,
                io_ID_GPR_6,
                io_ID_GPR_7,
                io_ID_GPR_8,
                io_ID_GPR_9,
                io_ID_GPR_10,
                io_ID_GPR_11,
                io_ID_GPR_12,
                io_ID_GPR_13,
                io_ID_GPR_14,
                io_ID_GPR_15,
                io_ID_GPR_16,
                io_ID_GPR_17,
                io_ID_GPR_18,
                io_ID_GPR_19,
                io_ID_GPR_20,
                io_ID_GPR_21,
                io_ID_GPR_22,
                io_ID_GPR_23,
                io_ID_GPR_24,
                io_ID_GPR_25,
                io_ID_GPR_26,
                io_ID_GPR_27,
                io_ID_GPR_28,
                io_ID_GPR_29,
                io_ID_GPR_30,
                io_ID_GPR_31,
  output        io_ID_unknown_inst);

  reg               rhsReg_5;	// tools.scala:23:33
  reg  [4:0]        rhsReg_3;	// tools.scala:23:33
  wire              _InstInfo_T_1 = io_IF_to_ID_bus_bits_Inst == 32'h100073;	// Lookup.scala:31:38
  wire              _InstInfo_T_3 = io_IF_to_ID_bus_bits_Inst[6:0] == 7'h17;	// Lookup.scala:31:38
  wire              _InstInfo_T_5 = io_IF_to_ID_bus_bits_Inst[6:0] == 7'h37;	// Lookup.scala:31:38
  wire [9:0]        _GEN = {io_IF_to_ID_bus_bits_Inst[14:12], io_IF_to_ID_bus_bits_Inst[6:0]};	// Lookup.scala:31:38
  wire              _InstInfo_T_7 = _GEN == 10'h13;	// Lookup.scala:31:38
  wire [15:0]       _GEN_0 = {io_IF_to_ID_bus_bits_Inst[31:26], io_IF_to_ID_bus_bits_Inst[14:12],
                io_IF_to_ID_bus_bits_Inst[6:0]};	// Lookup.scala:31:38
  wire              _InstInfo_T_9 = _GEN_0 == 16'h93;	// Lookup.scala:31:38
  wire              _InstInfo_T_11 = _GEN_0 == 16'h293;	// Lookup.scala:31:38
  wire              _InstInfo_T_13 = _GEN_0 == 16'h4293;	// Lookup.scala:31:38
  wire              _InstInfo_T_15 = _GEN == 10'h67;	// Lookup.scala:31:38
  wire              _InstInfo_T_17 = _GEN == 10'h213;	// Lookup.scala:31:38
  wire              _InstInfo_T_19 = _GEN == 10'h313;	// Lookup.scala:31:38
  wire              _InstInfo_T_21 = _GEN == 10'h393;	// Lookup.scala:31:38
  wire              _InstInfo_T_23 = _GEN == 10'h113;	// Lookup.scala:31:38
  wire              _InstInfo_T_25 = _GEN == 10'h193;	// Lookup.scala:31:38
  wire              _InstInfo_T_27 = _GEN == 10'h1B;	// Lookup.scala:31:38
  wire [16:0]       _GEN_1 = {io_IF_to_ID_bus_bits_Inst[31:25], io_IF_to_ID_bus_bits_Inst[14:12],
                io_IF_to_ID_bus_bits_Inst[6:0]};	// Lookup.scala:31:38
  wire              _InstInfo_T_29 = _GEN_1 == 17'h9B;	// Lookup.scala:31:38
  wire              _InstInfo_T_31 = _GEN_1 == 17'h29B;	// Lookup.scala:31:38
  wire              _InstInfo_T_33 = _GEN_1 == 17'h829B;	// Lookup.scala:31:38
  wire              _InstInfo_T_35 = _GEN == 10'h3;	// Lookup.scala:31:38
  wire              _InstInfo_T_37 = _GEN == 10'h83;	// Lookup.scala:31:38
  wire              _InstInfo_T_39 = _GEN == 10'h103;	// Lookup.scala:31:38
  wire              _InstInfo_T_41 = _GEN == 10'h183;	// Lookup.scala:31:38
  wire              _InstInfo_T_43 = _GEN == 10'h203;	// Lookup.scala:31:38
  wire              _InstInfo_T_45 = _GEN == 10'h283;	// Lookup.scala:31:38
  wire              _InstInfo_T_47 = _GEN == 10'h303;	// Lookup.scala:31:38
  wire              _InstInfo_T_49 = _GEN == 10'h1A3;	// Lookup.scala:31:38
  wire              _InstInfo_T_51 = _GEN == 10'h123;	// Lookup.scala:31:38
  wire              _InstInfo_T_53 = _GEN == 10'hA3;	// Lookup.scala:31:38
  wire              _InstInfo_T_203 = _GEN == 10'h23;	// Lookup.scala:31:38
  wire              _InstInfo_T_57 = _GEN_1 == 17'h33;	// Lookup.scala:31:38
  wire              _InstInfo_T_59 = _GEN_1 == 17'hB3;	// Lookup.scala:31:38
  wire              _InstInfo_T_61 = _GEN_1 == 17'h8033;	// Lookup.scala:31:38
  wire              _InstInfo_T_63 = _GEN_1 == 17'h233;	// Lookup.scala:31:38
  wire              _InstInfo_T_65 = _GEN_1 == 17'h333;	// Lookup.scala:31:38
  wire              _InstInfo_T_67 = _GEN_1 == 17'h3B3;	// Lookup.scala:31:38
  wire              _InstInfo_T_69 = _GEN_1 == 17'h133;	// Lookup.scala:31:38
  wire              _InstInfo_T_71 = _GEN_1 == 17'h1B3;	// Lookup.scala:31:38
  wire              _InstInfo_T_73 = _GEN_1 == 17'h433;	// Lookup.scala:31:38
  wire              _InstInfo_T_75 = _GEN_1 == 17'h633;	// Lookup.scala:31:38
  wire              _InstInfo_T_77 = _GEN_1 == 17'h6B3;	// Lookup.scala:31:38
  wire              _InstInfo_T_79 = _GEN_1 == 17'h733;	// Lookup.scala:31:38
  wire              _InstInfo_T_81 = _GEN_1 == 17'h7B3;	// Lookup.scala:31:38
  wire              _InstInfo_T_83 = _GEN_1 == 17'h3B;	// Lookup.scala:31:38
  wire              _InstInfo_T_85 = _GEN_1 == 17'h803B;	// Lookup.scala:31:38
  wire              _InstInfo_T_87 = _GEN_1 == 17'hBB;	// Lookup.scala:31:38
  wire              _InstInfo_T_89 = _GEN_1 == 17'h2BB;	// Lookup.scala:31:38
  wire              _InstInfo_T_91 = _GEN_1 == 17'h82BB;	// Lookup.scala:31:38
  wire              _InstInfo_T_93 = _GEN_1 == 17'h43B;	// Lookup.scala:31:38
  wire              _InstInfo_T_95 = _GEN_1 == 17'h63B;	// Lookup.scala:31:38
  wire              _InstInfo_T_97 = _GEN_1 == 17'h6BB;	// Lookup.scala:31:38
  wire              _InstInfo_T_99 = _GEN_1 == 17'h73B;	// Lookup.scala:31:38
  wire              _InstInfo_T_101 = _GEN_1 == 17'h7BB;	// Lookup.scala:31:38
  wire              _InstInfo_T_103 = io_IF_to_ID_bus_bits_Inst[6:0] == 7'h6F;	// Lookup.scala:31:38
  wire              _InstInfo_T_105 = _GEN == 10'h63;	// Lookup.scala:31:38
  wire              _InstInfo_T_107 = _GEN == 10'hE3;	// Lookup.scala:31:38
  wire              _InstInfo_T_109 = _GEN == 10'h263;	// Lookup.scala:31:38
  wire              _InstInfo_T_111 = _GEN == 10'h363;	// Lookup.scala:31:38
  wire              _InstInfo_T_113 = _GEN == 10'h2E3;	// Lookup.scala:31:38
  wire              _InstInfo_T_115 = _GEN == 10'h3E3;	// Lookup.scala:31:38
  wire              _GEN_2 = _InstInfo_T_57 | _InstInfo_T_59 | _InstInfo_T_61 | _InstInfo_T_63 | _InstInfo_T_65 |
                _InstInfo_T_67 | _InstInfo_T_69 | _InstInfo_T_71 | _InstInfo_T_73 | _InstInfo_T_75 |
                _InstInfo_T_77 | _InstInfo_T_79 | _InstInfo_T_81 | _InstInfo_T_83 | _InstInfo_T_85 |
                _InstInfo_T_87 | _InstInfo_T_89 | _InstInfo_T_91 | _InstInfo_T_93 | _InstInfo_T_95 |
                _InstInfo_T_97 | _InstInfo_T_99 | _InstInfo_T_101;	// Lookup.scala:31:38, :34:39
  wire [2:0]        InstInfo_0 = _InstInfo_T_1 ? 3'h7 : _InstInfo_T_3 | _InstInfo_T_5 ? 3'h3 : _InstInfo_T_7 | _InstInfo_T_9
                | _InstInfo_T_11 | _InstInfo_T_13 | _InstInfo_T_15 | _InstInfo_T_17 | _InstInfo_T_19 |
                _InstInfo_T_21 | _InstInfo_T_23 | _InstInfo_T_25 | _InstInfo_T_27 | _InstInfo_T_29 |
                _InstInfo_T_31 | _InstInfo_T_33 | _InstInfo_T_35 | _InstInfo_T_37 | _InstInfo_T_39 |
                _InstInfo_T_41 | _InstInfo_T_43 | _InstInfo_T_45 | _InstInfo_T_47 ? 3'h1 : _InstInfo_T_49 |
                _InstInfo_T_51 | _InstInfo_T_53 | _InstInfo_T_203 ? 3'h4 : _GEN_2 ? 3'h2 : _InstInfo_T_103
                ? 3'h5 : _InstInfo_T_105 | _InstInfo_T_107 | _InstInfo_T_109 | _InstInfo_T_111 |
                _InstInfo_T_113 | _InstInfo_T_115 ? 3'h6 : 3'h0;	// Lookup.scala:31:38, :34:39
  wire              _GEN_3 = _InstInfo_T_105 | _InstInfo_T_107 | _InstInfo_T_109 | _InstInfo_T_111 | _InstInfo_T_113;	// Lookup.scala:31:38, :34:39
  wire              _GEN_4 = _InstInfo_T_17 | _InstInfo_T_19 | _InstInfo_T_21 | _InstInfo_T_23 | _InstInfo_T_25 |
                _InstInfo_T_27 | _InstInfo_T_29 | _InstInfo_T_31 | _InstInfo_T_33 | _InstInfo_T_35 |
                _InstInfo_T_37 | _InstInfo_T_39 | _InstInfo_T_41 | _InstInfo_T_43 | _InstInfo_T_45 |
                _InstInfo_T_47 | _InstInfo_T_49 | _InstInfo_T_51 | _InstInfo_T_53 | _InstInfo_T_203 |
                _InstInfo_T_57;	// Lookup.scala:31:38, :34:39
  wire              _GEN_5 = _InstInfo_T_59 | _InstInfo_T_61 | _InstInfo_T_63 | _InstInfo_T_65 | _InstInfo_T_67 |
                _InstInfo_T_69 | _InstInfo_T_71 | _InstInfo_T_73 | _InstInfo_T_75 | _InstInfo_T_77 |
                _InstInfo_T_79 | _InstInfo_T_81 | _InstInfo_T_83 | _InstInfo_T_85 | _InstInfo_T_87 |
                _InstInfo_T_89 | _InstInfo_T_91 | _InstInfo_T_93 | _InstInfo_T_95 | _InstInfo_T_97 |
                _InstInfo_T_99 | _InstInfo_T_101;	// Lookup.scala:31:38, :34:39
  wire [2:0]        InstInfo_2 = _InstInfo_T_1 ? 3'h0 : _InstInfo_T_3 ? 3'h1 : _InstInfo_T_5 ? 3'h0 : _InstInfo_T_7 |
                _InstInfo_T_9 | _InstInfo_T_11 | _InstInfo_T_13 ? 3'h2 : _InstInfo_T_15 ? 3'h6 : _GEN_4 |
                _GEN_5 ? 3'h2 : _InstInfo_T_103 ? 3'h6 : {1'h0, _GEN_3 ? 2'h2 : {_InstInfo_T_115, 1'h0}};	// Lookup.scala:31:38, :34:39
  wire [2:0]        InstInfo_3 = _InstInfo_T_1 ? 3'h0 : _InstInfo_T_3 | _InstInfo_T_5 | _InstInfo_T_7 ? 3'h4 : _InstInfo_T_9
                | _InstInfo_T_11 | _InstInfo_T_13 ? 3'h5 : _InstInfo_T_15 ? 3'h0 : _InstInfo_T_17 |
                _InstInfo_T_19 | _InstInfo_T_21 | _InstInfo_T_23 | _InstInfo_T_25 | _InstInfo_T_27 ? 3'h4 :
                _InstInfo_T_29 | _InstInfo_T_31 | _InstInfo_T_33 ? 3'h5 : _InstInfo_T_35 | _InstInfo_T_37 |
                _InstInfo_T_39 | _InstInfo_T_41 | _InstInfo_T_43 | _InstInfo_T_45 | _InstInfo_T_47 |
                _InstInfo_T_49 | _InstInfo_T_51 | _InstInfo_T_53 | _InstInfo_T_203 ? 3'h4 : {1'h0, _GEN_2 ?
                2'h3 : _InstInfo_T_103 ? 2'h0 : _GEN_3 ? 2'h3 : {2{_InstInfo_T_115}}};	// IDU.scala:198:28, Lookup.scala:31:38, :34:39
  wire [4:0]        _GEN_6 = {2'h0, _InstInfo_T_103 | _InstInfo_T_105 ? 3'h1 : _InstInfo_T_107 ? 3'h2 : _InstInfo_T_109
                ? 3'h3 : _InstInfo_T_111 ? 3'h4 : _InstInfo_T_113 ? 3'h6 : _InstInfo_T_115 ? 3'h5 : 3'h0};	// IDU.scala:198:28, Lookup.scala:31:38, :34:39
  wire              _GEN_7 = _InstInfo_T_1 | _InstInfo_T_3 | _InstInfo_T_5 | _InstInfo_T_7;	// Lookup.scala:31:38, :34:39
  wire [4:0]        InstInfo_4 = _GEN_7 ? 5'h1 : _InstInfo_T_9 ? 5'h7 : _InstInfo_T_11 ? 5'h8 : _InstInfo_T_13 ? 5'h9 :
                _InstInfo_T_15 ? 5'h1 : _InstInfo_T_17 ? 5'h6 : _InstInfo_T_19 ? 5'h5 : _InstInfo_T_21 ?
                5'h4 : _InstInfo_T_23 ? 5'hA : _InstInfo_T_25 ? 5'hB : _InstInfo_T_27 ? 5'h11 :
                _InstInfo_T_29 ? 5'h13 : _InstInfo_T_31 ? 5'h15 : _InstInfo_T_33 ? 5'h14 : _InstInfo_T_35 ?
                5'h3 : _InstInfo_T_37 ? 5'h5 : _InstInfo_T_39 ? 5'h9 : _InstInfo_T_41 ? 5'h11 :
                _InstInfo_T_43 ? 5'h2 : _InstInfo_T_45 ? 5'h4 : _InstInfo_T_47 ? 5'h8 : _InstInfo_T_49 ?
                5'h10 : _InstInfo_T_51 ? 5'h8 : _InstInfo_T_53 ? 5'h4 : _InstInfo_T_203 ? 5'h2 :
                _InstInfo_T_57 ? 5'h1 : _InstInfo_T_59 ? 5'h7 : _InstInfo_T_61 ? 5'h2 : _InstInfo_T_63 ?
                5'h6 : _InstInfo_T_65 ? 5'h5 : _InstInfo_T_67 ? 5'h4 : _InstInfo_T_69 ? 5'hA :
                _InstInfo_T_71 ? 5'hB : _InstInfo_T_73 ? 5'hC : _InstInfo_T_75 ? 5'hD : _InstInfo_T_77 ?
                5'hE : _InstInfo_T_79 ? 5'hF : _InstInfo_T_81 ? 5'h10 : _InstInfo_T_83 ? 5'h11 :
                _InstInfo_T_85 ? 5'h12 : _InstInfo_T_87 ? 5'h13 : _InstInfo_T_89 ? 5'h15 : _InstInfo_T_91 ?
                5'h14 : _InstInfo_T_93 ? 5'h19 : _InstInfo_T_95 ? 5'h1A : _InstInfo_T_97 ? 5'h1B :
                _InstInfo_T_99 ? 5'h1C : _InstInfo_T_101 ? 5'h1D : _GEN_6;	// IDU.scala:132:28, Lookup.scala:31:38, :34:39
  wire [51:0]       _immI_T_2 = {52{io_IF_to_ID_bus_bits_Inst[31]}};	// Bitwise.scala:77:12, IDU.scala:85:33
  wire [51:0]       _GEN_8 = {52{io_IF_to_ID_bus_bits_Inst[31]}};	// IDU.scala:85:33, :87:10
  reg  [63:0]       GPR_0;	// IDU.scala:100:22
  reg  [63:0]       GPR_1;	// IDU.scala:100:22
  reg  [63:0]       GPR_2;	// IDU.scala:100:22
  reg  [63:0]       GPR_3;	// IDU.scala:100:22
  reg  [63:0]       GPR_4;	// IDU.scala:100:22
  reg  [63:0]       GPR_5;	// IDU.scala:100:22
  reg  [63:0]       GPR_6;	// IDU.scala:100:22
  reg  [63:0]       GPR_7;	// IDU.scala:100:22
  reg  [63:0]       GPR_8;	// IDU.scala:100:22
  reg  [63:0]       GPR_9;	// IDU.scala:100:22
  reg  [63:0]       GPR_10;	// IDU.scala:100:22
  reg  [63:0]       GPR_11;	// IDU.scala:100:22
  reg  [63:0]       GPR_12;	// IDU.scala:100:22
  reg  [63:0]       GPR_13;	// IDU.scala:100:22
  reg  [63:0]       GPR_14;	// IDU.scala:100:22
  reg  [63:0]       GPR_15;	// IDU.scala:100:22
  reg  [63:0]       GPR_16;	// IDU.scala:100:22
  reg  [63:0]       GPR_17;	// IDU.scala:100:22
  reg  [63:0]       GPR_18;	// IDU.scala:100:22
  reg  [63:0]       GPR_19;	// IDU.scala:100:22
  reg  [63:0]       GPR_20;	// IDU.scala:100:22
  reg  [63:0]       GPR_21;	// IDU.scala:100:22
  reg  [63:0]       GPR_22;	// IDU.scala:100:22
  reg  [63:0]       GPR_23;	// IDU.scala:100:22
  reg  [63:0]       GPR_24;	// IDU.scala:100:22
  reg  [63:0]       GPR_25;	// IDU.scala:100:22
  reg  [63:0]       GPR_26;	// IDU.scala:100:22
  reg  [63:0]       GPR_27;	// IDU.scala:100:22
  reg  [63:0]       GPR_28;	// IDU.scala:100:22
  reg  [63:0]       GPR_29;	// IDU.scala:100:22
  reg  [63:0]       GPR_30;	// IDU.scala:100:22
  reg  [63:0]       GPR_31;	// IDU.scala:100:22
  wire              _rs1_data_T = io_IF_to_ID_bus_bits_Inst[19:15] == 5'h0;	// IDU.scala:87:57, :113:19, :117:15
  wire              _load_use_stall_T_7 = rhsReg_3 == io_IF_to_ID_bus_bits_Inst[19:15];	// IDU.scala:113:19, :118:44, tools.scala:23:33
  wire              _rs1_data_T_2 = _load_use_stall_T_7 & rhsReg_5;	// IDU.scala:118:{44,53}, tools.scala:23:33
  wire              _rs1_data_T_4 = io_MEM_to_ID_forward_bits_regWriteID == io_IF_to_ID_bus_bits_Inst[19:15] &
                io_MEM_to_ID_forward_bits_regWriteEn;	// IDU.scala:113:19, :119:{26,35}
  wire              _rs1_data_T_6 = io_WB_to_ID_forward_bits_regWriteID == io_IF_to_ID_bus_bits_Inst[19:15] &
                io_WB_to_ID_forward_bits_regWriteEn;	// IDU.scala:113:19, :120:{26,35}
  wire [31:0][63:0] _GEN_9 = {{GPR_31}, {GPR_30}, {GPR_29}, {GPR_28}, {GPR_27}, {GPR_26}, {GPR_25}, {GPR_24}, {GPR_23},
                {GPR_22}, {GPR_21}, {GPR_20}, {GPR_19}, {GPR_18}, {GPR_17}, {GPR_16}, {GPR_15}, {GPR_14},
                {GPR_13}, {GPR_12}, {GPR_11}, {GPR_10}, {GPR_9}, {GPR_8}, {GPR_7}, {GPR_6}, {GPR_5},
                {GPR_4}, {GPR_3}, {GPR_2}, {GPR_1}, {GPR_0}};	// IDU.scala:100:22, Mux.scala:101:16
  wire [63:0]       _GEN_10;	// Mux.scala:101:16
  /* synopsys infer_mux_override */
  assign _GEN_10 = _GEN_9[io_IF_to_ID_bus_bits_Inst[19:15]] /* cadence map_to_mux */;	// IDU.scala:113:19, Mux.scala:101:16
  wire [63:0]       _rs1_data_T_10 = _rs1_data_T ? 64'h0 : _rs1_data_T_2 ? io_EX_ALUResult : _rs1_data_T_4 ?
                io_MEM_to_ID_forward_bits_regWriteData : _rs1_data_T_6 ?
                io_WB_to_ID_forward_bits_regWriteData : _GEN_10;	// IDU.scala:100:30, :117:15, :118:53, :119:35, :120:35, Mux.scala:101:16
  wire              _rs2_data_T = io_IF_to_ID_bus_bits_Inst[24:20] == 5'h0;	// IDU.scala:87:57, :114:19, :124:15
  wire              _load_use_stall_T_10 = rhsReg_3 == io_IF_to_ID_bus_bits_Inst[24:20];	// IDU.scala:114:19, :125:44, tools.scala:23:33
  wire              _rs2_data_T_2 = _load_use_stall_T_10 & rhsReg_5;	// IDU.scala:125:{44,53}, tools.scala:23:33
  wire              _rs2_data_T_4 = io_MEM_to_ID_forward_bits_regWriteID == io_IF_to_ID_bus_bits_Inst[24:20] &
                io_MEM_to_ID_forward_bits_regWriteEn;	// IDU.scala:114:19, :126:{26,35}
  wire              _rs2_data_T_6 = io_WB_to_ID_forward_bits_regWriteID == io_IF_to_ID_bus_bits_Inst[24:20] &
                io_WB_to_ID_forward_bits_regWriteEn;	// IDU.scala:114:19, :127:{26,35}
  wire [63:0]       _GEN_11;	// Mux.scala:101:16
  /* synopsys infer_mux_override */
  assign _GEN_11 = _GEN_9[io_IF_to_ID_bus_bits_Inst[24:20]] /* cadence map_to_mux */;	// IDU.scala:114:19, Mux.scala:101:16
  wire [63:0]       _rs2_data_T_10 = _rs2_data_T ? 64'h0 : _rs2_data_T_2 ? io_EX_ALUResult : _rs2_data_T_4 ?
                io_MEM_to_ID_forward_bits_regWriteData : _rs2_data_T_6 ?
                io_WB_to_ID_forward_bits_regWriteData : _GEN_11;	// IDU.scala:100:30, :124:15, :125:53, :126:35, :127:35, Mux.scala:101:16
  wire              _io_ID_npc_T_9 = InstInfo_0 == 3'h1;	// IDU.scala:150:19, Lookup.scala:34:39
  wire              _io_ID_npc_T_4 = InstInfo_0 == 3'h6;	// IDU.scala:151:19, Lookup.scala:34:39
  wire              _regWriteEn_T_3 = InstInfo_0 == 3'h3;	// IDU.scala:152:19, Lookup.scala:34:39
  wire              _load_use_stall_T = InstInfo_0 == 3'h4;	// IDU.scala:153:19, Lookup.scala:34:39
  wire              _load_use_stall_T_8 = InstInfo_2 == 3'h2;	// IDU.scala:159:15, Lookup.scala:34:39
  wire              _io_ID_npc_T_10 = InstInfo_2 == 3'h6;	// IDU.scala:160:15, Lookup.scala:34:39
  wire [63:0]       _ALU_Data1_T_5 = io_IF_to_ID_bus_bits_PC + 64'h4;	// IDU.scala:160:30
  wire              _load_use_stall_T_11 = InstInfo_3 == 3'h3;	// IDU.scala:166:15, Lookup.scala:34:39
  wire              _io_ID_npc_T = InstInfo_0 == 3'h5;	// IDU.scala:171:104, Lookup.scala:34:39
  wire              _regWriteEn_T_6 = InstInfo_0 == 3'h2 | _io_ID_npc_T_9 | _regWriteEn_T_3 | _io_ID_npc_T;	// IDU.scala:150:19, :152:19, :171:{29,91,104}, Lookup.scala:34:39
  reg  [63:0]       rhsReg;	// tools.scala:23:33
  reg  [31:0]       rhsReg_1;	// tools.scala:23:33
  reg  [63:0]       rhsReg_2;	// tools.scala:23:33
  reg  [63:0]       rhsReg_4;	// tools.scala:23:33
  reg               rhsReg_6;	// tools.scala:23:33
  reg               rhsReg_7;	// tools.scala:23:33
  reg  [4:0]        rhsReg_8;	// tools.scala:23:33
  reg  [1:0]        rhsReg_9;	// tools.scala:23:33
  reg  [63:0]       rhsReg_10;	// tools.scala:23:33
  reg  [63:0]       rhsReg_12;	// tools.scala:23:33
  reg               rhsReg_14;	// tools.scala:23:33
  reg  [1:0]        stall_cnt;	// IDU.scala:198:28
  wire              _load_use_stall_T_18 = rhsReg_6 & (_regWriteEn_T_6 | _load_use_stall_T | _io_ID_npc_T_4 | _io_ID_npc_T_9 &
                _io_ID_npc_T_10 & (_load_use_stall_T_7 & _load_use_stall_T_8 | _load_use_stall_T_10 &
                _load_use_stall_T_11)) | (|stall_cnt);	// IDU.scala:118:44, :125:44, :150:19, :151:19, :153:19, :159:15, :160:15, :166:15, :171:91, :198:28, :212:{21,82}, :213:{21,66,83,127}, :214:{21,35}, tools.scala:23:33
  always @(posedge clock) begin
    if (reset) begin
      GPR_0 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_1 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_2 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_3 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_4 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_5 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_6 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_7 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_8 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_9 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_10 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_11 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_12 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_13 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_14 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_15 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_16 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_17 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_18 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_19 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_20 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_21 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_22 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_23 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_24 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_25 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_26 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_27 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_28 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_29 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_30 <= 64'h0;	// IDU.scala:100:{22,30}
      GPR_31 <= 64'h0;	// IDU.scala:100:{22,30}
      stall_cnt <= 2'h0;	// IDU.scala:198:28
    end
    else begin
      automatic logic _T_1 = io_WB_to_ID_forward_bits_regWriteEn & (|io_WB_to_ID_forward_bits_regWriteID);	// IDU.scala:130:{24,41}
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h0)	// IDU.scala:87:57, :100:22, :130:24, :131:5, :132:28
        GPR_0 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h1)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_1 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h2)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_2 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h3)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_3 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h4)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_4 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h5)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_5 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h6)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_6 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h7)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_7 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h8)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_8 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h9)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_9 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'hA)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_10 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'hB)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_11 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'hC)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_12 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'hD)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_13 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'hE)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_14 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'hF)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_15 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h10)	// IDU.scala:100:22, :130:24, :131:5, :132:28, Lookup.scala:34:39
        GPR_16 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h11)	// IDU.scala:100:22, :130:24, :131:5, :132:28, Lookup.scala:34:39
        GPR_17 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h12)	// IDU.scala:100:22, :130:24, :131:5, :132:28, Lookup.scala:34:39
        GPR_18 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h13)	// IDU.scala:100:22, :130:24, :131:5, :132:28, Lookup.scala:31:38
        GPR_19 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h14)	// IDU.scala:100:22, :130:24, :131:5, :132:28, Lookup.scala:34:39
        GPR_20 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h15)	// IDU.scala:100:22, :130:24, :131:5, :132:28, Lookup.scala:34:39
        GPR_21 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h16)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_22 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h17)	// IDU.scala:100:22, :130:24, :131:5, :132:28, Lookup.scala:31:38
        GPR_23 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h18)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_24 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h19)	// IDU.scala:100:22, :130:24, :131:5, :132:28, Lookup.scala:34:39
        GPR_25 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h1A)	// IDU.scala:100:22, :130:24, :131:5, :132:28, Lookup.scala:34:39
        GPR_26 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h1B)	// IDU.scala:100:22, :130:24, :131:5, :132:28, Lookup.scala:31:38
        GPR_27 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h1C)	// IDU.scala:100:22, :130:24, :131:5, :132:28, Lookup.scala:34:39
        GPR_28 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h1D)	// IDU.scala:100:22, :130:24, :131:5, :132:28, Lookup.scala:34:39
        GPR_29 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & io_WB_to_ID_forward_bits_regWriteID == 5'h1E)	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_30 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (_T_1 & (&io_WB_to_ID_forward_bits_regWriteID))	// IDU.scala:100:22, :130:24, :131:5, :132:28
        GPR_31 <= io_WB_to_ID_forward_bits_regWriteData;	// IDU.scala:100:22
      if (rhsReg_6 & (_regWriteEn_T_6 | _load_use_stall_T | _io_ID_npc_T_4 | _io_ID_npc_T_9 &
                                                _io_ID_npc_T_10 & (_load_use_stall_T_7 & _load_use_stall_T_8 | _load_use_stall_T_10 &
                                                _load_use_stall_T_11)))	// IDU.scala:118:44, :125:44, :150:19, :151:19, :153:19, :159:15, :160:15, :166:15, :171:91, :200:{10,71}, :201:{10,55,72,116}, tools.scala:23:33
        stall_cnt <= 2'h1;	// IDU.scala:198:28, :203:19
      else if (|stall_cnt)	// IDU.scala:118:44, :125:44, :150:19, :151:19, :153:19, :159:15, :160:15, :166:15, :171:91, :198:28, :200:{10,71}, :201:{10,55,72,116}, :205:25, tools.scala:23:33
        stall_cnt <= stall_cnt - 2'h1;	// IDU.scala:198:28, :206:32
    end
    if (reset | _load_use_stall_T_18 | ~io_IF_to_ID_bus_valid) begin	// IDU.scala:176:{48,50}, :214:21
      rhsReg <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
      rhsReg_1 <= 32'h0;	// Mux.scala:101:16, tools.scala:23:33
      rhsReg_2 <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
      rhsReg_3 <= 5'h0;	// IDU.scala:87:57, tools.scala:23:33
      rhsReg_4 <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
      rhsReg_5 <= 1'h0;	// Lookup.scala:34:39, tools.scala:23:33
      rhsReg_6 <= 1'h0;	// Lookup.scala:34:39, tools.scala:23:33
      rhsReg_7 <= 1'h0;	// Lookup.scala:34:39, tools.scala:23:33
      rhsReg_8 <= 5'h0;	// IDU.scala:87:57, tools.scala:23:33
      rhsReg_9 <= 2'h0;	// IDU.scala:198:28, tools.scala:23:33
      rhsReg_10 <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
      rhsReg_12 <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
      rhsReg_14 <= 1'h0;	// Lookup.scala:34:39, tools.scala:23:33
    end
    else begin	// IDU.scala:176:{48,50}, :214:21
      automatic logic InstInfo_1 = ~_InstInfo_T_1 & ~_InstInfo_T_3 & ~_InstInfo_T_5 & ~_InstInfo_T_7 & ~_InstInfo_T_9 &
                                                ~_InstInfo_T_11 & ~_InstInfo_T_13 & ~_InstInfo_T_15 & ~_InstInfo_T_17 & ~_InstInfo_T_19 &
                                                ~_InstInfo_T_21 & ~_InstInfo_T_23 & ~_InstInfo_T_25 & ~_InstInfo_T_27 & ~_InstInfo_T_29 &
                                                ~_InstInfo_T_31 & ~_InstInfo_T_33 & (_InstInfo_T_35 | _InstInfo_T_37 | _InstInfo_T_39 |
                                                _InstInfo_T_41 | _InstInfo_T_43 | _InstInfo_T_45 | _InstInfo_T_47 | _InstInfo_T_49 |
                                                _InstInfo_T_51 | _InstInfo_T_53 | _InstInfo_T_203);	// Lookup.scala:31:38, :34:39
      rhsReg <= io_IF_to_ID_bus_bits_PC;	// tools.scala:23:33
      rhsReg_1 <= io_IF_to_ID_bus_bits_Inst;	// tools.scala:23:33
      if (InstInfo_2 == 3'h0)	// IDU.scala:157:15, Lookup.scala:34:39
        rhsReg_2 <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
      else if (InstInfo_2 == 3'h1)	// IDU.scala:157:15, :158:15, Lookup.scala:34:39
        rhsReg_2 <= io_IF_to_ID_bus_bits_PC;	// tools.scala:23:33
      else if (_load_use_stall_T_8) begin	// IDU.scala:157:15, :158:15, :159:15, Lookup.scala:34:39
        if (_rs1_data_T)	// IDU.scala:117:15
          rhsReg_2 <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
        else if (_rs1_data_T_2)	// IDU.scala:117:15, :118:53
          rhsReg_2 <= io_EX_ALUResult;	// tools.scala:23:33
        else if (_rs1_data_T_4)	// IDU.scala:117:15, :118:53, :119:35
          rhsReg_2 <= io_MEM_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
        else if (_rs1_data_T_6)	// IDU.scala:117:15, :118:53, :119:35, :120:35
          rhsReg_2 <= io_WB_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
        else	// IDU.scala:117:15, :118:53, :119:35, :120:35
          rhsReg_2 <= _GEN_10;	// Mux.scala:101:16, tools.scala:23:33
      end
      else if (_io_ID_npc_T_10)	// IDU.scala:157:15, :158:15, :159:15, :160:15, Lookup.scala:34:39
        rhsReg_2 <= _ALU_Data1_T_5;	// IDU.scala:160:30, tools.scala:23:33
      else	// IDU.scala:157:15, :158:15, :159:15, :160:15, Lookup.scala:34:39
        rhsReg_2 <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
      rhsReg_3 <= io_IF_to_ID_bus_bits_Inst[11:7];	// IDU.scala:87:71, tools.scala:23:33
      if (InstInfo_3 == 3'h0)	// IDU.scala:164:15, Lookup.scala:34:39
        rhsReg_4 <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
      else if (InstInfo_3 == 3'h1)	// IDU.scala:164:15, :165:15, Lookup.scala:34:39
        rhsReg_4 <= io_IF_to_ID_bus_bits_PC;	// tools.scala:23:33
      else if (_load_use_stall_T_11) begin	// IDU.scala:164:15, :165:15, :166:15, Lookup.scala:34:39
        if (_rs2_data_T)	// IDU.scala:124:15
          rhsReg_4 <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
        else if (_rs2_data_T_2)	// IDU.scala:124:15, :125:53
          rhsReg_4 <= io_EX_ALUResult;	// tools.scala:23:33
        else if (_rs2_data_T_4)	// IDU.scala:124:15, :125:53, :126:35
          rhsReg_4 <= io_MEM_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
        else if (_rs2_data_T_6)	// IDU.scala:124:15, :125:53, :126:35, :127:35
          rhsReg_4 <= io_WB_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
        else	// IDU.scala:124:15, :125:53, :126:35, :127:35
          rhsReg_4 <= _GEN_11;	// Mux.scala:101:16, tools.scala:23:33
      end
      else if (InstInfo_3 == 3'h4) begin	// IDU.scala:164:15, :165:15, :166:15, :167:15, Lookup.scala:34:39
        if (_io_ID_npc_T_9)	// IDU.scala:150:19
          rhsReg_4 <= {_immI_T_2, io_IF_to_ID_bus_bits_Inst[31:20]};	// Bitwise.scala:77:12, Cat.scala:33:92, IDU.scala:85:47, tools.scala:23:33
        else if (_io_ID_npc_T_4)	// IDU.scala:150:19, :151:19
          rhsReg_4 <= {{53{io_IF_to_ID_bus_bits_Inst[31]}}, io_IF_to_ID_bus_bits_Inst[7],
                                                                                io_IF_to_ID_bus_bits_Inst[30:25], io_IF_to_ID_bus_bits_Inst[11:8]};	// Cat.scala:33:92, IDU.scala:85:33, :88:{71,95,113}, tools.scala:23:33
        else if (_regWriteEn_T_3)	// IDU.scala:150:19, :151:19, :152:19
          rhsReg_4 <= {{32{io_IF_to_ID_bus_bits_Inst[31]}}, io_IF_to_ID_bus_bits_Inst[31:12], 12'h0};	// IDU.scala:85:33, :86:{10,47,57}, tools.scala:23:33
        else if (_load_use_stall_T)	// IDU.scala:150:19, :151:19, :152:19, :153:19
          rhsReg_4 <= {_GEN_8, io_IF_to_ID_bus_bits_Inst[31:25], io_IF_to_ID_bus_bits_Inst[11:7]};	// IDU.scala:87:{10,47,71}, tools.scala:23:33
        else	// IDU.scala:150:19, :151:19, :152:19, :153:19
          rhsReg_4 <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
      end
      else	// IDU.scala:164:15, :165:15, :166:15, :167:15, Lookup.scala:34:39
        rhsReg_4 <= {58'h0, InstInfo_3 == 3'h5 ? io_IF_to_ID_bus_bits_Inst[25:20] : 6'h0};	// IDU.scala:95:21, :168:15, Lookup.scala:34:39, Mux.scala:101:16, tools.scala:23:33
      rhsReg_5 <= _regWriteEn_T_6;	// IDU.scala:171:91, tools.scala:23:33
      rhsReg_6 <= _io_ID_npc_T_9 & InstInfo_1;	// IDU.scala:150:19, :173:41, Lookup.scala:34:39, tools.scala:23:33
      rhsReg_7 <= _load_use_stall_T;	// IDU.scala:153:19, tools.scala:23:33
      if (_GEN_7)	// Lookup.scala:34:39
        rhsReg_8 <= 5'h1;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_9)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h7;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_11)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h8;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_13)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h9;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_15)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h1;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_17)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h6;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_19)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h5;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_21)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h4;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_23)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hA;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_25)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hB;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_27)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h11;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_29)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h13;	// Lookup.scala:31:38, tools.scala:23:33
      else if (_InstInfo_T_31)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h15;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_33)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h14;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_35)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h3;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_37)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h5;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_39)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h9;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_41)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h11;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_43)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h2;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_45)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h4;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_47)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h8;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_49)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h10;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_51)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h8;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_53)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h4;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_203)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h2;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_57)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h1;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_59)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h7;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_61)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h2;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_63)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h6;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_65)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h5;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_67)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h4;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_69)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hA;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_71)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hB;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_73)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hC;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_75)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hD;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_77)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hE;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_79)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'hF;	// IDU.scala:132:28, tools.scala:23:33
      else if (_InstInfo_T_81)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h10;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_83)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h11;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_85)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h12;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_87)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h13;	// Lookup.scala:31:38, tools.scala:23:33
      else if (_InstInfo_T_89)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h15;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_91)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h14;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_93)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h19;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_95)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h1A;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_97)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h1B;	// Lookup.scala:31:38, tools.scala:23:33
      else if (_InstInfo_T_99)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h1C;	// Lookup.scala:34:39, tools.scala:23:33
      else if (_InstInfo_T_101)	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= 5'h1D;	// Lookup.scala:34:39, tools.scala:23:33
      else	// Lookup.scala:31:38, :34:39
        rhsReg_8 <= _GEN_6;	// Lookup.scala:34:39, tools.scala:23:33
      rhsReg_9 <= {1'h0, InstInfo_1};	// IDU.scala:73:21, Lookup.scala:34:39, tools.scala:23:33
      if (_rs1_data_T)	// IDU.scala:117:15
        rhsReg_10 <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
      else if (_rs1_data_T_2)	// IDU.scala:117:15, :118:53
        rhsReg_10 <= io_EX_ALUResult;	// tools.scala:23:33
      else if (_rs1_data_T_4)	// IDU.scala:117:15, :118:53, :119:35
        rhsReg_10 <= io_MEM_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
      else if (_rs1_data_T_6)	// IDU.scala:117:15, :118:53, :119:35, :120:35
        rhsReg_10 <= io_WB_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
      else	// IDU.scala:117:15, :118:53, :119:35, :120:35
        rhsReg_10 <= _GEN_10;	// Mux.scala:101:16, tools.scala:23:33
      if (_rs2_data_T)	// IDU.scala:124:15
        rhsReg_12 <= 64'h0;	// IDU.scala:100:30, tools.scala:23:33
      else if (_rs2_data_T_2)	// IDU.scala:124:15, :125:53
        rhsReg_12 <= io_EX_ALUResult;	// tools.scala:23:33
      else if (_rs2_data_T_4)	// IDU.scala:124:15, :125:53, :126:35
        rhsReg_12 <= io_MEM_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
      else if (_rs2_data_T_6)	// IDU.scala:124:15, :125:53, :126:35, :127:35
        rhsReg_12 <= io_WB_to_ID_forward_bits_regWriteData;	// tools.scala:23:33
      else	// IDU.scala:124:15, :125:53, :126:35, :127:35
        rhsReg_12 <= _GEN_11;	// Mux.scala:101:16, tools.scala:23:33
      rhsReg_14 <= io_IF_to_ID_bus_valid & ~_load_use_stall_T_18;	// IDU.scala:193:{80,82}, :214:21, tools.scala:23:33
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:166:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:166:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:166:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_20;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_21;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_22;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_23;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_24;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_25;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_26;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_27;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_28;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_29;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_30;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_31;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_32;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_33;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_34;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_35;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_36;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_37;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_38;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_39;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_40;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_41;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_42;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_43;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_44;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_45;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_46;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_47;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_48;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_49;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_50;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_51;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_52;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_53;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_54;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_55;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_56;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_57;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_58;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_59;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_60;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_61;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_62;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_63;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_64;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_65;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_66;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_67;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_68;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_69;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_70;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_71;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_72;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_73;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_74;	// <stdin>:166:10
      automatic logic [31:0] _RANDOM_75;	// <stdin>:166:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:166:10
        `INIT_RANDOM_PROLOG_	// <stdin>:166:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:166:10
        _RANDOM_0 = `RANDOM;	// <stdin>:166:10
        _RANDOM_1 = `RANDOM;	// <stdin>:166:10
        _RANDOM_2 = `RANDOM;	// <stdin>:166:10
        _RANDOM_3 = `RANDOM;	// <stdin>:166:10
        _RANDOM_4 = `RANDOM;	// <stdin>:166:10
        _RANDOM_5 = `RANDOM;	// <stdin>:166:10
        _RANDOM_6 = `RANDOM;	// <stdin>:166:10
        _RANDOM_7 = `RANDOM;	// <stdin>:166:10
        _RANDOM_8 = `RANDOM;	// <stdin>:166:10
        _RANDOM_9 = `RANDOM;	// <stdin>:166:10
        _RANDOM_10 = `RANDOM;	// <stdin>:166:10
        _RANDOM_11 = `RANDOM;	// <stdin>:166:10
        _RANDOM_12 = `RANDOM;	// <stdin>:166:10
        _RANDOM_13 = `RANDOM;	// <stdin>:166:10
        _RANDOM_14 = `RANDOM;	// <stdin>:166:10
        _RANDOM_15 = `RANDOM;	// <stdin>:166:10
        _RANDOM_16 = `RANDOM;	// <stdin>:166:10
        _RANDOM_17 = `RANDOM;	// <stdin>:166:10
        _RANDOM_18 = `RANDOM;	// <stdin>:166:10
        _RANDOM_19 = `RANDOM;	// <stdin>:166:10
        _RANDOM_20 = `RANDOM;	// <stdin>:166:10
        _RANDOM_21 = `RANDOM;	// <stdin>:166:10
        _RANDOM_22 = `RANDOM;	// <stdin>:166:10
        _RANDOM_23 = `RANDOM;	// <stdin>:166:10
        _RANDOM_24 = `RANDOM;	// <stdin>:166:10
        _RANDOM_25 = `RANDOM;	// <stdin>:166:10
        _RANDOM_26 = `RANDOM;	// <stdin>:166:10
        _RANDOM_27 = `RANDOM;	// <stdin>:166:10
        _RANDOM_28 = `RANDOM;	// <stdin>:166:10
        _RANDOM_29 = `RANDOM;	// <stdin>:166:10
        _RANDOM_30 = `RANDOM;	// <stdin>:166:10
        _RANDOM_31 = `RANDOM;	// <stdin>:166:10
        _RANDOM_32 = `RANDOM;	// <stdin>:166:10
        _RANDOM_33 = `RANDOM;	// <stdin>:166:10
        _RANDOM_34 = `RANDOM;	// <stdin>:166:10
        _RANDOM_35 = `RANDOM;	// <stdin>:166:10
        _RANDOM_36 = `RANDOM;	// <stdin>:166:10
        _RANDOM_37 = `RANDOM;	// <stdin>:166:10
        _RANDOM_38 = `RANDOM;	// <stdin>:166:10
        _RANDOM_39 = `RANDOM;	// <stdin>:166:10
        _RANDOM_40 = `RANDOM;	// <stdin>:166:10
        _RANDOM_41 = `RANDOM;	// <stdin>:166:10
        _RANDOM_42 = `RANDOM;	// <stdin>:166:10
        _RANDOM_43 = `RANDOM;	// <stdin>:166:10
        _RANDOM_44 = `RANDOM;	// <stdin>:166:10
        _RANDOM_45 = `RANDOM;	// <stdin>:166:10
        _RANDOM_46 = `RANDOM;	// <stdin>:166:10
        _RANDOM_47 = `RANDOM;	// <stdin>:166:10
        _RANDOM_48 = `RANDOM;	// <stdin>:166:10
        _RANDOM_49 = `RANDOM;	// <stdin>:166:10
        _RANDOM_50 = `RANDOM;	// <stdin>:166:10
        _RANDOM_51 = `RANDOM;	// <stdin>:166:10
        _RANDOM_52 = `RANDOM;	// <stdin>:166:10
        _RANDOM_53 = `RANDOM;	// <stdin>:166:10
        _RANDOM_54 = `RANDOM;	// <stdin>:166:10
        _RANDOM_55 = `RANDOM;	// <stdin>:166:10
        _RANDOM_56 = `RANDOM;	// <stdin>:166:10
        _RANDOM_57 = `RANDOM;	// <stdin>:166:10
        _RANDOM_58 = `RANDOM;	// <stdin>:166:10
        _RANDOM_59 = `RANDOM;	// <stdin>:166:10
        _RANDOM_60 = `RANDOM;	// <stdin>:166:10
        _RANDOM_61 = `RANDOM;	// <stdin>:166:10
        _RANDOM_62 = `RANDOM;	// <stdin>:166:10
        _RANDOM_63 = `RANDOM;	// <stdin>:166:10
        _RANDOM_64 = `RANDOM;	// <stdin>:166:10
        _RANDOM_65 = `RANDOM;	// <stdin>:166:10
        _RANDOM_66 = `RANDOM;	// <stdin>:166:10
        _RANDOM_67 = `RANDOM;	// <stdin>:166:10
        _RANDOM_68 = `RANDOM;	// <stdin>:166:10
        _RANDOM_69 = `RANDOM;	// <stdin>:166:10
        _RANDOM_70 = `RANDOM;	// <stdin>:166:10
        _RANDOM_71 = `RANDOM;	// <stdin>:166:10
        _RANDOM_72 = `RANDOM;	// <stdin>:166:10
        _RANDOM_73 = `RANDOM;	// <stdin>:166:10
        _RANDOM_74 = `RANDOM;	// <stdin>:166:10
        _RANDOM_75 = `RANDOM;	// <stdin>:166:10
        GPR_0 = {_RANDOM_0, _RANDOM_1};	// IDU.scala:100:22
        GPR_1 = {_RANDOM_2, _RANDOM_3};	// IDU.scala:100:22
        GPR_2 = {_RANDOM_4, _RANDOM_5};	// IDU.scala:100:22
        GPR_3 = {_RANDOM_6, _RANDOM_7};	// IDU.scala:100:22
        GPR_4 = {_RANDOM_8, _RANDOM_9};	// IDU.scala:100:22
        GPR_5 = {_RANDOM_10, _RANDOM_11};	// IDU.scala:100:22
        GPR_6 = {_RANDOM_12, _RANDOM_13};	// IDU.scala:100:22
        GPR_7 = {_RANDOM_14, _RANDOM_15};	// IDU.scala:100:22
        GPR_8 = {_RANDOM_16, _RANDOM_17};	// IDU.scala:100:22
        GPR_9 = {_RANDOM_18, _RANDOM_19};	// IDU.scala:100:22
        GPR_10 = {_RANDOM_20, _RANDOM_21};	// IDU.scala:100:22
        GPR_11 = {_RANDOM_22, _RANDOM_23};	// IDU.scala:100:22
        GPR_12 = {_RANDOM_24, _RANDOM_25};	// IDU.scala:100:22
        GPR_13 = {_RANDOM_26, _RANDOM_27};	// IDU.scala:100:22
        GPR_14 = {_RANDOM_28, _RANDOM_29};	// IDU.scala:100:22
        GPR_15 = {_RANDOM_30, _RANDOM_31};	// IDU.scala:100:22
        GPR_16 = {_RANDOM_32, _RANDOM_33};	// IDU.scala:100:22
        GPR_17 = {_RANDOM_34, _RANDOM_35};	// IDU.scala:100:22
        GPR_18 = {_RANDOM_36, _RANDOM_37};	// IDU.scala:100:22
        GPR_19 = {_RANDOM_38, _RANDOM_39};	// IDU.scala:100:22
        GPR_20 = {_RANDOM_40, _RANDOM_41};	// IDU.scala:100:22
        GPR_21 = {_RANDOM_42, _RANDOM_43};	// IDU.scala:100:22
        GPR_22 = {_RANDOM_44, _RANDOM_45};	// IDU.scala:100:22
        GPR_23 = {_RANDOM_46, _RANDOM_47};	// IDU.scala:100:22
        GPR_24 = {_RANDOM_48, _RANDOM_49};	// IDU.scala:100:22
        GPR_25 = {_RANDOM_50, _RANDOM_51};	// IDU.scala:100:22
        GPR_26 = {_RANDOM_52, _RANDOM_53};	// IDU.scala:100:22
        GPR_27 = {_RANDOM_54, _RANDOM_55};	// IDU.scala:100:22
        GPR_28 = {_RANDOM_56, _RANDOM_57};	// IDU.scala:100:22
        GPR_29 = {_RANDOM_58, _RANDOM_59};	// IDU.scala:100:22
        GPR_30 = {_RANDOM_60, _RANDOM_61};	// IDU.scala:100:22
        GPR_31 = {_RANDOM_62, _RANDOM_63};	// IDU.scala:100:22
        rhsReg = {_RANDOM_64, _RANDOM_65};	// tools.scala:23:33
        rhsReg_1 = _RANDOM_66;	// tools.scala:23:33
        rhsReg_2 = {_RANDOM_67, _RANDOM_68};	// tools.scala:23:33
        rhsReg_3 = _RANDOM_69[4:0];	// tools.scala:23:33
        rhsReg_4 = {_RANDOM_69[31:5], _RANDOM_70, _RANDOM_71[4:0]};	// tools.scala:23:33
        rhsReg_5 = _RANDOM_71[5];	// tools.scala:23:33
        rhsReg_6 = _RANDOM_71[6];	// tools.scala:23:33
        rhsReg_7 = _RANDOM_71[7];	// tools.scala:23:33
        rhsReg_8 = _RANDOM_71[12:8];	// tools.scala:23:33
        rhsReg_9 = _RANDOM_71[14:13];	// tools.scala:23:33
        rhsReg_10 = {_RANDOM_71[31:15], _RANDOM_72, _RANDOM_73[14:0]};	// tools.scala:23:33
        rhsReg_12 = {_RANDOM_73[31:20], _RANDOM_74, _RANDOM_75[19:0]};	// tools.scala:23:33
        rhsReg_14 = _RANDOM_75[25];	// tools.scala:23:33
        stall_cnt = _RANDOM_75[27:26];	// IDU.scala:198:28, tools.scala:23:33
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:166:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:166:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_IF_to_ID_bus_ready = ~_load_use_stall_T_18;	// <stdin>:166:10, IDU.scala:193:82, :214:21
  assign io_ID_npc = _io_ID_npc_T ? io_IF_to_ID_bus_bits_PC + {{44{io_IF_to_ID_bus_bits_Inst[31]}},
                io_IF_to_ID_bus_bits_Inst[19:12], io_IF_to_ID_bus_bits_Inst[20],
                io_IF_to_ID_bus_bits_Inst[30:21], 1'h0} : _io_ID_npc_T_4 & (InstInfo_4 == 5'h1 ?
                _rs1_data_T_10 == _rs2_data_T_10 : InstInfo_4 == 5'h2 ? _rs1_data_T_10 != _rs2_data_T_10 :
                InstInfo_4 == 5'h3 ? $signed(_rs1_data_T_10) < $signed(_rs2_data_T_10) : InstInfo_4 == 5'h6
                ? $signed(_rs1_data_T_10) >= $signed(_rs2_data_T_10) : InstInfo_4 == 5'h4 ? _rs1_data_T_10
                < _rs2_data_T_10 : InstInfo_4 == 5'h5 & _rs1_data_T_10 >= _rs2_data_T_10) ?
                io_IF_to_ID_bus_bits_PC + {_GEN_8, io_IF_to_ID_bus_bits_Inst[7],
                io_IF_to_ID_bus_bits_Inst[30:25], io_IF_to_ID_bus_bits_Inst[11:8], 1'h0} : _io_ID_npc_T_9 &
                _io_ID_npc_T_10 ? _rs1_data_T_10 + {_immI_T_2, io_IF_to_ID_bus_bits_Inst[31:20]} : {32'h0,
                _ALU_Data1_T_5[31:0]};	// <stdin>:166:10, Bitwise.scala:77:12, IDU.scala:85:{33,47}, :87:10, :88:{71,95,113}, :89:{48,67,89}, :132:28, :150:19, :151:19, :160:{15,30}, :171:104, :219:13, :220:19, :221:{34,46}, :222:{34,46}, :223:{34,53}, :224:{34,53}, :225:{34,46}, :226:{34,46}, :230:13, :232:37, :233:{31,55}, :234:{31,58}, Lookup.scala:34:39, Mux.scala:101:16
  assign io_ID_to_EX_bus_valid = rhsReg_14;	// <stdin>:166:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_ALU_Data1 = rhsReg_2;	// <stdin>:166:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_ALU_Data2 = rhsReg_4;	// <stdin>:166:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_futype = rhsReg_9[0];	// <stdin>:166:10, tools.scala:23:33, :25:17
  assign io_ID_to_EX_bus_bits_optype = rhsReg_8;	// <stdin>:166:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_rs1_data = rhsReg_10;	// <stdin>:166:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_rs2_data = rhsReg_12;	// <stdin>:166:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_regWriteID = rhsReg_3;	// <stdin>:166:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_regWriteEn = rhsReg_5;	// <stdin>:166:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_memWriteEn = rhsReg_7;	// <stdin>:166:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_memReadEn = rhsReg_6;	// <stdin>:166:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_PC = rhsReg;	// <stdin>:166:10, tools.scala:23:33
  assign io_ID_to_EX_bus_bits_Inst = rhsReg_1;	// <stdin>:166:10, tools.scala:23:33
  assign io_ID_stall = _load_use_stall_T_18;	// <stdin>:166:10, IDU.scala:214:21
  assign io_ID_GPR_0 = GPR_0;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_1 = GPR_1;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_2 = GPR_2;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_3 = GPR_3;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_4 = GPR_4;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_5 = GPR_5;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_6 = GPR_6;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_7 = GPR_7;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_8 = GPR_8;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_9 = GPR_9;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_10 = GPR_10;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_11 = GPR_11;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_12 = GPR_12;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_13 = GPR_13;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_14 = GPR_14;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_15 = GPR_15;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_16 = GPR_16;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_17 = GPR_17;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_18 = GPR_18;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_19 = GPR_19;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_20 = GPR_20;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_21 = GPR_21;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_22 = GPR_22;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_23 = GPR_23;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_24 = GPR_24;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_25 = GPR_25;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_26 = GPR_26;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_27 = GPR_27;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_28 = GPR_28;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_29 = GPR_29;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_30 = GPR_30;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_GPR_31 = GPR_31;	// <stdin>:166:10, IDU.scala:100:22
  assign io_ID_unknown_inst = InstInfo_0 == 3'h0 & io_IF_to_ID_bus_valid;	// <stdin>:166:10, IDU.scala:209:{39,47}, Lookup.scala:34:39
endmodule

module EXU(	// <stdin>:953:10
  input         clock,
                reset,
                io_ID_to_EX_bus_valid,
  input  [63:0] io_ID_to_EX_bus_bits_ALU_Data1,
                io_ID_to_EX_bus_bits_ALU_Data2,
  input         io_ID_to_EX_bus_bits_futype,
  input  [4:0]  io_ID_to_EX_bus_bits_optype,
  input  [63:0] io_ID_to_EX_bus_bits_rs2_data,
  input  [4:0]  io_ID_to_EX_bus_bits_regWriteID,
  input         io_ID_to_EX_bus_bits_regWriteEn,
                io_ID_to_EX_bus_bits_memWriteEn,
                io_ID_to_EX_bus_bits_memReadEn,
  input  [63:0] io_ID_to_EX_bus_bits_PC,
  input  [31:0] io_ID_to_EX_bus_bits_Inst,
  output        io_EX_to_MEM_bus_valid,
  output [31:0] io_EX_to_MEM_bus_bits_Inst,
  output [63:0] io_EX_to_MEM_bus_bits_PC,
                io_EX_to_MEM_bus_bits_ALU_result,
                io_EX_to_MEM_bus_bits_memWriteData,
  output        io_EX_to_MEM_bus_bits_memWriteEn,
                io_EX_to_MEM_bus_bits_memReadEn,
  output [4:0]  io_EX_to_MEM_bus_bits_lsutype,
                io_EX_to_MEM_bus_bits_regWriteID,
  output        io_EX_to_MEM_bus_bits_regWriteEn,
  output [63:0] io_EX_ALUResult_Pass);

  reg  [63:0]       rhsReg;	// tools.scala:15:29
  reg  [31:0]       rhsReg_1;	// tools.scala:15:29
  reg               rhsReg_2;	// tools.scala:15:29
  reg  [4:0]        rhsReg_3;	// tools.scala:15:29
  reg               rhsReg_4;	// tools.scala:15:29
  reg               rhsReg_5;	// tools.scala:15:29
  reg  [63:0]       rhsReg_6;	// tools.scala:15:29
  reg  [63:0]       rhsReg_7;	// tools.scala:15:29
  reg  [4:0]        rhsReg_8;	// tools.scala:15:29
  reg               rhsReg_9;	// tools.scala:15:29
  wire [63:0]       _ALU_result_T_4 = io_ID_to_EX_bus_bits_ALU_Data1 + io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:84:69
  wire [63:0]       _ALU_result_T_7 = io_ID_to_EX_bus_bits_ALU_Data1 - io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:85:41
  wire [63:0]       _ALU_result_T_69 = io_ID_to_EX_bus_bits_ALU_Data1 & io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:86:41
  wire [63:0]       _ALU_result_T_67 = io_ID_to_EX_bus_bits_ALU_Data1 | io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:87:41
  wire [63:0]       _ALU_result_T_65 = io_ID_to_EX_bus_bits_ALU_Data1 ^ io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:88:41
  wire [126:0]      _ALU_result_T_15 = {63'h0, io_ID_to_EX_bus_bits_ALU_Data1} << io_ID_to_EX_bus_bits_ALU_Data2[5:0];	// EXU.scala:61:23, :89:40, tools.scala:15:29
  wire [63:0]       _GEN = {58'h0, io_ID_to_EX_bus_bits_ALU_Data2[5:0]};	// EXU.scala:61:23, :90:40
  wire [63:0]       _GEN_0 = io_ID_to_EX_bus_bits_ALU_Data1 * io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:94:40
  wire [64:0]       _GEN_1 = {io_ID_to_EX_bus_bits_ALU_Data1[63], io_ID_to_EX_bus_bits_ALU_Data1};	// EXU.scala:95:48
  wire [64:0]       _GEN_2 = {io_ID_to_EX_bus_bits_ALU_Data2[63], io_ID_to_EX_bus_bits_ALU_Data2};	// EXU.scala:95:48
  wire [64:0]       _ALU_result_T_33 = $signed(_GEN_1) / $signed(_GEN_2);	// EXU.scala:95:48
  wire [63:0]       _ALU_result_T_78 = io_ID_to_EX_bus_bits_ALU_Data1 / io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:96:40
  wire [63:0]       _ALU_result_T_85 = io_ID_to_EX_bus_bits_ALU_Data1 % io_ID_to_EX_bus_bits_ALU_Data2;	// EXU.scala:98:41
  wire [62:0]       _ALU_result_T_53 = {31'h0, io_ID_to_EX_bus_bits_ALU_Data1[31:0]} << io_ID_to_EX_bus_bits_ALU_Data2[4:0];	// EXU.scala:101:{45,53,61}, tools.scala:15:29
  wire [31:0]       _GEN_3 = {27'h0, io_ID_to_EX_bus_bits_ALU_Data2[4:0]};	// EXU.scala:101:61, :102:53
  wire [31:0]       _ALU_result_ret_T_18 = io_ID_to_EX_bus_bits_ALU_Data1[31:0] >> _GEN_3;	// EXU.scala:101:45, :102:53
  wire [31:0]       _ALU_result_T_62 = $signed($signed(io_ID_to_EX_bus_bits_ALU_Data1[31:0]) >>> _GEN_3);	// EXU.scala:101:45, :102:53, :103:61
  wire [64:0]       _ALU_result_T_75 = $signed(_GEN_1) / $signed(_GEN_2);	// EXU.scala:95:48, :108:54
  wire [63:0]       _ALU_result_T_82 = $signed(io_ID_to_EX_bus_bits_ALU_Data1) % $signed(io_ID_to_EX_bus_bits_ALU_Data2);	// EXU.scala:110:54
  wire [31:0][63:0] _GEN_4 = {{64'h0}, {64'h0}, {{{32{_ALU_result_T_85[31]}}, _ALU_result_T_85[31:0]}},
                {{{32{_ALU_result_T_82[31]}}, _ALU_result_T_82[31:0]}}, {{{32{_ALU_result_T_78[31]}},
                _ALU_result_T_78[31:0]}}, {{{32{_ALU_result_T_75[31]}}, _ALU_result_T_75[31:0]}},
                {{{32{_GEN_0[31]}}, _GEN_0[31:0]}}, {{{32{_ALU_result_T_69[31]}}, _ALU_result_T_69[31:0]}},
                {{{32{_ALU_result_T_67[31]}}, _ALU_result_T_67[31:0]}}, {{{32{_ALU_result_T_65[31]}},
                _ALU_result_T_65[31:0]}}, {{{32{_ALU_result_ret_T_18[31]}}, _ALU_result_ret_T_18}},
                {{{32{_ALU_result_T_62[31]}}, _ALU_result_T_62}}, {{{32{_ALU_result_T_53[31]}},
                _ALU_result_T_53[31:0]}}, {{{32{_ALU_result_T_7[31]}}, _ALU_result_T_7[31:0]}},
                {{{32{_ALU_result_T_4[31]}}, _ALU_result_T_4[31:0]}}, {_ALU_result_T_85},
                {$signed(io_ID_to_EX_bus_bits_ALU_Data1) % $signed(io_ID_to_EX_bus_bits_ALU_Data2)},
                {_ALU_result_T_78}, {_ALU_result_T_33[63:0]}, {_GEN_0}, {{63'h0,
                io_ID_to_EX_bus_bits_ALU_Data1 < io_ID_to_EX_bus_bits_ALU_Data2}}, {{63'h0,
                $signed(io_ID_to_EX_bus_bits_ALU_Data1) < $signed(io_ID_to_EX_bus_bits_ALU_Data2)}},
                {$signed($signed(io_ID_to_EX_bus_bits_ALU_Data1) >>> _GEN)},
                {io_ID_to_EX_bus_bits_ALU_Data1 >> _GEN}, {_ALU_result_T_15[63:0]}, {_ALU_result_T_65},
                {_ALU_result_T_67}, {_ALU_result_T_69}, {64'h0}, {_ALU_result_T_7}, {64'h0}, {64'h0}};	// Bitwise.scala:77:12, Cat.scala:33:92, EXU.scala:84:69, :85:{17,41}, :86:{17,41}, :87:{17,41}, :88:{17,41}, :89:{17,40}, :90:{17,40}, :91:{17,48}, :92:{17,41}, :93:{17,48}, :94:{17,40}, :95:{17,48}, :96:{17,40}, :97:{17,48}, :98:{17,41}, :99:17, :100:17, :101:{17,53}, :102:{17,53}, :103:{17,61}, :104:17, :105:17, :106:17, :107:17, :108:{17,54}, :109:17, :110:{17,54}, :111:17, Mux.scala:101:16, tools.scala:9:{34,45}, :15:29
  wire [63:0]       _GEN_5 = io_ID_to_EX_bus_bits_optype == 5'h1 | io_ID_to_EX_bus_bits_futype ? _ALU_result_T_4 :
                _GEN_4[io_ID_to_EX_bus_bits_optype];	// EXU.scala:84:{18,31,69}, :85:17, :86:17, :87:17, :88:17, :89:17, :90:17, :91:17, :92:17, :93:17, :94:17, :95:17, :96:17, :97:17, :98:17, :99:17, :100:17, :101:17, :102:17, :103:17, :104:17, :105:17, :106:17, :107:17, :108:17, :109:17, :110:17, :111:17, Mux.scala:101:16
  always @(posedge clock) begin
    if (reset) begin
      rhsReg <= 64'h0;	// Mux.scala:101:16, tools.scala:15:29
      rhsReg_1 <= 32'h0;	// Bitwise.scala:77:12, tools.scala:15:29
      rhsReg_2 <= 1'h0;	// EXU.scala:57:22, tools.scala:15:29
      rhsReg_3 <= 5'h0;	// EXU.scala:57:22, tools.scala:15:29
      rhsReg_4 <= 1'h0;	// EXU.scala:57:22, tools.scala:15:29
      rhsReg_5 <= 1'h0;	// EXU.scala:57:22, tools.scala:15:29
      rhsReg_6 <= 64'h0;	// Mux.scala:101:16, tools.scala:15:29
      rhsReg_7 <= 64'h0;	// Mux.scala:101:16, tools.scala:15:29
      rhsReg_8 <= 5'h0;	// EXU.scala:57:22, tools.scala:15:29
      rhsReg_9 <= 1'h0;	// EXU.scala:57:22, tools.scala:15:29
    end
    else begin
      rhsReg <= io_ID_to_EX_bus_bits_PC;	// tools.scala:15:29
      rhsReg_1 <= io_ID_to_EX_bus_bits_Inst;	// tools.scala:15:29
      rhsReg_2 <= io_ID_to_EX_bus_bits_regWriteEn;	// tools.scala:15:29
      rhsReg_3 <= io_ID_to_EX_bus_bits_regWriteID;	// tools.scala:15:29
      rhsReg_4 <= io_ID_to_EX_bus_bits_memWriteEn;	// tools.scala:15:29
      rhsReg_5 <= io_ID_to_EX_bus_bits_memReadEn;	// tools.scala:15:29
      rhsReg_6 <= io_ID_to_EX_bus_bits_rs2_data;	// tools.scala:15:29
      rhsReg_7 <= _GEN_5;	// Mux.scala:101:16, tools.scala:15:29
      if (io_ID_to_EX_bus_bits_futype)
        rhsReg_8 <= io_ID_to_EX_bus_bits_optype;	// tools.scala:15:29
      else
        rhsReg_8 <= 5'h0;	// EXU.scala:57:22, tools.scala:15:29
      rhsReg_9 <= io_ID_to_EX_bus_valid;	// tools.scala:15:29
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:953:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:953:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:953:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:953:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:953:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:953:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:953:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:953:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:953:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:953:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:953:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:953:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:953:10
        `INIT_RANDOM_PROLOG_	// <stdin>:953:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:953:10
        _RANDOM_0 = `RANDOM;	// <stdin>:953:10
        _RANDOM_1 = `RANDOM;	// <stdin>:953:10
        _RANDOM_2 = `RANDOM;	// <stdin>:953:10
        _RANDOM_3 = `RANDOM;	// <stdin>:953:10
        _RANDOM_4 = `RANDOM;	// <stdin>:953:10
        _RANDOM_5 = `RANDOM;	// <stdin>:953:10
        _RANDOM_6 = `RANDOM;	// <stdin>:953:10
        _RANDOM_7 = `RANDOM;	// <stdin>:953:10
        rhsReg = {_RANDOM_0, _RANDOM_1};	// tools.scala:15:29
        rhsReg_1 = _RANDOM_2;	// tools.scala:15:29
        rhsReg_2 = _RANDOM_3[0];	// tools.scala:15:29
        rhsReg_3 = _RANDOM_3[5:1];	// tools.scala:15:29
        rhsReg_4 = _RANDOM_3[6];	// tools.scala:15:29
        rhsReg_5 = _RANDOM_3[7];	// tools.scala:15:29
        rhsReg_6 = {_RANDOM_3[31:8], _RANDOM_4, _RANDOM_5[7:0]};	// tools.scala:15:29
        rhsReg_7 = {_RANDOM_5[31:8], _RANDOM_6, _RANDOM_7[7:0]};	// tools.scala:15:29
        rhsReg_8 = _RANDOM_7[12:8];	// tools.scala:15:29
        rhsReg_9 = _RANDOM_7[13];	// tools.scala:15:29
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:953:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:953:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_EX_to_MEM_bus_valid = rhsReg_9;	// <stdin>:953:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_Inst = rhsReg_1;	// <stdin>:953:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_PC = rhsReg;	// <stdin>:953:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_ALU_result = rhsReg_7;	// <stdin>:953:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_memWriteData = rhsReg_6;	// <stdin>:953:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_memWriteEn = rhsReg_4;	// <stdin>:953:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_memReadEn = rhsReg_5;	// <stdin>:953:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_lsutype = rhsReg_8;	// <stdin>:953:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_regWriteID = rhsReg_3;	// <stdin>:953:10, tools.scala:15:29
  assign io_EX_to_MEM_bus_bits_regWriteEn = rhsReg_2;	// <stdin>:953:10, tools.scala:15:29
  assign io_EX_ALUResult_Pass = _GEN_5;	// <stdin>:953:10, Mux.scala:101:16
endmodule

module MEM_pre_stage(	// <stdin>:1220:10
  input         clock,
                reset,
                io_EX_to_MEM_bus_valid,
  input  [31:0] io_EX_to_MEM_bus_bits_Inst,
  input  [63:0] io_EX_to_MEM_bus_bits_PC,
                io_EX_to_MEM_bus_bits_ALU_result,
                io_EX_to_MEM_bus_bits_memWriteData,
  input         io_EX_to_MEM_bus_bits_memWriteEn,
                io_EX_to_MEM_bus_bits_memReadEn,
  input  [4:0]  io_EX_to_MEM_bus_bits_lsutype,
                io_EX_to_MEM_bus_bits_regWriteID,
  input         io_EX_to_MEM_bus_bits_regWriteEn,
  input  [63:0] axi_lite_readData_bits_data,
  output        io_PMEM_to_MEM_bus_valid,
  output [63:0] io_PMEM_to_MEM_bus_bits_ALU_result,
  output        io_PMEM_to_MEM_bus_bits_regWriteEn,
  output [4:0]  io_PMEM_to_MEM_bus_bits_regWriteID,
  output [63:0] io_PMEM_to_MEM_bus_bits_memReadData,
  output        io_PMEM_to_MEM_bus_bits_memReadEn,
  output [63:0] io_PMEM_to_MEM_bus_bits_PC,
  output [31:0] io_PMEM_to_MEM_bus_bits_Inst,
  output        axi_lite_writeAddr_valid,
  output [31:0] axi_lite_writeAddr_bits_addr,
  output        axi_lite_writeData_valid,
  output [63:0] axi_lite_writeData_bits_data,
  output [7:0]  axi_lite_writeData_bits_strb,
  output        axi_lite_writeResp_ready,
                axi_lite_readAddr_valid,
  output [31:0] axi_lite_readAddr_bits_addr,
  output        axi_lite_readData_ready);

  reg  [4:0]  rhsReg_8;	// tools.scala:15:29
  reg  [63:0] rhsReg;	// tools.scala:15:29
  reg  [31:0] rhsReg_1;	// tools.scala:15:29
  reg  [63:0] rhsReg_2;	// tools.scala:15:29
  reg         rhsReg_3;	// tools.scala:15:29
  reg  [4:0]  rhsReg_4;	// tools.scala:15:29
  reg         rhsReg_5;	// tools.scala:15:29
  reg         rhsReg_6;	// tools.scala:15:29
  reg  [63:0] rhsReg_7;	// tools.scala:15:29
  reg         rhsReg_9;	// tools.scala:15:29
  wire        _axi_lite_readData_ready_T = io_EX_to_MEM_bus_bits_memReadEn | rhsReg_5;	// pre_mem.scala:74:58, tools.scala:15:29
  always @(posedge clock) begin
    if (reset) begin
      rhsReg <= 64'h0;	// pre_mem.scala:48:17, tools.scala:15:29
      rhsReg_1 <= 32'h0;	// Bitwise.scala:77:12, tools.scala:15:29
      rhsReg_2 <= 64'h0;	// pre_mem.scala:48:17, tools.scala:15:29
      rhsReg_3 <= 1'h0;	// pre_mem.scala:39:11, tools.scala:15:29
      rhsReg_4 <= 5'h0;	// tools.scala:15:29
      rhsReg_5 <= 1'h0;	// pre_mem.scala:39:11, tools.scala:15:29
      rhsReg_6 <= 1'h0;	// pre_mem.scala:39:11, tools.scala:15:29
      rhsReg_7 <= 64'h0;	// pre_mem.scala:48:17, tools.scala:15:29
      rhsReg_8 <= 5'h0;	// tools.scala:15:29
      rhsReg_9 <= 1'h0;	// pre_mem.scala:39:11, tools.scala:15:29
    end
    else begin
      rhsReg <= io_EX_to_MEM_bus_bits_PC;	// tools.scala:15:29
      rhsReg_1 <= io_EX_to_MEM_bus_bits_Inst;	// tools.scala:15:29
      rhsReg_2 <= io_EX_to_MEM_bus_bits_ALU_result;	// tools.scala:15:29
      rhsReg_3 <= io_EX_to_MEM_bus_bits_regWriteEn;	// tools.scala:15:29
      rhsReg_4 <= io_EX_to_MEM_bus_bits_regWriteID;	// tools.scala:15:29
      rhsReg_5 <= io_EX_to_MEM_bus_bits_memReadEn;	// tools.scala:15:29
      rhsReg_6 <= io_EX_to_MEM_bus_bits_memWriteEn;	// tools.scala:15:29
      rhsReg_7 <= io_EX_to_MEM_bus_bits_memWriteData;	// tools.scala:15:29
      rhsReg_8 <= io_EX_to_MEM_bus_bits_lsutype;	// tools.scala:15:29
      rhsReg_9 <= io_EX_to_MEM_bus_valid;	// tools.scala:15:29
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1220:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1220:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1220:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1220:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1220:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1220:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1220:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1220:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1220:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1220:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:1220:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:1220:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1220:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1220:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1220:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1220:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1220:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1220:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1220:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1220:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1220:10
        _RANDOM_6 = `RANDOM;	// <stdin>:1220:10
        _RANDOM_7 = `RANDOM;	// <stdin>:1220:10
        rhsReg = {_RANDOM_0, _RANDOM_1};	// tools.scala:15:29
        rhsReg_1 = _RANDOM_2;	// tools.scala:15:29
        rhsReg_2 = {_RANDOM_3, _RANDOM_4};	// tools.scala:15:29
        rhsReg_3 = _RANDOM_5[0];	// tools.scala:15:29
        rhsReg_4 = _RANDOM_5[5:1];	// tools.scala:15:29
        rhsReg_5 = _RANDOM_5[6];	// tools.scala:15:29
        rhsReg_6 = _RANDOM_5[7];	// tools.scala:15:29
        rhsReg_7 = {_RANDOM_5[31:8], _RANDOM_6, _RANDOM_7[7:0]};	// tools.scala:15:29
        rhsReg_8 = _RANDOM_7[12:8];	// tools.scala:15:29
        rhsReg_9 = _RANDOM_7[13];	// tools.scala:15:29
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1220:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1220:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_PMEM_to_MEM_bus_valid = rhsReg_9;	// <stdin>:1220:10, tools.scala:15:29
  assign io_PMEM_to_MEM_bus_bits_ALU_result = rhsReg_2;	// <stdin>:1220:10, tools.scala:15:29
  assign io_PMEM_to_MEM_bus_bits_regWriteEn = rhsReg_3;	// <stdin>:1220:10, tools.scala:15:29
  assign io_PMEM_to_MEM_bus_bits_regWriteID = rhsReg_4;	// <stdin>:1220:10, tools.scala:15:29
  assign io_PMEM_to_MEM_bus_bits_memReadData = rhsReg_8 == 5'h11 ? axi_lite_readData_bits_data : rhsReg_8 == 5'h9 ?
                {{32{axi_lite_readData_bits_data[31]}}, axi_lite_readData_bits_data[31:0]} : rhsReg_8 ==
                5'h5 ? {{48{axi_lite_readData_bits_data[15]}}, axi_lite_readData_bits_data[15:0]} :
                rhsReg_8 == 5'h3 ? {{56{axi_lite_readData_bits_data[7]}}, axi_lite_readData_bits_data[7:0]}
                : rhsReg_8 == 5'h8 ? {32'h0, axi_lite_readData_bits_data[31:0]} : rhsReg_8 == 5'h4 ?
                {48'h0, axi_lite_readData_bits_data[15:0]} : rhsReg_8 == 5'h2 ? {56'h0,
                axi_lite_readData_bits_data[7:0]} : 64'h0;	// <stdin>:1220:10, Bitwise.scala:77:12, Cat.scala:33:92, pre_mem.scala:40:44, :48:17, :49:44, :50:30, :51:{30,65}, :52:{30,65}, :53:{30,65}, :54:{30,60}, :55:{30,60}, :56:{30,60}, tools.scala:9:34, :15:29
  assign io_PMEM_to_MEM_bus_bits_memReadEn = rhsReg_5;	// <stdin>:1220:10, tools.scala:15:29
  assign io_PMEM_to_MEM_bus_bits_PC = rhsReg;	// <stdin>:1220:10, tools.scala:15:29
  assign io_PMEM_to_MEM_bus_bits_Inst = rhsReg_1;	// <stdin>:1220:10, tools.scala:15:29
  assign axi_lite_writeAddr_valid = io_EX_to_MEM_bus_bits_memWriteEn | rhsReg_6;	// <stdin>:1220:10, pre_mem.scala:79:59, tools.scala:15:29
  assign axi_lite_writeAddr_bits_addr = io_EX_to_MEM_bus_bits_ALU_result[31:0];	// <stdin>:1220:10, pre_mem.scala:75:45
  assign axi_lite_writeData_valid = rhsReg_6;	// <stdin>:1220:10, tools.scala:15:29
  assign axi_lite_writeData_bits_data = rhsReg_7;	// <stdin>:1220:10, tools.scala:15:29
  assign axi_lite_writeData_bits_strb = rhsReg_8 == 5'h10 ? 8'hFF : rhsReg_8 == 5'h8 ? 8'hF : rhsReg_8 == 5'h4 ? 8'h3 : {7'h0,
                rhsReg_8 == 5'h2};	// <stdin>:1220:10, pre_mem.scala:39:11, :40:44, :41:24, :42:24, :43:24, :44:24, tools.scala:15:29
  assign axi_lite_writeResp_ready = rhsReg_6;	// <stdin>:1220:10, tools.scala:15:29
  assign axi_lite_readAddr_valid = _axi_lite_readData_ready_T;	// <stdin>:1220:10, pre_mem.scala:74:58
  assign axi_lite_readAddr_bits_addr = io_EX_to_MEM_bus_bits_ALU_result[31:0];	// <stdin>:1220:10, pre_mem.scala:75:45
  assign axi_lite_readData_ready = _axi_lite_readData_ready_T;	// <stdin>:1220:10, pre_mem.scala:74:58
endmodule

module MEMU(	// <stdin>:1377:10
  input         clock,
                reset,
                io_EX_to_MEM_bus_valid,
  input  [31:0] io_EX_to_MEM_bus_bits_Inst,
  input  [63:0] io_EX_to_MEM_bus_bits_PC,
                io_EX_to_MEM_bus_bits_ALU_result,
                io_EX_to_MEM_bus_bits_memWriteData,
  input         io_EX_to_MEM_bus_bits_memWriteEn,
                io_EX_to_MEM_bus_bits_memReadEn,
  input  [4:0]  io_EX_to_MEM_bus_bits_lsutype,
                io_EX_to_MEM_bus_bits_regWriteID,
  input         io_EX_to_MEM_bus_bits_regWriteEn,
  output        io_MEM_to_WB_bus_valid,
  output [63:0] io_MEM_to_WB_bus_bits_regWriteData,
  output        io_MEM_to_WB_bus_bits_regWriteEn,
  output [4:0]  io_MEM_to_WB_bus_bits_regWriteID,
  output [63:0] io_MEM_to_WB_bus_bits_PC,
  output [31:0] io_MEM_to_WB_bus_bits_Inst,
  output [63:0] io_MEM_to_ID_forward_bits_regWriteData,
  output        io_MEM_to_ID_forward_bits_regWriteEn,
  output [4:0]  io_MEM_to_ID_forward_bits_regWriteID,
  output [63:0] io_PMEM_pc);

  wire        _data_ram_arready;	// MEMU.scala:54:31
  wire [63:0] _data_ram_rdata;	// MEMU.scala:54:31
  wire [1:0]  _data_ram_rresp;	// MEMU.scala:54:31
  wire        _data_ram_rvalid;	// MEMU.scala:54:31
  wire        _data_ram_awready;	// MEMU.scala:54:31
  wire        _data_ram_wready;	// MEMU.scala:54:31
  wire [1:0]  _data_ram_bresp;	// MEMU.scala:54:31
  wire        _data_ram_bvalid;	// MEMU.scala:54:31
  wire        _pre_mem_io_PMEM_to_MEM_bus_valid;	// MEMU.scala:53:31
  wire [63:0] _pre_mem_io_PMEM_to_MEM_bus_bits_ALU_result;	// MEMU.scala:53:31
  wire        _pre_mem_io_PMEM_to_MEM_bus_bits_regWriteEn;	// MEMU.scala:53:31
  wire [4:0]  _pre_mem_io_PMEM_to_MEM_bus_bits_regWriteID;	// MEMU.scala:53:31
  wire [63:0] _pre_mem_io_PMEM_to_MEM_bus_bits_memReadData;	// MEMU.scala:53:31
  wire        _pre_mem_io_PMEM_to_MEM_bus_bits_memReadEn;	// MEMU.scala:53:31
  wire [63:0] _pre_mem_io_PMEM_to_MEM_bus_bits_PC;	// MEMU.scala:53:31
  wire [31:0] _pre_mem_io_PMEM_to_MEM_bus_bits_Inst;	// MEMU.scala:53:31
  wire        _pre_mem_axi_lite_writeAddr_valid;	// MEMU.scala:53:31
  wire [31:0] _pre_mem_axi_lite_writeAddr_bits_addr;	// MEMU.scala:53:31
  wire        _pre_mem_axi_lite_writeData_valid;	// MEMU.scala:53:31
  wire [63:0] _pre_mem_axi_lite_writeData_bits_data;	// MEMU.scala:53:31
  wire [7:0]  _pre_mem_axi_lite_writeData_bits_strb;	// MEMU.scala:53:31
  wire        _pre_mem_axi_lite_writeResp_ready;	// MEMU.scala:53:31
  wire        _pre_mem_axi_lite_readAddr_valid;	// MEMU.scala:53:31
  wire [31:0] _pre_mem_axi_lite_readAddr_bits_addr;	// MEMU.scala:53:31
  wire        _pre_mem_axi_lite_readData_ready;	// MEMU.scala:53:31
  reg  [63:0] rhsReg;	// tools.scala:15:29
  reg  [31:0] rhsReg_1;	// tools.scala:15:29
  reg         rhsReg_2;	// tools.scala:15:29
  reg  [4:0]  rhsReg_3;	// tools.scala:15:29
  reg  [63:0] rhsReg_4;	// tools.scala:15:29
  reg         rhsReg_5;	// tools.scala:15:29
  always @(posedge clock) begin
    if (reset) begin
      rhsReg <= 64'h0;	// tools.scala:15:29
      rhsReg_1 <= 32'h0;	// tools.scala:15:29
      rhsReg_2 <= 1'h0;	// MEMU.scala:61:28, tools.scala:15:29
      rhsReg_3 <= 5'h0;	// tools.scala:15:29
      rhsReg_4 <= 64'h0;	// tools.scala:15:29
      rhsReg_5 <= 1'h0;	// MEMU.scala:61:28, tools.scala:15:29
    end
    else begin
      rhsReg <= _pre_mem_io_PMEM_to_MEM_bus_bits_PC;	// MEMU.scala:53:31, tools.scala:15:29
      rhsReg_1 <= _pre_mem_io_PMEM_to_MEM_bus_bits_Inst;	// MEMU.scala:53:31, tools.scala:15:29
      rhsReg_2 <= _pre_mem_io_PMEM_to_MEM_bus_bits_regWriteEn;	// MEMU.scala:53:31, tools.scala:15:29
      rhsReg_3 <= _pre_mem_io_PMEM_to_MEM_bus_bits_regWriteID;	// MEMU.scala:53:31, tools.scala:15:29
      if (_pre_mem_io_PMEM_to_MEM_bus_bits_memReadEn)	// MEMU.scala:53:31
        rhsReg_4 <= _pre_mem_io_PMEM_to_MEM_bus_bits_memReadData;	// MEMU.scala:53:31, tools.scala:15:29
      else	// MEMU.scala:53:31
        rhsReg_4 <= _pre_mem_io_PMEM_to_MEM_bus_bits_ALU_result;	// MEMU.scala:53:31, tools.scala:15:29
      rhsReg_5 <= _pre_mem_io_PMEM_to_MEM_bus_valid;	// MEMU.scala:53:31, tools.scala:15:29
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1377:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1377:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1377:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1377:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1377:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1377:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1377:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1377:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1377:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1377:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1377:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1377:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1377:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1377:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1377:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1377:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1377:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1377:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1377:10
        rhsReg = {_RANDOM_0, _RANDOM_1};	// tools.scala:15:29
        rhsReg_1 = _RANDOM_2;	// tools.scala:15:29
        rhsReg_2 = _RANDOM_3[0];	// tools.scala:15:29
        rhsReg_3 = _RANDOM_3[5:1];	// tools.scala:15:29
        rhsReg_4 = {_RANDOM_3[31:6], _RANDOM_4, _RANDOM_5[5:0]};	// tools.scala:15:29
        rhsReg_5 = _RANDOM_5[6];	// tools.scala:15:29
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1377:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1377:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  MEM_pre_stage pre_mem (	// MEMU.scala:53:31
    .clock                               (clock),
    .reset                               (reset),
    .io_EX_to_MEM_bus_valid              (io_EX_to_MEM_bus_valid),
    .io_EX_to_MEM_bus_bits_Inst          (io_EX_to_MEM_bus_bits_Inst),
    .io_EX_to_MEM_bus_bits_PC            (io_EX_to_MEM_bus_bits_PC),
    .io_EX_to_MEM_bus_bits_ALU_result    (io_EX_to_MEM_bus_bits_ALU_result),
    .io_EX_to_MEM_bus_bits_memWriteData  (io_EX_to_MEM_bus_bits_memWriteData),
    .io_EX_to_MEM_bus_bits_memWriteEn    (io_EX_to_MEM_bus_bits_memWriteEn),
    .io_EX_to_MEM_bus_bits_memReadEn     (io_EX_to_MEM_bus_bits_memReadEn),
    .io_EX_to_MEM_bus_bits_lsutype       (io_EX_to_MEM_bus_bits_lsutype),
    .io_EX_to_MEM_bus_bits_regWriteID    (io_EX_to_MEM_bus_bits_regWriteID),
    .io_EX_to_MEM_bus_bits_regWriteEn    (io_EX_to_MEM_bus_bits_regWriteEn),
    .axi_lite_readData_bits_data         (_data_ram_rdata),	// MEMU.scala:54:31
    .io_PMEM_to_MEM_bus_valid            (_pre_mem_io_PMEM_to_MEM_bus_valid),
    .io_PMEM_to_MEM_bus_bits_ALU_result  (_pre_mem_io_PMEM_to_MEM_bus_bits_ALU_result),
    .io_PMEM_to_MEM_bus_bits_regWriteEn  (_pre_mem_io_PMEM_to_MEM_bus_bits_regWriteEn),
    .io_PMEM_to_MEM_bus_bits_regWriteID  (_pre_mem_io_PMEM_to_MEM_bus_bits_regWriteID),
    .io_PMEM_to_MEM_bus_bits_memReadData (_pre_mem_io_PMEM_to_MEM_bus_bits_memReadData),
    .io_PMEM_to_MEM_bus_bits_memReadEn   (_pre_mem_io_PMEM_to_MEM_bus_bits_memReadEn),
    .io_PMEM_to_MEM_bus_bits_PC          (_pre_mem_io_PMEM_to_MEM_bus_bits_PC),
    .io_PMEM_to_MEM_bus_bits_Inst        (_pre_mem_io_PMEM_to_MEM_bus_bits_Inst),
    .axi_lite_writeAddr_valid            (_pre_mem_axi_lite_writeAddr_valid),
    .axi_lite_writeAddr_bits_addr        (_pre_mem_axi_lite_writeAddr_bits_addr),
    .axi_lite_writeData_valid            (_pre_mem_axi_lite_writeData_valid),
    .axi_lite_writeData_bits_data        (_pre_mem_axi_lite_writeData_bits_data),
    .axi_lite_writeData_bits_strb        (_pre_mem_axi_lite_writeData_bits_strb),
    .axi_lite_writeResp_ready            (_pre_mem_axi_lite_writeResp_ready),
    .axi_lite_readAddr_valid             (_pre_mem_axi_lite_readAddr_valid),
    .axi_lite_readAddr_bits_addr         (_pre_mem_axi_lite_readAddr_bits_addr),
    .axi_lite_readData_ready             (_pre_mem_axi_lite_readData_ready)
  );
  sim_sram data_ram (	// MEMU.scala:54:31
    .pc      (_pre_mem_io_PMEM_to_MEM_bus_bits_PC),	// MEMU.scala:53:31
    .aclk    (clock),
    .aresetn (~reset),	// MEMU.scala:61:28
    .araddr  (_pre_mem_axi_lite_readAddr_bits_addr),	// MEMU.scala:53:31
    .arvalid (_pre_mem_axi_lite_readAddr_valid),	// MEMU.scala:53:31
    .rready  (_pre_mem_axi_lite_readData_ready),	// MEMU.scala:53:31
    .awaddr  (_pre_mem_axi_lite_writeAddr_bits_addr),	// MEMU.scala:53:31
    .awvalid (_pre_mem_axi_lite_writeAddr_valid),	// MEMU.scala:53:31
    .wdata   (_pre_mem_axi_lite_writeData_bits_data),	// MEMU.scala:53:31
    .wstrb   (_pre_mem_axi_lite_writeData_bits_strb),	// MEMU.scala:53:31
    .wvalid  (_pre_mem_axi_lite_writeData_valid),	// MEMU.scala:53:31
    .bready  (_pre_mem_axi_lite_writeResp_ready),	// MEMU.scala:53:31
    .arready (_data_ram_arready),
    .rdata   (_data_ram_rdata),
    .rresp   (_data_ram_rresp),
    .rvalid  (_data_ram_rvalid),
    .awready (_data_ram_awready),
    .wready  (_data_ram_wready),
    .bresp   (_data_ram_bresp),
    .bvalid  (_data_ram_bvalid)
  );
  assign io_MEM_to_WB_bus_valid = rhsReg_5;	// <stdin>:1377:10, tools.scala:15:29
  assign io_MEM_to_WB_bus_bits_regWriteData = rhsReg_4;	// <stdin>:1377:10, tools.scala:15:29
  assign io_MEM_to_WB_bus_bits_regWriteEn = rhsReg_2;	// <stdin>:1377:10, tools.scala:15:29
  assign io_MEM_to_WB_bus_bits_regWriteID = rhsReg_3;	// <stdin>:1377:10, tools.scala:15:29
  assign io_MEM_to_WB_bus_bits_PC = rhsReg;	// <stdin>:1377:10, tools.scala:15:29
  assign io_MEM_to_WB_bus_bits_Inst = rhsReg_1;	// <stdin>:1377:10, tools.scala:15:29
  assign io_MEM_to_ID_forward_bits_regWriteData = _pre_mem_io_PMEM_to_MEM_bus_bits_memReadEn ? _pre_mem_io_PMEM_to_MEM_bus_bits_memReadData :
                _pre_mem_io_PMEM_to_MEM_bus_bits_ALU_result;	// <stdin>:1377:10, MEMU.scala:53:31, :88:24
  assign io_MEM_to_ID_forward_bits_regWriteEn = _pre_mem_io_PMEM_to_MEM_bus_bits_regWriteEn;	// <stdin>:1377:10, MEMU.scala:53:31
  assign io_MEM_to_ID_forward_bits_regWriteID = _pre_mem_io_PMEM_to_MEM_bus_bits_regWriteID;	// <stdin>:1377:10, MEMU.scala:53:31
  assign io_PMEM_pc = _pre_mem_io_PMEM_to_MEM_bus_bits_PC;	// <stdin>:1377:10, MEMU.scala:53:31
endmodule

module WBU(	// <stdin>:1465:10
  input         io_MEM_to_WB_bus_valid,
  input  [63:0] io_MEM_to_WB_bus_bits_regWriteData,
  input         io_MEM_to_WB_bus_bits_regWriteEn,
  input  [4:0]  io_MEM_to_WB_bus_bits_regWriteID,
  input  [63:0] io_MEM_to_WB_bus_bits_PC,
  input  [31:0] io_MEM_to_WB_bus_bits_Inst,
  output        io_WB_to_ID_forward_valid,
  output [63:0] io_WB_to_ID_forward_bits_regWriteData,
  output        io_WB_to_ID_forward_bits_regWriteEn,
  output [4:0]  io_WB_to_ID_forward_bits_regWriteID,
  output [63:0] io_WB_pc,
  output [31:0] io_WB_Inst);

  assign io_WB_to_ID_forward_valid = io_MEM_to_WB_bus_valid;	// <stdin>:1465:10
  assign io_WB_to_ID_forward_bits_regWriteData = io_MEM_to_WB_bus_bits_regWriteData;	// <stdin>:1465:10
  assign io_WB_to_ID_forward_bits_regWriteEn = io_MEM_to_WB_bus_bits_regWriteEn;	// <stdin>:1465:10
  assign io_WB_to_ID_forward_bits_regWriteID = io_MEM_to_WB_bus_bits_regWriteID;	// <stdin>:1465:10
  assign io_WB_pc = io_MEM_to_WB_bus_bits_PC;	// <stdin>:1465:10
  assign io_WB_Inst = io_MEM_to_WB_bus_bits_Inst;	// <stdin>:1465:10
endmodule

// external module sim

module top(	// <stdin>:1488:10
  input         clock,
                reset,
  output [63:0] io_ID_npc,
                io_PF_npc,
                io_PF_pc,
                io_IF_pc,
                io_ID_pc,
                io_EX_pc,
                io_PMEM_pc,
                io_WB_pc,
  output [31:0] io_WB_Inst,
  output [63:0] io_WB_RegWriteData,
                io_WB_RegWriteID,
  output        io_WB_valid,
  output [63:0] io_MEM_RegWriteData,
  output        io_stall,
  output [31:0] io_IF_Inst,
  output        io_IF_valid,
  output [63:0] io_ID_ALU_Data1,
                io_ID_ALU_Data2,
                io_ID_Rs1Data,
                io_ID_Rs2Data,
                io_ALUResult);

  wire [63:0] _simulate_inst;	// top.scala:76:26
  wire [63:0] _wb_unit_io_WB_to_ID_forward_bits_regWriteData;	// top.scala:50:25
  wire        _wb_unit_io_WB_to_ID_forward_bits_regWriteEn;	// top.scala:50:25
  wire [4:0]  _wb_unit_io_WB_to_ID_forward_bits_regWriteID;	// top.scala:50:25
  wire [31:0] _wb_unit_io_WB_Inst;	// top.scala:50:25
  wire        _mem_unit_io_MEM_to_WB_bus_valid;	// top.scala:49:26
  wire [63:0] _mem_unit_io_MEM_to_WB_bus_bits_regWriteData;	// top.scala:49:26
  wire        _mem_unit_io_MEM_to_WB_bus_bits_regWriteEn;	// top.scala:49:26
  wire [4:0]  _mem_unit_io_MEM_to_WB_bus_bits_regWriteID;	// top.scala:49:26
  wire [63:0] _mem_unit_io_MEM_to_WB_bus_bits_PC;	// top.scala:49:26
  wire [31:0] _mem_unit_io_MEM_to_WB_bus_bits_Inst;	// top.scala:49:26
  wire [63:0] _mem_unit_io_MEM_to_ID_forward_bits_regWriteData;	// top.scala:49:26
  wire        _mem_unit_io_MEM_to_ID_forward_bits_regWriteEn;	// top.scala:49:26
  wire [4:0]  _mem_unit_io_MEM_to_ID_forward_bits_regWriteID;	// top.scala:49:26
  wire        _excute_unit_io_EX_to_MEM_bus_valid;	// top.scala:48:29
  wire [31:0] _excute_unit_io_EX_to_MEM_bus_bits_Inst;	// top.scala:48:29
  wire [63:0] _excute_unit_io_EX_to_MEM_bus_bits_PC;	// top.scala:48:29
  wire [63:0] _excute_unit_io_EX_to_MEM_bus_bits_ALU_result;	// top.scala:48:29
  wire [63:0] _excute_unit_io_EX_to_MEM_bus_bits_memWriteData;	// top.scala:48:29
  wire        _excute_unit_io_EX_to_MEM_bus_bits_memWriteEn;	// top.scala:48:29
  wire        _excute_unit_io_EX_to_MEM_bus_bits_memReadEn;	// top.scala:48:29
  wire [4:0]  _excute_unit_io_EX_to_MEM_bus_bits_lsutype;	// top.scala:48:29
  wire [4:0]  _excute_unit_io_EX_to_MEM_bus_bits_regWriteID;	// top.scala:48:29
  wire        _excute_unit_io_EX_to_MEM_bus_bits_regWriteEn;	// top.scala:48:29
  wire [63:0] _excute_unit_io_EX_ALUResult_Pass;	// top.scala:48:29
  wire        _inst_decode_unit_io_IF_to_ID_bus_ready;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_npc;	// top.scala:47:34
  wire        _inst_decode_unit_io_ID_to_EX_bus_valid;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data1;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data2;	// top.scala:47:34
  wire        _inst_decode_unit_io_ID_to_EX_bus_bits_futype;	// top.scala:47:34
  wire [4:0]  _inst_decode_unit_io_ID_to_EX_bus_bits_optype;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_to_EX_bus_bits_rs2_data;	// top.scala:47:34
  wire [4:0]  _inst_decode_unit_io_ID_to_EX_bus_bits_regWriteID;	// top.scala:47:34
  wire        _inst_decode_unit_io_ID_to_EX_bus_bits_regWriteEn;	// top.scala:47:34
  wire        _inst_decode_unit_io_ID_to_EX_bus_bits_memWriteEn;	// top.scala:47:34
  wire        _inst_decode_unit_io_ID_to_EX_bus_bits_memReadEn;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_to_EX_bus_bits_PC;	// top.scala:47:34
  wire [31:0] _inst_decode_unit_io_ID_to_EX_bus_bits_Inst;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_0;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_1;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_2;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_3;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_4;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_5;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_6;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_7;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_8;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_9;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_10;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_11;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_12;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_13;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_14;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_15;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_16;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_17;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_18;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_19;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_20;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_21;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_22;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_23;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_24;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_25;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_26;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_27;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_28;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_29;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_30;	// top.scala:47:34
  wire [63:0] _inst_decode_unit_io_ID_GPR_31;	// top.scala:47:34
  wire        _inst_decode_unit_io_ID_unknown_inst;	// top.scala:47:34
  wire        _inst_fetch_unit_io_IF_to_ID_bus_valid;	// top.scala:46:33
  wire [63:0] _inst_fetch_unit_io_IF_to_ID_bus_bits_PC;	// top.scala:46:33
  wire [31:0] _inst_fetch_unit_io_IF_to_ID_bus_bits_Inst;	// top.scala:46:33
  IFU inst_fetch_unit (	// top.scala:46:33
    .clock                     (clock),
    .reset                     (reset),
    .io_ID_npc                 (_inst_decode_unit_io_ID_npc),	// top.scala:47:34
    .io_IF_to_ID_bus_ready     (_inst_decode_unit_io_IF_to_ID_bus_ready),	// top.scala:47:34
    .io_IF_to_ID_bus_valid     (_inst_fetch_unit_io_IF_to_ID_bus_valid),
    .io_IF_to_ID_bus_bits_PC   (_inst_fetch_unit_io_IF_to_ID_bus_bits_PC),
    .io_IF_to_ID_bus_bits_Inst (_inst_fetch_unit_io_IF_to_ID_bus_bits_Inst),
    .io_PF_npc                 (io_PF_npc),
    .io_PF_pc                  (io_PF_pc)
  );
  IDU inst_decode_unit (	// top.scala:47:34
    .clock                                  (clock),
    .reset                                  (reset),
    .io_IF_to_ID_bus_valid                  (_inst_fetch_unit_io_IF_to_ID_bus_valid),	// top.scala:46:33
    .io_IF_to_ID_bus_bits_PC                (_inst_fetch_unit_io_IF_to_ID_bus_bits_PC),	// top.scala:46:33
    .io_IF_to_ID_bus_bits_Inst              (_inst_fetch_unit_io_IF_to_ID_bus_bits_Inst),	// top.scala:46:33
    .io_WB_to_ID_forward_bits_regWriteData  (_wb_unit_io_WB_to_ID_forward_bits_regWriteData),	// top.scala:50:25
    .io_WB_to_ID_forward_bits_regWriteEn    (_wb_unit_io_WB_to_ID_forward_bits_regWriteEn),	// top.scala:50:25
    .io_WB_to_ID_forward_bits_regWriteID    (_wb_unit_io_WB_to_ID_forward_bits_regWriteID),	// top.scala:50:25
    .io_MEM_to_ID_forward_bits_regWriteData (_mem_unit_io_MEM_to_ID_forward_bits_regWriteData),	// top.scala:49:26
    .io_MEM_to_ID_forward_bits_regWriteEn   (_mem_unit_io_MEM_to_ID_forward_bits_regWriteEn),	// top.scala:49:26
    .io_MEM_to_ID_forward_bits_regWriteID   (_mem_unit_io_MEM_to_ID_forward_bits_regWriteID),	// top.scala:49:26
    .io_EX_ALUResult                        (_excute_unit_io_EX_ALUResult_Pass),	// top.scala:48:29
    .io_IF_to_ID_bus_ready                  (_inst_decode_unit_io_IF_to_ID_bus_ready),
    .io_ID_npc                              (_inst_decode_unit_io_ID_npc),
    .io_ID_to_EX_bus_valid                  (_inst_decode_unit_io_ID_to_EX_bus_valid),
    .io_ID_to_EX_bus_bits_ALU_Data1         (_inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data1),
    .io_ID_to_EX_bus_bits_ALU_Data2         (_inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data2),
    .io_ID_to_EX_bus_bits_futype            (_inst_decode_unit_io_ID_to_EX_bus_bits_futype),
    .io_ID_to_EX_bus_bits_optype            (_inst_decode_unit_io_ID_to_EX_bus_bits_optype),
    .io_ID_to_EX_bus_bits_rs1_data          (io_ID_Rs1Data),
    .io_ID_to_EX_bus_bits_rs2_data          (_inst_decode_unit_io_ID_to_EX_bus_bits_rs2_data),
    .io_ID_to_EX_bus_bits_regWriteID        (_inst_decode_unit_io_ID_to_EX_bus_bits_regWriteID),
    .io_ID_to_EX_bus_bits_regWriteEn        (_inst_decode_unit_io_ID_to_EX_bus_bits_regWriteEn),
    .io_ID_to_EX_bus_bits_memWriteEn        (_inst_decode_unit_io_ID_to_EX_bus_bits_memWriteEn),
    .io_ID_to_EX_bus_bits_memReadEn         (_inst_decode_unit_io_ID_to_EX_bus_bits_memReadEn),
    .io_ID_to_EX_bus_bits_PC                (_inst_decode_unit_io_ID_to_EX_bus_bits_PC),
    .io_ID_to_EX_bus_bits_Inst              (_inst_decode_unit_io_ID_to_EX_bus_bits_Inst),
    .io_ID_stall                            (io_stall),
    .io_ID_GPR_0                            (_inst_decode_unit_io_ID_GPR_0),
    .io_ID_GPR_1                            (_inst_decode_unit_io_ID_GPR_1),
    .io_ID_GPR_2                            (_inst_decode_unit_io_ID_GPR_2),
    .io_ID_GPR_3                            (_inst_decode_unit_io_ID_GPR_3),
    .io_ID_GPR_4                            (_inst_decode_unit_io_ID_GPR_4),
    .io_ID_GPR_5                            (_inst_decode_unit_io_ID_GPR_5),
    .io_ID_GPR_6                            (_inst_decode_unit_io_ID_GPR_6),
    .io_ID_GPR_7                            (_inst_decode_unit_io_ID_GPR_7),
    .io_ID_GPR_8                            (_inst_decode_unit_io_ID_GPR_8),
    .io_ID_GPR_9                            (_inst_decode_unit_io_ID_GPR_9),
    .io_ID_GPR_10                           (_inst_decode_unit_io_ID_GPR_10),
    .io_ID_GPR_11                           (_inst_decode_unit_io_ID_GPR_11),
    .io_ID_GPR_12                           (_inst_decode_unit_io_ID_GPR_12),
    .io_ID_GPR_13                           (_inst_decode_unit_io_ID_GPR_13),
    .io_ID_GPR_14                           (_inst_decode_unit_io_ID_GPR_14),
    .io_ID_GPR_15                           (_inst_decode_unit_io_ID_GPR_15),
    .io_ID_GPR_16                           (_inst_decode_unit_io_ID_GPR_16),
    .io_ID_GPR_17                           (_inst_decode_unit_io_ID_GPR_17),
    .io_ID_GPR_18                           (_inst_decode_unit_io_ID_GPR_18),
    .io_ID_GPR_19                           (_inst_decode_unit_io_ID_GPR_19),
    .io_ID_GPR_20                           (_inst_decode_unit_io_ID_GPR_20),
    .io_ID_GPR_21                           (_inst_decode_unit_io_ID_GPR_21),
    .io_ID_GPR_22                           (_inst_decode_unit_io_ID_GPR_22),
    .io_ID_GPR_23                           (_inst_decode_unit_io_ID_GPR_23),
    .io_ID_GPR_24                           (_inst_decode_unit_io_ID_GPR_24),
    .io_ID_GPR_25                           (_inst_decode_unit_io_ID_GPR_25),
    .io_ID_GPR_26                           (_inst_decode_unit_io_ID_GPR_26),
    .io_ID_GPR_27                           (_inst_decode_unit_io_ID_GPR_27),
    .io_ID_GPR_28                           (_inst_decode_unit_io_ID_GPR_28),
    .io_ID_GPR_29                           (_inst_decode_unit_io_ID_GPR_29),
    .io_ID_GPR_30                           (_inst_decode_unit_io_ID_GPR_30),
    .io_ID_GPR_31                           (_inst_decode_unit_io_ID_GPR_31),
    .io_ID_unknown_inst                     (_inst_decode_unit_io_ID_unknown_inst)
  );
  EXU excute_unit (	// top.scala:48:29
    .clock                              (clock),
    .reset                              (reset),
    .io_ID_to_EX_bus_valid              (_inst_decode_unit_io_ID_to_EX_bus_valid),	// top.scala:47:34
    .io_ID_to_EX_bus_bits_ALU_Data1     (_inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data1),	// top.scala:47:34
    .io_ID_to_EX_bus_bits_ALU_Data2     (_inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data2),	// top.scala:47:34
    .io_ID_to_EX_bus_bits_futype        (_inst_decode_unit_io_ID_to_EX_bus_bits_futype),	// top.scala:47:34
    .io_ID_to_EX_bus_bits_optype        (_inst_decode_unit_io_ID_to_EX_bus_bits_optype),	// top.scala:47:34
    .io_ID_to_EX_bus_bits_rs2_data      (_inst_decode_unit_io_ID_to_EX_bus_bits_rs2_data),	// top.scala:47:34
    .io_ID_to_EX_bus_bits_regWriteID    (_inst_decode_unit_io_ID_to_EX_bus_bits_regWriteID),	// top.scala:47:34
    .io_ID_to_EX_bus_bits_regWriteEn    (_inst_decode_unit_io_ID_to_EX_bus_bits_regWriteEn),	// top.scala:47:34
    .io_ID_to_EX_bus_bits_memWriteEn    (_inst_decode_unit_io_ID_to_EX_bus_bits_memWriteEn),	// top.scala:47:34
    .io_ID_to_EX_bus_bits_memReadEn     (_inst_decode_unit_io_ID_to_EX_bus_bits_memReadEn),	// top.scala:47:34
    .io_ID_to_EX_bus_bits_PC            (_inst_decode_unit_io_ID_to_EX_bus_bits_PC),	// top.scala:47:34
    .io_ID_to_EX_bus_bits_Inst          (_inst_decode_unit_io_ID_to_EX_bus_bits_Inst),	// top.scala:47:34
    .io_EX_to_MEM_bus_valid             (_excute_unit_io_EX_to_MEM_bus_valid),
    .io_EX_to_MEM_bus_bits_Inst         (_excute_unit_io_EX_to_MEM_bus_bits_Inst),
    .io_EX_to_MEM_bus_bits_PC           (_excute_unit_io_EX_to_MEM_bus_bits_PC),
    .io_EX_to_MEM_bus_bits_ALU_result   (_excute_unit_io_EX_to_MEM_bus_bits_ALU_result),
    .io_EX_to_MEM_bus_bits_memWriteData (_excute_unit_io_EX_to_MEM_bus_bits_memWriteData),
    .io_EX_to_MEM_bus_bits_memWriteEn   (_excute_unit_io_EX_to_MEM_bus_bits_memWriteEn),
    .io_EX_to_MEM_bus_bits_memReadEn    (_excute_unit_io_EX_to_MEM_bus_bits_memReadEn),
    .io_EX_to_MEM_bus_bits_lsutype      (_excute_unit_io_EX_to_MEM_bus_bits_lsutype),
    .io_EX_to_MEM_bus_bits_regWriteID   (_excute_unit_io_EX_to_MEM_bus_bits_regWriteID),
    .io_EX_to_MEM_bus_bits_regWriteEn   (_excute_unit_io_EX_to_MEM_bus_bits_regWriteEn),
    .io_EX_ALUResult_Pass               (_excute_unit_io_EX_ALUResult_Pass)
  );
  MEMU mem_unit (	// top.scala:49:26
    .clock                                  (clock),
    .reset                                  (reset),
    .io_EX_to_MEM_bus_valid                 (_excute_unit_io_EX_to_MEM_bus_valid),	// top.scala:48:29
    .io_EX_to_MEM_bus_bits_Inst             (_excute_unit_io_EX_to_MEM_bus_bits_Inst),	// top.scala:48:29
    .io_EX_to_MEM_bus_bits_PC               (_excute_unit_io_EX_to_MEM_bus_bits_PC),	// top.scala:48:29
    .io_EX_to_MEM_bus_bits_ALU_result       (_excute_unit_io_EX_to_MEM_bus_bits_ALU_result),	// top.scala:48:29
    .io_EX_to_MEM_bus_bits_memWriteData     (_excute_unit_io_EX_to_MEM_bus_bits_memWriteData),	// top.scala:48:29
    .io_EX_to_MEM_bus_bits_memWriteEn       (_excute_unit_io_EX_to_MEM_bus_bits_memWriteEn),	// top.scala:48:29
    .io_EX_to_MEM_bus_bits_memReadEn        (_excute_unit_io_EX_to_MEM_bus_bits_memReadEn),	// top.scala:48:29
    .io_EX_to_MEM_bus_bits_lsutype          (_excute_unit_io_EX_to_MEM_bus_bits_lsutype),	// top.scala:48:29
    .io_EX_to_MEM_bus_bits_regWriteID       (_excute_unit_io_EX_to_MEM_bus_bits_regWriteID),	// top.scala:48:29
    .io_EX_to_MEM_bus_bits_regWriteEn       (_excute_unit_io_EX_to_MEM_bus_bits_regWriteEn),	// top.scala:48:29
    .io_MEM_to_WB_bus_valid                 (_mem_unit_io_MEM_to_WB_bus_valid),
    .io_MEM_to_WB_bus_bits_regWriteData     (_mem_unit_io_MEM_to_WB_bus_bits_regWriteData),
    .io_MEM_to_WB_bus_bits_regWriteEn       (_mem_unit_io_MEM_to_WB_bus_bits_regWriteEn),
    .io_MEM_to_WB_bus_bits_regWriteID       (_mem_unit_io_MEM_to_WB_bus_bits_regWriteID),
    .io_MEM_to_WB_bus_bits_PC               (_mem_unit_io_MEM_to_WB_bus_bits_PC),
    .io_MEM_to_WB_bus_bits_Inst             (_mem_unit_io_MEM_to_WB_bus_bits_Inst),
    .io_MEM_to_ID_forward_bits_regWriteData (_mem_unit_io_MEM_to_ID_forward_bits_regWriteData),
    .io_MEM_to_ID_forward_bits_regWriteEn   (_mem_unit_io_MEM_to_ID_forward_bits_regWriteEn),
    .io_MEM_to_ID_forward_bits_regWriteID   (_mem_unit_io_MEM_to_ID_forward_bits_regWriteID),
    .io_PMEM_pc                             (io_PMEM_pc)
  );
  WBU wb_unit (	// top.scala:50:25
    .io_MEM_to_WB_bus_valid                (_mem_unit_io_MEM_to_WB_bus_valid),	// top.scala:49:26
    .io_MEM_to_WB_bus_bits_regWriteData    (_mem_unit_io_MEM_to_WB_bus_bits_regWriteData),	// top.scala:49:26
    .io_MEM_to_WB_bus_bits_regWriteEn      (_mem_unit_io_MEM_to_WB_bus_bits_regWriteEn),	// top.scala:49:26
    .io_MEM_to_WB_bus_bits_regWriteID      (_mem_unit_io_MEM_to_WB_bus_bits_regWriteID),	// top.scala:49:26
    .io_MEM_to_WB_bus_bits_PC              (_mem_unit_io_MEM_to_WB_bus_bits_PC),	// top.scala:49:26
    .io_MEM_to_WB_bus_bits_Inst            (_mem_unit_io_MEM_to_WB_bus_bits_Inst),	// top.scala:49:26
    .io_WB_to_ID_forward_valid             (io_WB_valid),
    .io_WB_to_ID_forward_bits_regWriteData (_wb_unit_io_WB_to_ID_forward_bits_regWriteData),
    .io_WB_to_ID_forward_bits_regWriteEn   (_wb_unit_io_WB_to_ID_forward_bits_regWriteEn),
    .io_WB_to_ID_forward_bits_regWriteID   (_wb_unit_io_WB_to_ID_forward_bits_regWriteID),
    .io_WB_pc                              (io_WB_pc),
    .io_WB_Inst                            (_wb_unit_io_WB_Inst)
  );

wire [63:0] GPR [31:0];
assign {GPR[31], GPR[30], GPR[29], GPR[28], GPR[27], GPR[26], GPR[25], GPR[24], GPR[23], GPR[22], GPR[21], GPR[20]
, GPR[19], GPR[18], GPR[17], GPR[16], GPR[15], GPR[14], GPR[13], GPR[12], GPR[11], GPR[10], GPR[9], GPR[8], GPR[7]
, GPR[6], GPR[5], GPR[4], GPR[3], GPR[2], GPR[1], GPR[0]} = 
{{_inst_decode_unit_io_ID_GPR_31}, {_inst_decode_unit_io_ID_GPR_30}, {_inst_decode_unit_io_ID_GPR_29}, 
{_inst_decode_unit_io_ID_GPR_28}, {_inst_decode_unit_io_ID_GPR_27}, {_inst_decode_unit_io_ID_GPR_26}, {_inst_decode_unit_io_ID_GPR_25}, 
{_inst_decode_unit_io_ID_GPR_24}, {_inst_decode_unit_io_ID_GPR_23}, {_inst_decode_unit_io_ID_GPR_22}, {_inst_decode_unit_io_ID_GPR_21}, 
{_inst_decode_unit_io_ID_GPR_20}, {_inst_decode_unit_io_ID_GPR_19}, {_inst_decode_unit_io_ID_GPR_18}, {_inst_decode_unit_io_ID_GPR_17}, 
{_inst_decode_unit_io_ID_GPR_16}, {_inst_decode_unit_io_ID_GPR_15}, {_inst_decode_unit_io_ID_GPR_14}, {_inst_decode_unit_io_ID_GPR_13}, 
{_inst_decode_unit_io_ID_GPR_12}, {_inst_decode_unit_io_ID_GPR_11}, {_inst_decode_unit_io_ID_GPR_10}, {_inst_decode_unit_io_ID_GPR_9 }, 
{_inst_decode_unit_io_ID_GPR_8 }, {_inst_decode_unit_io_ID_GPR_7 }, {_inst_decode_unit_io_ID_GPR_6 }, {_inst_decode_unit_io_ID_GPR_5 },
{_inst_decode_unit_io_ID_GPR_4 }, {_inst_decode_unit_io_ID_GPR_3 }, {_inst_decode_unit_io_ID_GPR_2 }, {_inst_decode_unit_io_ID_GPR_1 }, 
{_inst_decode_unit_io_ID_GPR_0}};	// IDU.scala:55:22, :66:20

sim simulate (	// top.scala:24:26
   .IF_pc             (_inst_fetch_unit_io_IF_to_ID_bus_bits_PC),	// top.scala:24:33
   .WB_Inst           (io_WB_Inst),
   .GPR               (GPR),
   .unknown_inst_flag(_inst_decode_unit_io_ID_unknown_inst)
);
  assign io_ID_npc = _inst_decode_unit_io_ID_npc;	// <stdin>:1488:10, top.scala:47:34
  assign io_IF_pc = _inst_fetch_unit_io_IF_to_ID_bus_bits_PC;	// <stdin>:1488:10, top.scala:46:33
  assign io_ID_pc = _inst_decode_unit_io_ID_to_EX_bus_bits_PC;	// <stdin>:1488:10, top.scala:47:34
  assign io_EX_pc = _excute_unit_io_EX_to_MEM_bus_bits_PC;	// <stdin>:1488:10, top.scala:48:29
  assign io_WB_Inst = _wb_unit_io_WB_Inst;	// <stdin>:1488:10, top.scala:50:25
  assign io_WB_RegWriteData = _wb_unit_io_WB_to_ID_forward_bits_regWriteData;	// <stdin>:1488:10, top.scala:50:25
  assign io_WB_RegWriteID = {59'h0, _wb_unit_io_WB_to_ID_forward_bits_regWriteID};	// <stdin>:1488:10, top.scala:50:25, :65:24
  assign io_MEM_RegWriteData = _mem_unit_io_MEM_to_ID_forward_bits_regWriteData;	// <stdin>:1488:10, top.scala:49:26
  assign io_IF_Inst = _inst_fetch_unit_io_IF_to_ID_bus_bits_Inst;	// <stdin>:1488:10, top.scala:46:33
  assign io_IF_valid = _inst_fetch_unit_io_IF_to_ID_bus_valid;	// <stdin>:1488:10, top.scala:46:33
  assign io_ID_ALU_Data1 = _inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data1;	// <stdin>:1488:10, top.scala:47:34
  assign io_ID_ALU_Data2 = _inst_decode_unit_io_ID_to_EX_bus_bits_ALU_Data2;	// <stdin>:1488:10, top.scala:47:34
  assign io_ID_Rs2Data = _inst_decode_unit_io_ID_to_EX_bus_bits_rs2_data;	// <stdin>:1488:10, top.scala:47:34
  assign io_ALUResult = _excute_unit_io_EX_to_MEM_bus_bits_ALU_result;	// <stdin>:1488:10, top.scala:48:29
endmodule


// ----- 8< ----- FILE "./build/sim_sram.v" ----- 8< -----

import "DPI-C" function void dci_pmem_write(input longint waddr, input longint wdata, input byte wmask);
import "DPI-C" function void dci_pmem_read(input longint raddr, output longint rdata, input byte rmask);

module sim_sram(
    input       [63:0]      pc          ,         //for debug
    input                   aresetn     ,
    input                   aclk        ,
    //ar
    input       [31:0]      araddr      ,
    input                   arvalid     ,
    output                  arready     ,
    //r
    output      [63:0]      rdata       ,
    output      [1: 0]      rresp       ,
    output                  rvalid      ,
    input                   rready      ,
    //aw
    input       [31:0]      awaddr      ,
    input                   awvalid     ,
    output                  awready     , 
    //w
    input       [63:0]      wdata       , 
    input       [7: 0]      wstrb       ,
    input                   wvalid      ,
    output                  wready      ,
    //b
    output      [1: 0]      bresp       ,
    output                  bvalid      ,
    input                   bready
);

    reg arready_r, rvalid_r, awready_r, wready_r, bvalid_r;
    reg [1:0] rresp_r, bresp_r;
    reg [63:0] rdata_r;

    reg [31:0] araddr_r, awaddr_r;

    assign arready = arready_r;
    assign rvalid = rvalid_r;
    assign awready = awready_r;
    assign wready = wready_r;
    assign bvalid = bvalid_r;
    assign rresp = rresp_r;
    assign bresp = bresp_r;
    assign rdata = rdata_r;

    //ar
    always@(posedge aclk) begin
        if(!aresetn) begin
            arready_r <= 1'b1;
            araddr_r  <= 32'b0;
        end
        else if(arvalid) begin
            arready_r <= 1'b1;
            araddr_r <= araddr;
        end
        else 
            arready_r <= 1'b1;
    end

    //rresp
    always@(posedge aclk) begin
        if(!aresetn) begin
            rvalid_r <= 1'b0;
            rresp_r  <= 2'b0;
        end
        else begin
            if(arready_r & arvalid) begin
                rvalid_r <= 1'b1;
                rresp_r  <= 2'b00;
            end
            else if(rvalid_r & rready) begin
                rvalid_r <= 1'b0;
            end
        end 
    end

    //r
    always@(posedge aclk) begin
        if(!aresetn) begin
            rdata_r = 64'b0;
        end
        else begin
            if(arready_r & arvalid)
                dci_pmem_read({32'H0000, araddr_r}, rdata_r, 8'HFF);
        end
        // $display("addr:0x%x, rdata:0x%x", araddr_r, rdata_r);
    end

    //aw
    always@(posedge aclk) begin
        if(!aresetn) begin
            awready_r <= 1'b1;
            awaddr_r <= 32'b0;
        end
        else begin
            if(awvalid) begin
                awaddr_r <= awaddr;
                awready_r <= 1'b1;
            end
        end
    end

    //w
    always@(posedge aclk) begin
        if(!aresetn) begin
            wready_r <= 1'b1;
        end
        else begin
            if(wvalid & awvalid)  begin
                dci_pmem_write({32'H0000, awaddr_r}, wdata, wstrb);
            end
        end
    end

    //b
    always@(posedge aclk) begin
        if(!aresetn) begin
            bvalid_r <= 1'b0;
            bresp_r  <= 2'b00;
        end
        else begin
            if(wready_r & wvalid & wready_r) begin
                bvalid_r <= 1'b1;
                bresp_r  <= 2'b00;
            end
            else if(bready & bvalid_r)
                bvalid_r <= 1'b0;
        end
    end

endmodule

// ----- 8< ----- FILE "./build/sim.v" ----- 8< -----

import "DPI-C" function void set_gpr_ptr(input logic [63:0] a []);
import "DPI-C" function void unknown_inst();
import "DPI-C" function void ebreak(input longint halt_ret);



module sim(input[63:0] IF_pc, input [63:0] GPR [31:0], input unknown_inst_flag, input[31:0] WB_Inst);

   initial begin
      if ($test$plusargs("trace") != 0) begin
         $display("[%0t] Tracing to logs/vlt_dump.vcd...\n", $time);
         $dumpfile("logs/vlt_dump.vcd");
         $dumpvars();
      end
      $display("[%0t] Model running...\n", $time);
   end

   initial set_gpr_ptr(GPR);    // rf为通用寄存器的二维数组变量

  always@(*) begin
      reg [63:0] i = GPR[10][63:0];
      if(unknown_inst_flag) unknown_inst();
      if(WB_Inst[31:0] == 32'h00100073) begin
        ebreak(i);
        $finish();
      end
  end

endmodule

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----
